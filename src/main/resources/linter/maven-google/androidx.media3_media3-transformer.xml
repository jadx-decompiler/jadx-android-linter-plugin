<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
    <item name="androidx.media3.transformer.AssetLoader.CompositionSettings CompositionSettings(int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.Composition.HDR_MODE_KEEP_HDR, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_MEDIACODEC, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_OPEN_GL, androidx.media3.transformer.Composition.HDR_MODE_EXPERIMENTAL_FORCE_INTERPRET_HDR_AS_SDR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.AssetLoader.Listener boolean onTrackAdded(androidx.media3.common.Format, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.AssetLoader.SUPPORTED_OUTPUT_TYPE_ENCODED, androidx.media3.transformer.AssetLoader.SUPPORTED_OUTPUT_TYPE_DECODED}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.Composition Composition(java.util.List&lt;androidx.media3.transformer.EditedMediaItemSequence&gt;, androidx.media3.effect.VideoCompositorSettings, androidx.media3.transformer.Effects, boolean, boolean, boolean, int, boolean) 6">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.Composition.HDR_MODE_KEEP_HDR, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_MEDIACODEC, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_OPEN_GL, androidx.media3.transformer.Composition.HDR_MODE_EXPERIMENTAL_FORCE_INTERPRET_HDR_AS_SDR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.Composition.Builder androidx.media3.transformer.Composition.Builder setHdrMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.Composition.HDR_MODE_KEEP_HDR, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_MEDIACODEC, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_OPEN_GL, androidx.media3.transformer.Composition.HDR_MODE_EXPERIMENTAL_FORCE_INTERPRET_HDR_AS_SDR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.DefaultCodec androidx.media3.transformer.ExportException createExportException(android.media.MediaFormat, boolean, boolean, java.lang.Exception, int, java.lang.String) 4">
        <annotation name="androidx.annotation.IntDef">
            <val name="open" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.ExportException.ERROR_CODE_UNSPECIFIED, androidx.media3.transformer.ExportException.ERROR_CODE_FAILED_RUNTIME_CHECK, androidx.media3.transformer.ExportException.ERROR_CODE_IO_UNSPECIFIED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT, androidx.media3.transformer.ExportException.ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE, androidx.media3.transformer.ExportException.ERROR_CODE_IO_BAD_HTTP_STATUS, androidx.media3.transformer.ExportException.ERROR_CODE_IO_FILE_NOT_FOUND, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NO_PERMISSION, androidx.media3.transformer.ExportException.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE, androidx.media3.transformer.ExportException.ERROR_CODE_DECODER_INIT_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_DECODING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODER_INIT_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.ExportException.ERROR_CODE_VIDEO_FRAME_PROCESSING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_AUDIO_PROCESSING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_MUXING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_MUXING_TIMEOUT}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.ExoAssetLoaderVideoRenderer ExoAssetLoaderVideoRenderer(boolean, androidx.media3.transformer.Codec.DecoderFactory, int, androidx.media3.transformer.TransformerMediaClock, androidx.media3.transformer.AssetLoader.Listener) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.Composition.HDR_MODE_KEEP_HDR, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_MEDIACODEC, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_OPEN_GL, androidx.media3.transformer.Composition.HDR_MODE_EXPERIMENTAL_FORCE_INTERPRET_HDR_AS_SDR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.ExoPlayerAssetLoader ExoPlayerAssetLoader(android.content.Context, androidx.media3.transformer.EditedMediaItem, androidx.media3.exoplayer.source.MediaSource.Factory, androidx.media3.transformer.Codec.DecoderFactory, int, android.os.Looper, androidx.media3.transformer.AssetLoader.Listener, androidx.media3.common.util.Clock) 4">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.Composition.HDR_MODE_KEEP_HDR, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_MEDIACODEC, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_OPEN_GL, androidx.media3.transformer.Composition.HDR_MODE_EXPERIMENTAL_FORCE_INTERPRET_HDR_AS_SDR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.ExoPlayerAssetLoader.RenderersFactoryImpl RenderersFactoryImpl(boolean, boolean, boolean, androidx.media3.transformer.Codec.DecoderFactory, int, androidx.media3.transformer.AssetLoader.Listener) 4">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.Composition.HDR_MODE_KEEP_HDR, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_MEDIACODEC, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_OPEN_GL, androidx.media3.transformer.Composition.HDR_MODE_EXPERIMENTAL_FORCE_INTERPRET_HDR_AS_SDR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.ExportException ExportException(java.lang.String, java.lang.Throwable, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="open" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.ExportException.ERROR_CODE_UNSPECIFIED, androidx.media3.transformer.ExportException.ERROR_CODE_FAILED_RUNTIME_CHECK, androidx.media3.transformer.ExportException.ERROR_CODE_IO_UNSPECIFIED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT, androidx.media3.transformer.ExportException.ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE, androidx.media3.transformer.ExportException.ERROR_CODE_IO_BAD_HTTP_STATUS, androidx.media3.transformer.ExportException.ERROR_CODE_IO_FILE_NOT_FOUND, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NO_PERMISSION, androidx.media3.transformer.ExportException.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE, androidx.media3.transformer.ExportException.ERROR_CODE_DECODER_INIT_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_DECODING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODER_INIT_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.ExportException.ERROR_CODE_VIDEO_FRAME_PROCESSING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_AUDIO_PROCESSING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_MUXING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_MUXING_TIMEOUT}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.ExportException ExportException(java.lang.String, java.lang.Throwable, int, androidx.media3.transformer.ExportException.CodecInfo) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="open" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.ExportException.ERROR_CODE_UNSPECIFIED, androidx.media3.transformer.ExportException.ERROR_CODE_FAILED_RUNTIME_CHECK, androidx.media3.transformer.ExportException.ERROR_CODE_IO_UNSPECIFIED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT, androidx.media3.transformer.ExportException.ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE, androidx.media3.transformer.ExportException.ERROR_CODE_IO_BAD_HTTP_STATUS, androidx.media3.transformer.ExportException.ERROR_CODE_IO_FILE_NOT_FOUND, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NO_PERMISSION, androidx.media3.transformer.ExportException.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE, androidx.media3.transformer.ExportException.ERROR_CODE_DECODER_INIT_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_DECODING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODER_INIT_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.ExportException.ERROR_CODE_VIDEO_FRAME_PROCESSING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_AUDIO_PROCESSING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_MUXING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_MUXING_TIMEOUT}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.ExportException androidx.media3.transformer.ExportException createForCodec(java.lang.Throwable, int, androidx.media3.transformer.ExportException.CodecInfo) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="open" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.ExportException.ERROR_CODE_UNSPECIFIED, androidx.media3.transformer.ExportException.ERROR_CODE_FAILED_RUNTIME_CHECK, androidx.media3.transformer.ExportException.ERROR_CODE_IO_UNSPECIFIED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT, androidx.media3.transformer.ExportException.ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE, androidx.media3.transformer.ExportException.ERROR_CODE_IO_BAD_HTTP_STATUS, androidx.media3.transformer.ExportException.ERROR_CODE_IO_FILE_NOT_FOUND, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NO_PERMISSION, androidx.media3.transformer.ExportException.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE, androidx.media3.transformer.ExportException.ERROR_CODE_DECODER_INIT_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_DECODING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODER_INIT_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.ExportException.ERROR_CODE_VIDEO_FRAME_PROCESSING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_AUDIO_PROCESSING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_MUXING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_MUXING_TIMEOUT}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.ExportException java.lang.String getErrorCodeName(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="open" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.ExportException.ERROR_CODE_UNSPECIFIED, androidx.media3.transformer.ExportException.ERROR_CODE_FAILED_RUNTIME_CHECK, androidx.media3.transformer.ExportException.ERROR_CODE_IO_UNSPECIFIED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT, androidx.media3.transformer.ExportException.ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE, androidx.media3.transformer.ExportException.ERROR_CODE_IO_BAD_HTTP_STATUS, androidx.media3.transformer.ExportException.ERROR_CODE_IO_FILE_NOT_FOUND, androidx.media3.transformer.ExportException.ERROR_CODE_IO_NO_PERMISSION, androidx.media3.transformer.ExportException.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED, androidx.media3.transformer.ExportException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE, androidx.media3.transformer.ExportException.ERROR_CODE_DECODER_INIT_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_DECODING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODER_INIT_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.ExportException.ERROR_CODE_VIDEO_FRAME_PROCESSING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_AUDIO_PROCESSING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_MUXING_FAILED, androidx.media3.transformer.ExportException.ERROR_CODE_MUXING_TIMEOUT}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.ExportResult ExportResult(com.google.common.collect.ImmutableList&lt;androidx.media3.transformer.ExportResult.ProcessedInput&gt;, long, long, int, int, int, java.lang.String, java.lang.String, int, androidx.media3.common.ColorInfo, int, int, int, java.lang.String, java.lang.String, int, androidx.media3.transformer.ExportException) 15">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.ExportResult.OPTIMIZATION_NONE, androidx.media3.transformer.ExportResult.OPTIMIZATION_SUCCEEDED, androidx.media3.transformer.ExportResult.OPTIMIZATION_ABANDONED_KEYFRAME_PLACEMENT_OPTIMAL_FOR_TRIM, androidx.media3.transformer.ExportResult.OPTIMIZATION_ABANDONED_TRIM_AND_TRANSCODING_TRANSFORMATION_REQUESTED, androidx.media3.transformer.ExportResult.OPTIMIZATION_ABANDONED_OTHER, androidx.media3.transformer.ExportResult.OPTIMIZATION_FAILED_EXTRACTION_FAILED, androidx.media3.transformer.ExportResult.OPTIMIZATION_FAILED_FORMAT_MISMATCH}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.ExportResult int getConversionProcess(java.lang.String, int, java.util.List&lt;androidx.media3.transformer.ExportResult.ProcessedInput&gt;, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.ExportResult.OPTIMIZATION_NONE, androidx.media3.transformer.ExportResult.OPTIMIZATION_SUCCEEDED, androidx.media3.transformer.ExportResult.OPTIMIZATION_ABANDONED_KEYFRAME_PLACEMENT_OPTIMAL_FOR_TRIM, androidx.media3.transformer.ExportResult.OPTIMIZATION_ABANDONED_TRIM_AND_TRANSCODING_TRANSFORMATION_REQUESTED, androidx.media3.transformer.ExportResult.OPTIMIZATION_ABANDONED_OTHER, androidx.media3.transformer.ExportResult.OPTIMIZATION_FAILED_EXTRACTION_FAILED, androidx.media3.transformer.ExportResult.OPTIMIZATION_FAILED_FORMAT_MISMATCH}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.ExportResult.Builder androidx.media3.transformer.ExportResult.Builder setOptimizationResult(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.ExportResult.OPTIMIZATION_NONE, androidx.media3.transformer.ExportResult.OPTIMIZATION_SUCCEEDED, androidx.media3.transformer.ExportResult.OPTIMIZATION_ABANDONED_KEYFRAME_PLACEMENT_OPTIMAL_FOR_TRIM, androidx.media3.transformer.ExportResult.OPTIMIZATION_ABANDONED_TRIM_AND_TRANSCODING_TRANSFORMATION_REQUESTED, androidx.media3.transformer.ExportResult.OPTIMIZATION_ABANDONED_OTHER, androidx.media3.transformer.ExportResult.OPTIMIZATION_FAILED_EXTRACTION_FAILED, androidx.media3.transformer.ExportResult.OPTIMIZATION_FAILED_FORMAT_MISMATCH}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.MuxerWrapper MuxerWrapper(java.lang.String, androidx.media3.muxer.Muxer.Factory, androidx.media3.transformer.MuxerWrapper.Listener, int, boolean, androidx.media3.common.Format, long) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.MuxerWrapper.MUXER_MODE_DEFAULT, androidx.media3.transformer.MuxerWrapper.MUXER_MODE_MUX_PARTIAL, androidx.media3.transformer.MuxerWrapper.MUXER_MODE_APPEND}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.MuxerWrapper void finishWritingAndMaybeRelease(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.MuxerWrapper.MUXER_RELEASE_REASON_COMPLETED, androidx.media3.transformer.MuxerWrapper.MUXER_RELEASE_REASON_CANCELLED, androidx.media3.transformer.MuxerWrapper.MUXER_RELEASE_REASON_ERROR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.SequenceAssetLoader boolean onTrackAdded(androidx.media3.common.Format, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.AssetLoader.SUPPORTED_OUTPUT_TYPE_ENCODED, androidx.media3.transformer.AssetLoader.SUPPORTED_OUTPUT_TYPE_DECODED}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.TransformationException TransformationException(java.lang.String, java.lang.Throwable, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="open" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.TransformationException.ERROR_CODE_UNSPECIFIED, androidx.media3.transformer.TransformationException.ERROR_CODE_FAILED_RUNTIME_CHECK, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_UNSPECIFIED, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_BAD_HTTP_STATUS, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_FILE_NOT_FOUND, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_NO_PERMISSION, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE, androidx.media3.transformer.TransformationException.ERROR_CODE_DECODER_INIT_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_DECODING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODER_INIT_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.TransformationException.ERROR_CODE_VIDEO_FRAME_PROCESSING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_AUDIO_PROCESSING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_MUXING_FAILED}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.TransformationException androidx.media3.transformer.TransformationException createForCodec(java.lang.Throwable, int, boolean, boolean, androidx.media3.common.Format) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="open" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.TransformationException.ERROR_CODE_UNSPECIFIED, androidx.media3.transformer.TransformationException.ERROR_CODE_FAILED_RUNTIME_CHECK, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_UNSPECIFIED, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_BAD_HTTP_STATUS, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_FILE_NOT_FOUND, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_NO_PERMISSION, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE, androidx.media3.transformer.TransformationException.ERROR_CODE_DECODER_INIT_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_DECODING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODER_INIT_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.TransformationException.ERROR_CODE_VIDEO_FRAME_PROCESSING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_AUDIO_PROCESSING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_MUXING_FAILED}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.TransformationException androidx.media3.transformer.TransformationException createForCodec(java.lang.Throwable, int, boolean, boolean, java.lang.String) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="open" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.TransformationException.ERROR_CODE_UNSPECIFIED, androidx.media3.transformer.TransformationException.ERROR_CODE_FAILED_RUNTIME_CHECK, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_UNSPECIFIED, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_BAD_HTTP_STATUS, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_FILE_NOT_FOUND, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_NO_PERMISSION, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE, androidx.media3.transformer.TransformationException.ERROR_CODE_DECODER_INIT_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_DECODING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODER_INIT_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.TransformationException.ERROR_CODE_VIDEO_FRAME_PROCESSING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_AUDIO_PROCESSING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_MUXING_FAILED}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.TransformationException java.lang.String getErrorCodeName(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="open" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.TransformationException.ERROR_CODE_UNSPECIFIED, androidx.media3.transformer.TransformationException.ERROR_CODE_FAILED_RUNTIME_CHECK, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_UNSPECIFIED, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_BAD_HTTP_STATUS, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_FILE_NOT_FOUND, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_NO_PERMISSION, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED, androidx.media3.transformer.TransformationException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE, androidx.media3.transformer.TransformationException.ERROR_CODE_DECODER_INIT_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_DECODING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODER_INIT_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED, androidx.media3.transformer.TransformationException.ERROR_CODE_VIDEO_FRAME_PROCESSING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_AUDIO_PROCESSING_FAILED, androidx.media3.transformer.TransformationException.ERROR_CODE_MUXING_FAILED}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.TransformationRequest TransformationRequest(int, java.lang.String, java.lang.String, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.Composition.HDR_MODE_KEEP_HDR, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_MEDIACODEC, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_OPEN_GL, androidx.media3.transformer.Composition.HDR_MODE_EXPERIMENTAL_FORCE_INTERPRET_HDR_AS_SDR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.TransformationRequest.Builder androidx.media3.transformer.TransformationRequest.Builder setHdrMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.Composition.HDR_MODE_KEEP_HDR, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_MEDIACODEC, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_OPEN_GL, androidx.media3.transformer.Composition.HDR_MODE_EXPERIMENTAL_FORCE_INTERPRET_HDR_AS_SDR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.TransformerInternal int getMuxerReleaseReason(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.TransformerInternal.END_REASON_COMPLETED, androidx.media3.transformer.TransformerInternal.END_REASON_CANCELLED, androidx.media3.transformer.TransformerInternal.END_REASON_ERROR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.TransformerInternal void endInternal(int, androidx.media3.transformer.ExportException) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.TransformerInternal.END_REASON_COMPLETED, androidx.media3.transformer.TransformerInternal.END_REASON_CANCELLED, androidx.media3.transformer.TransformerInternal.END_REASON_ERROR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.TransformerInternal.SequenceAssetLoaderListener boolean onTrackAdded(androidx.media3.common.Format, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.AssetLoader.SUPPORTED_OUTPUT_TYPE_ENCODED, androidx.media3.transformer.AssetLoader.SUPPORTED_OUTPUT_TYPE_DECODED}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.TransformerInternal.SequenceAssetLoaderListener boolean shouldTranscode(androidx.media3.common.Format, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="true"></val>
            <val name="value" val="{androidx.media3.transformer.AssetLoader.SUPPORTED_OUTPUT_TYPE_ENCODED, androidx.media3.transformer.AssetLoader.SUPPORTED_OUTPUT_TYPE_DECODED}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.TransformerUtil android.util.Pair&lt;java.lang.String,java.lang.Integer&gt; getOutputMimeTypeAndHdrModeAfterFallback(int, java.lang.String, androidx.media3.common.ColorInfo) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.Composition.HDR_MODE_KEEP_HDR, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_MEDIACODEC, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_OPEN_GL, androidx.media3.transformer.Composition.HDR_MODE_EXPERIMENTAL_FORCE_INTERPRET_HDR_AS_SDR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.VideoEncoderSettings.Builder androidx.media3.transformer.VideoEncoderSettings.Builder setBitrateMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaCodecInfo.EncoderCapabilities.BITRATE_MODE_VBR, android.media.MediaCodecInfo.EncoderCapabilities.BITRATE_MODE_CBR}"></val>
        </annotation>
    </item>
    <item name="androidx.media3.transformer.VideoSampleExporter.EncoderWrapper androidx.media3.transformer.TransformationRequest createSupportedTransformationRequest(androidx.media3.transformer.TransformationRequest, boolean, androidx.media3.common.Format, androidx.media3.common.Format, int) 4">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media3.transformer.Composition.HDR_MODE_KEEP_HDR, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_MEDIACODEC, androidx.media3.transformer.Composition.HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_OPEN_GL, androidx.media3.transformer.Composition.HDR_MODE_EXPERIMENTAL_FORCE_INTERPRET_HDR_AS_SDR}"></val>
        </annotation>
    </item>
</root>
