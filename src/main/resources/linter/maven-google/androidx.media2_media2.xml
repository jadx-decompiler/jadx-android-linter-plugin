<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
    <item name="androidx.media2.ConnectedControllersManager boolean isAllowedCommand(androidx.media2.MediaSession.ControllerInfo, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaBrowser.BrowserResult BrowserResult(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaBrowser.BrowserResult BrowserResult(int, androidx.media2.MediaItem, androidx.media2.MediaLibraryService.LibraryParams) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaBrowser.BrowserResult BrowserResult(int, androidx.media2.MediaItem, java.util.List&lt;androidx.media2.MediaItem&gt;, androidx.media2.MediaLibraryService.LibraryParams) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaBrowser.BrowserResult BrowserResult(int, androidx.media2.MediaItem, java.util.List&lt;androidx.media2.MediaItem&gt;, androidx.media2.MediaLibraryService.LibraryParams, long) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaBrowser.BrowserResult BrowserResult(int, java.util.List&lt;androidx.media2.MediaItem&gt;, androidx.media2.MediaLibraryService.LibraryParams) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaBrowser.BrowserResult com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaBrowser.BrowserResult&gt; createFutureWithResult(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; adjustVolume(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.ADJUST_LOWER, android.media.AudioManager.ADJUST_RAISE, android.media.AudioManager.ADJUST_SAME, android.media.AudioManager.ADJUST_MUTE, android.media.AudioManager.ADJUST_UNMUTE, android.media.AudioManager.ADJUST_TOGGLE_MUTE}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; adjustVolume(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; setRepeatMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.REPEAT_MODE_NONE, androidx.media2.SessionPlayer.REPEAT_MODE_ONE, androidx.media2.SessionPlayer.REPEAT_MODE_ALL, androidx.media2.SessionPlayer.REPEAT_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; setShuffleMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.SHUFFLE_MODE_NONE, androidx.media2.SessionPlayer.SHUFFLE_MODE_ALL, androidx.media2.SessionPlayer.SHUFFLE_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; setVolumeTo(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.ControllerCallback void onBufferingStateChanged(androidx.media2.MediaController, androidx.media2.MediaItem, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.BUFFERING_STATE_UNKNOWN, androidx.media2.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_PLAYABLE, androidx.media2.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_STARVED, androidx.media2.SessionPlayer.BUFFERING_STATE_COMPLETE}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.ControllerCallback void onPlayerStateChanged(androidx.media2.MediaController, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.PLAYER_STATE_IDLE, androidx.media2.SessionPlayer.PLAYER_STATE_PAUSED, androidx.media2.SessionPlayer.PLAYER_STATE_PLAYING, androidx.media2.SessionPlayer.PLAYER_STATE_ERROR}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.ControllerCallback void onRepeatModeChanged(androidx.media2.MediaController, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.REPEAT_MODE_NONE, androidx.media2.SessionPlayer.REPEAT_MODE_ONE, androidx.media2.SessionPlayer.REPEAT_MODE_ALL, androidx.media2.SessionPlayer.REPEAT_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.ControllerCallback void onShuffleModeChanged(androidx.media2.MediaController, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.SHUFFLE_MODE_NONE, androidx.media2.SessionPlayer.SHUFFLE_MODE_ALL, androidx.media2.SessionPlayer.SHUFFLE_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.ControllerResult ControllerResult(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaController.ControllerResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.ControllerResult ControllerResult(int, android.os.Bundle) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaController.ControllerResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.ControllerResult ControllerResult(int, android.os.Bundle, androidx.media2.MediaItem) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaController.ControllerResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.ControllerResult ControllerResult(int, android.os.Bundle, androidx.media2.MediaItem, long) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaController.ControllerResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.ControllerResult com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; createFutureWithResult(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaController.ControllerResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.MediaControllerImpl com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; adjustVolume(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.ADJUST_LOWER, android.media.AudioManager.ADJUST_RAISE, android.media.AudioManager.ADJUST_SAME, android.media.AudioManager.ADJUST_MUTE, android.media.AudioManager.ADJUST_UNMUTE, android.media.AudioManager.ADJUST_TOGGLE_MUTE}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.MediaControllerImpl com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; adjustVolume(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.MediaControllerImpl com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; setRepeatMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.REPEAT_MODE_NONE, androidx.media2.SessionPlayer.REPEAT_MODE_ONE, androidx.media2.SessionPlayer.REPEAT_MODE_ALL, androidx.media2.SessionPlayer.REPEAT_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.MediaControllerImpl com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; setShuffleMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.SHUFFLE_MODE_NONE, androidx.media2.SessionPlayer.SHUFFLE_MODE_ALL, androidx.media2.SessionPlayer.SHUFFLE_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaController.MediaControllerImpl com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; setVolumeTo(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaControllerImplBase IMediaSession getSessionInterfaceIfAble(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaControllerImplBase com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; adjustVolume(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.ADJUST_LOWER, android.media.AudioManager.ADJUST_RAISE, android.media.AudioManager.ADJUST_SAME, android.media.AudioManager.ADJUST_MUTE, android.media.AudioManager.ADJUST_UNMUTE, android.media.AudioManager.ADJUST_TOGGLE_MUTE}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaControllerImplBase com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; adjustVolume(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaControllerImplBase com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; setVolumeTo(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaControllerImplLegacy com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; adjustVolume(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.ADJUST_LOWER, android.media.AudioManager.ADJUST_RAISE, android.media.AudioManager.ADJUST_SAME, android.media.AudioManager.ADJUST_MUTE, android.media.AudioManager.ADJUST_UNMUTE, android.media.AudioManager.ADJUST_TOGGLE_MUTE}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaControllerImplLegacy com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; adjustVolume(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaControllerImplLegacy com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; setRepeatMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.REPEAT_MODE_NONE, androidx.media2.SessionPlayer.REPEAT_MODE_ONE, androidx.media2.SessionPlayer.REPEAT_MODE_ALL, androidx.media2.SessionPlayer.REPEAT_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaControllerImplLegacy com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; setShuffleMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.SHUFFLE_MODE_NONE, androidx.media2.SessionPlayer.SHUFFLE_MODE_ALL, androidx.media2.SessionPlayer.SHUFFLE_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaControllerImplLegacy com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaController.ControllerResult&gt; setVolumeTo(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaControllerImplLegacy void sendCommand(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaControllerImplLegacy void sendCommand(int, android.os.Bundle) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaControllerStub void onBufferingStateChanged(int, androidx.versionedparcelable.ParcelImpl, int, long, long, long) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.BUFFERING_STATE_UNKNOWN, androidx.media2.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_PLAYABLE, androidx.media2.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_STARVED, androidx.media2.SessionPlayer.BUFFERING_STATE_COMPLETE}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaLibraryService.LibraryResult LibraryResult(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaLibraryService.LibraryResult LibraryResult(int, androidx.media2.MediaItem, androidx.media2.MediaLibraryService.LibraryParams) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaLibraryService.LibraryResult LibraryResult(int, androidx.media2.MediaItem, java.util.List&lt;androidx.media2.MediaItem&gt;, androidx.media2.MediaLibraryService.LibraryParams) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaLibraryService.LibraryResult LibraryResult(int, java.util.List&lt;androidx.media2.MediaItem&gt;, androidx.media2.MediaLibraryService.LibraryParams) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaMetadata android.graphics.Bitmap getBitmap(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{androidx.media2.MediaMetadata.METADATA_KEY_ART, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM_ART, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_ICON}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaMetadata androidx.media2.Rating getRating(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{androidx.media2.MediaMetadata.METADATA_KEY_USER_RATING, androidx.media2.MediaMetadata.METADATA_KEY_RATING}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaMetadata float getFloat(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{androidx.media2.MediaMetadata.METADATA_KEY_RADIO_FREQUENCY}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaMetadata java.lang.CharSequence getText(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{androidx.media2.MediaMetadata.METADATA_KEY_TITLE, androidx.media2.MediaMetadata.METADATA_KEY_ARTIST, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM, androidx.media2.MediaMetadata.METADATA_KEY_AUTHOR, androidx.media2.MediaMetadata.METADATA_KEY_WRITER, androidx.media2.MediaMetadata.METADATA_KEY_COMPOSER, androidx.media2.MediaMetadata.METADATA_KEY_COMPILATION, androidx.media2.MediaMetadata.METADATA_KEY_DATE, androidx.media2.MediaMetadata.METADATA_KEY_GENRE, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, androidx.media2.MediaMetadata.METADATA_KEY_ART_URI, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, androidx.media2.MediaMetadata.METADATA_KEY_MEDIA_ID, androidx.media2.MediaMetadata.METADATA_KEY_MEDIA_URI, androidx.media2.MediaMetadata.METADATA_KEY_RADIO_PROGRAM_NAME}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaMetadata java.lang.String getString(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{androidx.media2.MediaMetadata.METADATA_KEY_TITLE, androidx.media2.MediaMetadata.METADATA_KEY_ARTIST, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM, androidx.media2.MediaMetadata.METADATA_KEY_AUTHOR, androidx.media2.MediaMetadata.METADATA_KEY_WRITER, androidx.media2.MediaMetadata.METADATA_KEY_COMPOSER, androidx.media2.MediaMetadata.METADATA_KEY_COMPILATION, androidx.media2.MediaMetadata.METADATA_KEY_DATE, androidx.media2.MediaMetadata.METADATA_KEY_GENRE, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, androidx.media2.MediaMetadata.METADATA_KEY_ART_URI, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, androidx.media2.MediaMetadata.METADATA_KEY_MEDIA_ID, androidx.media2.MediaMetadata.METADATA_KEY_MEDIA_URI, androidx.media2.MediaMetadata.METADATA_KEY_RADIO_PROGRAM_NAME}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaMetadata long getLong(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{androidx.media2.MediaMetadata.METADATA_KEY_DURATION, androidx.media2.MediaMetadata.METADATA_KEY_YEAR, androidx.media2.MediaMetadata.METADATA_KEY_TRACK_NUMBER, androidx.media2.MediaMetadata.METADATA_KEY_NUM_TRACKS, androidx.media2.MediaMetadata.METADATA_KEY_DISC_NUMBER, androidx.media2.MediaMetadata.METADATA_KEY_BROWSABLE, androidx.media2.MediaMetadata.METADATA_KEY_PLAYABLE, androidx.media2.MediaMetadata.METADATA_KEY_ADVERTISEMENT, androidx.media2.MediaMetadata.METADATA_KEY_DOWNLOAD_STATUS}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaMetadata.Builder androidx.media2.MediaMetadata.Builder putBitmap(java.lang.String, android.graphics.Bitmap) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{androidx.media2.MediaMetadata.METADATA_KEY_ART, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM_ART, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_ICON}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaMetadata.Builder androidx.media2.MediaMetadata.Builder putFloat(java.lang.String, float) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{androidx.media2.MediaMetadata.METADATA_KEY_DURATION, androidx.media2.MediaMetadata.METADATA_KEY_YEAR, androidx.media2.MediaMetadata.METADATA_KEY_TRACK_NUMBER, androidx.media2.MediaMetadata.METADATA_KEY_NUM_TRACKS, androidx.media2.MediaMetadata.METADATA_KEY_DISC_NUMBER, androidx.media2.MediaMetadata.METADATA_KEY_BROWSABLE, androidx.media2.MediaMetadata.METADATA_KEY_PLAYABLE, androidx.media2.MediaMetadata.METADATA_KEY_ADVERTISEMENT, androidx.media2.MediaMetadata.METADATA_KEY_DOWNLOAD_STATUS}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaMetadata.Builder androidx.media2.MediaMetadata.Builder putLong(java.lang.String, long) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{androidx.media2.MediaMetadata.METADATA_KEY_DURATION, androidx.media2.MediaMetadata.METADATA_KEY_YEAR, androidx.media2.MediaMetadata.METADATA_KEY_TRACK_NUMBER, androidx.media2.MediaMetadata.METADATA_KEY_NUM_TRACKS, androidx.media2.MediaMetadata.METADATA_KEY_DISC_NUMBER, androidx.media2.MediaMetadata.METADATA_KEY_BROWSABLE, androidx.media2.MediaMetadata.METADATA_KEY_PLAYABLE, androidx.media2.MediaMetadata.METADATA_KEY_ADVERTISEMENT, androidx.media2.MediaMetadata.METADATA_KEY_DOWNLOAD_STATUS}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaMetadata.Builder androidx.media2.MediaMetadata.Builder putRating(java.lang.String, androidx.media2.Rating) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{androidx.media2.MediaMetadata.METADATA_KEY_USER_RATING, androidx.media2.MediaMetadata.METADATA_KEY_RATING}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaMetadata.Builder androidx.media2.MediaMetadata.Builder putString(java.lang.String, java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{androidx.media2.MediaMetadata.METADATA_KEY_TITLE, androidx.media2.MediaMetadata.METADATA_KEY_ARTIST, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM, androidx.media2.MediaMetadata.METADATA_KEY_AUTHOR, androidx.media2.MediaMetadata.METADATA_KEY_WRITER, androidx.media2.MediaMetadata.METADATA_KEY_COMPOSER, androidx.media2.MediaMetadata.METADATA_KEY_COMPILATION, androidx.media2.MediaMetadata.METADATA_KEY_DATE, androidx.media2.MediaMetadata.METADATA_KEY_GENRE, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, androidx.media2.MediaMetadata.METADATA_KEY_ART_URI, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, androidx.media2.MediaMetadata.METADATA_KEY_MEDIA_ID, androidx.media2.MediaMetadata.METADATA_KEY_MEDIA_URI, androidx.media2.MediaMetadata.METADATA_KEY_RADIO_PROGRAM_NAME}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaMetadata.Builder androidx.media2.MediaMetadata.Builder putText(java.lang.String, java.lang.CharSequence) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{androidx.media2.MediaMetadata.METADATA_KEY_TITLE, androidx.media2.MediaMetadata.METADATA_KEY_ARTIST, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM, androidx.media2.MediaMetadata.METADATA_KEY_AUTHOR, androidx.media2.MediaMetadata.METADATA_KEY_WRITER, androidx.media2.MediaMetadata.METADATA_KEY_COMPOSER, androidx.media2.MediaMetadata.METADATA_KEY_COMPILATION, androidx.media2.MediaMetadata.METADATA_KEY_DATE, androidx.media2.MediaMetadata.METADATA_KEY_GENRE, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, androidx.media2.MediaMetadata.METADATA_KEY_ART_URI, androidx.media2.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, androidx.media2.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, androidx.media2.MediaMetadata.METADATA_KEY_MEDIA_ID, androidx.media2.MediaMetadata.METADATA_KEY_MEDIA_URI, androidx.media2.MediaMetadata.METADATA_KEY_RADIO_PROGRAM_NAME}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaNotificationHandler void onPlayerStateChanged(androidx.media2.MediaSession, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.PLAYER_STATE_IDLE, androidx.media2.SessionPlayer.PLAYER_STATE_PAUSED, androidx.media2.SessionPlayer.PLAYER_STATE_PLAYING, androidx.media2.SessionPlayer.PLAYER_STATE_ERROR}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.SessionPlayer.PlayerResult&gt; seekTo(long, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaPlayer.SEEK_PREVIOUS_SYNC, androidx.media2.MediaPlayer.SEEK_NEXT_SYNC, androidx.media2.MediaPlayer.SEEK_CLOSEST_SYNC, androidx.media2.MediaPlayer.SEEK_CLOSEST}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer void setBufferingState(androidx.media2.MediaItem, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.BUFFERING_STATE_UNKNOWN, androidx.media2.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_PLAYABLE, androidx.media2.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_STARVED, androidx.media2.SessionPlayer.BUFFERING_STATE_COMPLETE}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer void setState(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.PLAYER_STATE_IDLE, androidx.media2.SessionPlayer.PLAYER_STATE_PAUSED, androidx.media2.SessionPlayer.PLAYER_STATE_PLAYING, androidx.media2.SessionPlayer.PLAYER_STATE_ERROR}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer.DrmResult DrmResult(int, androidx.media2.MediaItem) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.MediaPlayer.DrmResult.RESULT_CODE_PROVISIONING_NETWORK_ERROR, androidx.media2.MediaPlayer.DrmResult.RESULT_CODE_PROVISIONING_SERVER_ERROR, androidx.media2.MediaPlayer.DrmResult.RESULT_CODE_PREPARATION_ERROR, androidx.media2.MediaPlayer.DrmResult.RESULT_CODE_UNSUPPORTED_SCHEME, androidx.media2.MediaPlayer.DrmResult.RESULT_CODE_RESOURCE_BUSY}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer.PlayerCallback void onError(androidx.media2.MediaPlayer, androidx.media2.MediaItem, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaPlayer.PLAYER_ERROR_UNKNOWN, androidx.media2.MediaPlayer.PLAYER_ERROR_IO, androidx.media2.MediaPlayer.PLAYER_ERROR_MALFORMED, androidx.media2.MediaPlayer.PLAYER_ERROR_UNSUPPORTED, androidx.media2.MediaPlayer.PLAYER_ERROR_TIMED_OUT, androidx.media2.MediaPlayer.PLAYER_ERROR_SYSTEM}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer.PlayerCallback void onInfo(androidx.media2.MediaPlayer, androidx.media2.MediaItem, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaPlayer.MEDIA_INFO_UNKNOWN, androidx.media2.MediaPlayer.MEDIA_INFO_MEDIA_ITEM_START, androidx.media2.MediaPlayer.MEDIA_INFO_VIDEO_RENDERING_START, androidx.media2.MediaPlayer.MEDIA_INFO_MEDIA_ITEM_END, androidx.media2.MediaPlayer.MEDIA_INFO_MEDIA_ITEM_LIST_END, androidx.media2.MediaPlayer.MEDIA_INFO_MEDIA_ITEM_REPEAT, androidx.media2.MediaPlayer.MEDIA_INFO_PREPARED, androidx.media2.MediaPlayer.MEDIA_INFO_VIDEO_TRACK_LAGGING, androidx.media2.MediaPlayer.MEDIA_INFO_BUFFERING_START, androidx.media2.MediaPlayer.MEDIA_INFO_BUFFERING_END, androidx.media2.MediaPlayer.MEDIA_INFO_NETWORK_BANDWIDTH, androidx.media2.MediaPlayer.MEDIA_INFO_BUFFERING_UPDATE, androidx.media2.MediaPlayer.MEDIA_INFO_BAD_INTERLEAVING, androidx.media2.MediaPlayer.MEDIA_INFO_NOT_SEEKABLE, androidx.media2.MediaPlayer.MEDIA_INFO_METADATA_UPDATE, androidx.media2.MediaPlayer.MEDIA_INFO_EXTERNAL_METADATA_UPDATE, androidx.media2.MediaPlayer.MEDIA_INFO_AUDIO_NOT_PLAYING, androidx.media2.MediaPlayer.MEDIA_INFO_VIDEO_NOT_PLAYING, androidx.media2.MediaPlayer.MEDIA_INFO_TIMED_TEXT_ERROR, androidx.media2.MediaPlayer.MEDIA_INFO_UNSUPPORTED_SUBTITLE, androidx.media2.MediaPlayer.MEDIA_INFO_SUBTITLE_TIMED_OUT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer2 java.lang.Object seekTo(long, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaPlayer2.SEEK_PREVIOUS_SYNC, androidx.media2.MediaPlayer2.SEEK_NEXT_SYNC, androidx.media2.MediaPlayer2.SEEK_CLOSEST_SYNC, androidx.media2.MediaPlayer2.SEEK_CLOSEST}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer2.DrmEventCallback void onDrmPrepared(androidx.media2.MediaPlayer2, androidx.media2.MediaItem, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaPlayer2.PREPARE_DRM_STATUS_SUCCESS, androidx.media2.MediaPlayer2.PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR, androidx.media2.MediaPlayer2.PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR, androidx.media2.MediaPlayer2.PREPARE_DRM_STATUS_PREPARATION_ERROR, androidx.media2.MediaPlayer2.PREPARE_DRM_STATUS_UNSUPPORTED_SCHEME, androidx.media2.MediaPlayer2.PREPARE_DRM_STATUS_RESOURCE_BUSY}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer2.EventCallback void onCallCompleted(androidx.media2.MediaPlayer2, androidx.media2.MediaItem, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaPlayer2.CALL_COMPLETED_ATTACH_AUX_EFFECT, androidx.media2.MediaPlayer2.CALL_COMPLETED_DESELECT_TRACK, androidx.media2.MediaPlayer2.CALL_COMPLETED_LOOP_CURRENT, androidx.media2.MediaPlayer2.CALL_COMPLETED_PAUSE, androidx.media2.MediaPlayer2.CALL_COMPLETED_PLAY, androidx.media2.MediaPlayer2.CALL_COMPLETED_PREPARE, androidx.media2.MediaPlayer2.CALL_COMPLETED_SEEK_TO, androidx.media2.MediaPlayer2.CALL_COMPLETED_SELECT_TRACK, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_AUDIO_ATTRIBUTES, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_AUDIO_SESSION_ID, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_AUX_EFFECT_SEND_LEVEL, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_DATA_SOURCE, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_NEXT_DATA_SOURCE, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_NEXT_DATA_SOURCES, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_PLAYBACK_PARAMS, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_PLAYER_VOLUME, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_SURFACE, androidx.media2.MediaPlayer2.CALL_COMPLETED_SKIP_TO_NEXT, androidx.media2.MediaPlayer2.CALL_COMPLETED_NOTIFY_WHEN_COMMAND_LABEL_REACHED, androidx.media2.MediaPlayer2.CALL_COMPLETED_PREPARE_DRM}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer2.EventCallback void onCallCompleted(androidx.media2.MediaPlayer2, androidx.media2.MediaItem, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaPlayer2.CALL_STATUS_NO_ERROR, androidx.media2.MediaPlayer2.CALL_STATUS_ERROR_UNKNOWN, androidx.media2.MediaPlayer2.CALL_STATUS_INVALID_OPERATION, androidx.media2.MediaPlayer2.CALL_STATUS_BAD_VALUE, androidx.media2.MediaPlayer2.CALL_STATUS_PERMISSION_DENIED, androidx.media2.MediaPlayer2.CALL_STATUS_ERROR_IO, androidx.media2.MediaPlayer2.CALL_STATUS_SKIPPED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer2.EventCallback void onError(androidx.media2.MediaPlayer2, androidx.media2.MediaItem, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaPlayer2.MEDIA_ERROR_UNKNOWN, androidx.media2.MediaPlayer2.MEDIA_ERROR_IO, androidx.media2.MediaPlayer2.MEDIA_ERROR_MALFORMED, androidx.media2.MediaPlayer2.MEDIA_ERROR_UNSUPPORTED, androidx.media2.MediaPlayer2.MEDIA_ERROR_TIMED_OUT, androidx.media2.MediaPlayer2.MEDIA_ERROR_SYSTEM}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer2.EventCallback void onInfo(androidx.media2.MediaPlayer2, androidx.media2.MediaItem, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaPlayer2.MEDIA_INFO_UNKNOWN, androidx.media2.MediaPlayer2.MEDIA_INFO_DATA_SOURCE_START, androidx.media2.MediaPlayer2.MEDIA_INFO_VIDEO_RENDERING_START, androidx.media2.MediaPlayer2.MEDIA_INFO_AUDIO_RENDERING_START, androidx.media2.MediaPlayer2.MEDIA_INFO_DATA_SOURCE_END, androidx.media2.MediaPlayer2.MEDIA_INFO_DATA_SOURCE_LIST_END, androidx.media2.MediaPlayer2.MEDIA_INFO_DATA_SOURCE_REPEAT, androidx.media2.MediaPlayer2.MEDIA_INFO_PREPARED, androidx.media2.MediaPlayer2.MEDIA_INFO_VIDEO_TRACK_LAGGING, androidx.media2.MediaPlayer2.MEDIA_INFO_BUFFERING_START, androidx.media2.MediaPlayer2.MEDIA_INFO_BUFFERING_END, androidx.media2.MediaPlayer2.MEDIA_INFO_NETWORK_BANDWIDTH, androidx.media2.MediaPlayer2.MEDIA_INFO_BUFFERING_UPDATE, androidx.media2.MediaPlayer2.MEDIA_INFO_BAD_INTERLEAVING, androidx.media2.MediaPlayer2.MEDIA_INFO_NOT_SEEKABLE, androidx.media2.MediaPlayer2.MEDIA_INFO_METADATA_UPDATE, androidx.media2.MediaPlayer2.MEDIA_INFO_EXTERNAL_METADATA_UPDATE, androidx.media2.MediaPlayer2.MEDIA_INFO_AUDIO_NOT_PLAYING, androidx.media2.MediaPlayer2.MEDIA_INFO_VIDEO_NOT_PLAYING, androidx.media2.MediaPlayer2.MEDIA_INFO_TIMED_TEXT_ERROR, androidx.media2.MediaPlayer2.MEDIA_INFO_UNSUPPORTED_SUBTITLE, androidx.media2.MediaPlayer2.MEDIA_INFO_SUBTITLE_TIMED_OUT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer2Impl java.lang.Object seekTo(long, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaPlayer2.SEEK_PREVIOUS_SYNC, androidx.media2.MediaPlayer2.SEEK_NEXT_SYNC, androidx.media2.MediaPlayer2.SEEK_CLOSEST_SYNC, androidx.media2.MediaPlayer2.SEEK_CLOSEST}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer2Impl.MediaPlayerSourceQueue void setBufferingState(android.media.MediaPlayer, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.BUFFERING_STATE_UNKNOWN, androidx.media2.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_PLAYABLE, androidx.media2.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_STARVED, androidx.media2.SessionPlayer.BUFFERING_STATE_COMPLETE}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaPlayer2Impl.MediaPlayerSourceQueue void setMp2State(android.media.MediaPlayer, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaPlayer2.PLAYER_STATE_IDLE, androidx.media2.MediaPlayer2.PLAYER_STATE_PREPARED, androidx.media2.MediaPlayer2.PLAYER_STATE_PAUSED, androidx.media2.MediaPlayer2.PLAYER_STATE_PLAYING, androidx.media2.MediaPlayer2.PLAYER_STATE_ERROR}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSession.ControllerCb void onBufferingStateChanged(int, androidx.media2.MediaItem, int, long, long, long) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.BUFFERING_STATE_UNKNOWN, androidx.media2.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_PLAYABLE, androidx.media2.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_STARVED, androidx.media2.SessionPlayer.BUFFERING_STATE_COMPLETE}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSession.ControllerCb void onRepeatModeChanged(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.REPEAT_MODE_NONE, androidx.media2.SessionPlayer.REPEAT_MODE_ONE, androidx.media2.SessionPlayer.REPEAT_MODE_ALL, androidx.media2.SessionPlayer.REPEAT_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSession.ControllerCb void onShuffleModeChanged(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.SHUFFLE_MODE_NONE, androidx.media2.SessionPlayer.SHUFFLE_MODE_ALL, androidx.media2.SessionPlayer.SHUFFLE_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSession.SessionCallback void onPlayerStateChanged(androidx.media2.MediaSession, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.PLAYER_STATE_IDLE, androidx.media2.SessionPlayer.PLAYER_STATE_PAUSED, androidx.media2.SessionPlayer.PLAYER_STATE_PLAYING, androidx.media2.SessionPlayer.PLAYER_STATE_ERROR}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSession.SessionCallback.ForegroundServiceEventCallback void onPlayerStateChanged(androidx.media2.MediaSession, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.PLAYER_STATE_IDLE, androidx.media2.SessionPlayer.PLAYER_STATE_PAUSED, androidx.media2.SessionPlayer.PLAYER_STATE_PLAYING, androidx.media2.SessionPlayer.PLAYER_STATE_ERROR}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSession.SessionResult SessionResult(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSession.SessionResult SessionResult(int, android.os.Bundle) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSession.SessionResult SessionResult(int, android.os.Bundle, androidx.media2.MediaItem, long) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSession.SessionResult com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.MediaSession.SessionResult&gt; createFutureWithResult(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.BaseResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult.RESULT_CODE_SETUP_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSessionImplBase com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.SessionPlayer.PlayerResult&gt; setRepeatMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.REPEAT_MODE_NONE, androidx.media2.SessionPlayer.REPEAT_MODE_ONE, androidx.media2.SessionPlayer.REPEAT_MODE_ALL, androidx.media2.SessionPlayer.REPEAT_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSessionImplBase com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.SessionPlayer.PlayerResult&gt; setShuffleMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.SHUFFLE_MODE_NONE, androidx.media2.SessionPlayer.SHUFFLE_MODE_ALL, androidx.media2.SessionPlayer.SHUFFLE_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSessionLegacyStub void dispatchSessionTask(int, androidx.media2.MediaSessionLegacyStub.SessionTask) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSessionLegacyStub void dispatchSessionTaskInternal(androidx.media2.SessionCommand, int, androidx.media2.MediaSessionLegacyStub.SessionTask) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSessionLegacyStub void handleTaskOnExecutor(androidx.media2.MediaSession.ControllerInfo, androidx.media2.SessionCommand, int, androidx.media2.MediaSessionLegacyStub.SessionTask) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSessionStub void dispatchLibrarySessionTask(IMediaController, int, int, androidx.media2.MediaSessionStub.LibrarySessionCallbackTask) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSessionStub void dispatchSessionTask(IMediaController, int, int, androidx.media2.MediaSessionStub.SessionTask) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.MediaSessionStub void dispatchSessionTaskInternal(IMediaController, int, androidx.media2.SessionCommand, int, androidx.media2.MediaSessionStub.SessionTask) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.PlaybackParams.Builder androidx.media2.PlaybackParams.Builder setAudioFallbackMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.PlaybackParams.AUDIO_FALLBACK_MODE_DEFAULT, androidx.media2.PlaybackParams.AUDIO_FALLBACK_MODE_MUTE, androidx.media2.PlaybackParams.AUDIO_FALLBACK_MODE_FAIL}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionCommand SessionCommand(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionCommandGroup boolean hasCommand(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionCommandGroup void addCommand(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionCommandGroup.Builder androidx.media2.SessionCommandGroup.Builder addAllLibraryCommands(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_VERSION_1}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionCommandGroup.Builder androidx.media2.SessionCommandGroup.Builder addAllPlayerCommands(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_VERSION_1}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionCommandGroup.Builder androidx.media2.SessionCommandGroup.Builder addAllPlayerCommands(int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_VERSION_1}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionCommandGroup.Builder androidx.media2.SessionCommandGroup.Builder addAllPredefinedCommands(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_VERSION_1}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionCommandGroup.Builder androidx.media2.SessionCommandGroup.Builder addAllSessionCommands(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_VERSION_1}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionCommandGroup.Builder androidx.media2.SessionCommandGroup.Builder addAllVolumeCommands(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_VERSION_1}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionCommandGroup.Builder androidx.media2.SessionCommandGroup.Builder addCommand(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionCommandGroup.Builder androidx.media2.SessionCommandGroup.Builder removeCommand(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SKIP_BACKWARD, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI, androidx.media2.SessionCommand.COMMAND_CODE_SESSION_SET_RATING, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionCommandGroup.Builder void addCommands(int, androidx.collection.ArrayMap&lt;java.lang.Integer,androidx.media2.SessionCommand.Range&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionCommand.COMMAND_VERSION_1}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionPlayer com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.SessionPlayer.PlayerResult&gt; setRepeatMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.REPEAT_MODE_NONE, androidx.media2.SessionPlayer.REPEAT_MODE_ONE, androidx.media2.SessionPlayer.REPEAT_MODE_ALL, androidx.media2.SessionPlayer.REPEAT_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionPlayer com.google.common.util.concurrent.ListenableFuture&lt;androidx.media2.SessionPlayer.PlayerResult&gt; setShuffleMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.SHUFFLE_MODE_NONE, androidx.media2.SessionPlayer.SHUFFLE_MODE_ALL, androidx.media2.SessionPlayer.SHUFFLE_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionPlayer.PlayerCallback void onBufferingStateChanged(androidx.media2.SessionPlayer, androidx.media2.MediaItem, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.BUFFERING_STATE_UNKNOWN, androidx.media2.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_PLAYABLE, androidx.media2.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_STARVED, androidx.media2.SessionPlayer.BUFFERING_STATE_COMPLETE}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionPlayer.PlayerCallback void onPlayerStateChanged(androidx.media2.SessionPlayer, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.PLAYER_STATE_IDLE, androidx.media2.SessionPlayer.PLAYER_STATE_PAUSED, androidx.media2.SessionPlayer.PLAYER_STATE_PLAYING, androidx.media2.SessionPlayer.PLAYER_STATE_ERROR}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionPlayer.PlayerCallback void onRepeatModeChanged(androidx.media2.SessionPlayer, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.REPEAT_MODE_NONE, androidx.media2.SessionPlayer.REPEAT_MODE_ONE, androidx.media2.SessionPlayer.REPEAT_MODE_ALL, androidx.media2.SessionPlayer.REPEAT_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.SessionPlayer.PlayerCallback void onShuffleModeChanged(androidx.media2.SessionPlayer, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.SessionPlayer.SHUFFLE_MODE_NONE, androidx.media2.SessionPlayer.SHUFFLE_MODE_ALL, androidx.media2.SessionPlayer.SHUFFLE_MODE_GROUP}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.exoplayer.ExoPlayerWrapper void seekTo(long, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="flag" val="false"></val>
            <val name="value" val="{androidx.media2.MediaPlayer2.SEEK_PREVIOUS_SYNC, androidx.media2.MediaPlayer2.SEEK_NEXT_SYNC, androidx.media2.MediaPlayer2.SEEK_CLOSEST_SYNC, androidx.media2.MediaPlayer2.SEEK_CLOSEST}"></val>
        </annotation>
    </item>
    <item name="androidx.media2.exoplayer.TextRenderer void select(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{androidx.media2.exoplayer.TextRenderer.TRACK_TYPE_CEA608, androidx.media2.exoplayer.TextRenderer.TRACK_TYPE_CEA708, androidx.media2.exoplayer.TextRenderer.TRACK_TYPE_WEBVTT, androidx.media2.exoplayer.TextRenderer.TRACK_TYPE_UNSET}"></val>
        </annotation>
    </item>
</root>
