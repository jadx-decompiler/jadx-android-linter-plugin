<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
    <item name="android.accessibilityservice.AccessibilityService android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_ANCESTORS, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_SIBLINGS, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_HYBRID, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_UNINTERRUPTIBLE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.accessibilityservice.AccessibilityService java.lang.Object getSystemService(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.content.Context.POWER_SERVICE, android.content.Context.WINDOW_SERVICE, android.content.Context.LAYOUT_INFLATER_SERVICE, android.content.Context.ACCOUNT_SERVICE, android.content.Context.ACTIVITY_SERVICE, android.content.Context.ALARM_SERVICE, android.content.Context.NOTIFICATION_SERVICE, android.content.Context.ACCESSIBILITY_SERVICE, android.content.Context.CAPTIONING_SERVICE, android.content.Context.KEYGUARD_SERVICE, android.content.Context.LOCATION_SERVICE, android.content.Context.HEALTHCONNECT_SERVICE, android.content.Context.SEARCH_SERVICE, android.content.Context.SENSOR_SERVICE, android.content.Context.STORAGE_SERVICE, android.content.Context.STORAGE_STATS_SERVICE, android.content.Context.WALLPAPER_SERVICE, android.content.Context.VIBRATOR_MANAGER_SERVICE, android.content.Context.VIBRATOR_SERVICE, android.content.Context.CONNECTIVITY_SERVICE, android.content.Context.IPSEC_SERVICE, android.content.Context.VPN_MANAGEMENT_SERVICE, android.content.Context.NETWORK_STATS_SERVICE, android.content.Context.WIFI_SERVICE, android.content.Context.WIFI_AWARE_SERVICE, android.content.Context.WIFI_P2P_SERVICE, android.content.Context.WIFI_RTT_RANGING_SERVICE, android.content.Context.NSD_SERVICE, android.content.Context.AUDIO_SERVICE, android.content.Context.FINGERPRINT_SERVICE, android.content.Context.BIOMETRIC_SERVICE, android.content.Context.MEDIA_ROUTER_SERVICE, android.content.Context.TELEPHONY_SERVICE, android.content.Context.TELEPHONY_SUBSCRIPTION_SERVICE, android.content.Context.CARRIER_CONFIG_SERVICE, android.content.Context.EUICC_SERVICE, android.content.Context.TELECOM_SERVICE, android.content.Context.CLIPBOARD_SERVICE, android.content.Context.INPUT_METHOD_SERVICE, android.content.Context.TEXT_SERVICES_MANAGER_SERVICE, android.content.Context.TEXT_CLASSIFICATION_SERVICE, android.content.Context.APPWIDGET_SERVICE, android.content.Context.DROPBOX_SERVICE, android.content.Context.DEVICE_POLICY_SERVICE, android.content.Context.UI_MODE_SERVICE, android.content.Context.DOWNLOAD_SERVICE, android.content.Context.NFC_SERVICE, android.content.Context.BLUETOOTH_SERVICE, android.content.Context.USB_SERVICE, android.content.Context.LAUNCHER_APPS_SERVICE, android.content.Context.INPUT_SERVICE, android.content.Context.DISPLAY_SERVICE, android.content.Context.USER_SERVICE, android.content.Context.RESTRICTIONS_SERVICE, android.content.Context.APP_OPS_SERVICE, android.content.Context.ROLE_SERVICE, android.content.Context.CAMERA_SERVICE, android.content.Context.PRINT_SERVICE, android.content.Context.CONSUMER_IR_SERVICE, android.content.Context.TV_INTERACTIVE_APP_SERVICE, android.content.Context.TV_INPUT_SERVICE, android.content.Context.USAGE_STATS_SERVICE, android.content.Context.MEDIA_SESSION_SERVICE, android.content.Context.MEDIA_COMMUNICATION_SERVICE, android.content.Context.BATTERY_SERVICE, android.content.Context.JOB_SCHEDULER_SERVICE, android.content.Context.PERSISTENT_DATA_BLOCK_SERVICE, android.content.Context.MEDIA_PROJECTION_SERVICE, android.content.Context.MIDI_SERVICE, android.content.Context.HARDWARE_PROPERTIES_SERVICE, android.content.Context.SHORTCUT_SERVICE, android.content.Context.SYSTEM_HEALTH_SERVICE, android.content.Context.COMPANION_DEVICE_SERVICE, android.content.Context.VIRTUAL_DEVICE_SERVICE, android.content.Context.CROSS_PROFILE_APPS_SERVICE, android.content.Context.LOCALE_SERVICE, android.content.Context.MEDIA_METRICS_SERVICE, android.content.Context.DISPLAY_HASH_SERVICE, android.content.Context.CREDENTIAL_SERVICE, android.content.Context.DEVICE_LOCK_SERVICE, android.content.Context.GRAMMATICAL_INFLECTION_SERVICE, android.content.Context.SECURITY_STATE_SERVICE, android.content.Context.CONTACT_KEYS_SERVICE}"></val>
        </annotation>
    </item>
    <item name="android.accessibilityservice.AccessibilityService.SoftKeyboardController boolean setShowMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.accessibilityservice.AccessibilityService.SHOW_MODE_AUTO, android.accessibilityservice.AccessibilityService.SHOW_MODE_HIDDEN, android.accessibilityservice.AccessibilityService.SHOW_MODE_IGNORE_HARD_KEYBOARD}"></val>
        </annotation>
    </item>
    <item name="android.accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener void onShowModeChanged(android.accessibilityservice.AccessibilityService.SoftKeyboardController, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.accessibilityservice.AccessibilityService.SHOW_MODE_AUTO, android.accessibilityservice.AccessibilityService.SHOW_MODE_HIDDEN, android.accessibilityservice.AccessibilityService.SHOW_MODE_IGNORE_HARD_KEYBOARD}"></val>
        </annotation>
    </item>
    <item name="android.accessibilityservice.AccessibilityService.TakeScreenshotCallback void onFailure(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.accessibilityservice.AccessibilityService.ERROR_TAKE_SCREENSHOT_INTERNAL_ERROR, android.accessibilityservice.AccessibilityService.ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESS, android.accessibilityservice.AccessibilityService.ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORT, android.accessibilityservice.AccessibilityService.ERROR_TAKE_SCREENSHOT_INVALID_DISPLAY, android.accessibilityservice.AccessibilityService.ERROR_TAKE_SCREENSHOT_INVALID_WINDOW}"></val>
        </annotation>
    </item>
    <item name="android.accessibilityservice.AccessibilityServiceInfo void setMotionEventSources(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.InputDevice.SOURCE_MOUSE, android.view.InputDevice.SOURCE_STYLUS, android.view.InputDevice.SOURCE_BLUETOOTH_STYLUS, android.view.InputDevice.SOURCE_TRACKBALL, android.view.InputDevice.SOURCE_MOUSE_RELATIVE, android.view.InputDevice.SOURCE_TOUCHPAD, android.view.InputDevice.SOURCE_TOUCH_NAVIGATION, android.view.InputDevice.SOURCE_ROTARY_ENCODER, android.view.InputDevice.SOURCE_JOYSTICK, android.view.InputDevice.SOURCE_SENSOR, android.view.InputDevice.SOURCE_TOUCHSCREEN}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.accessibilityservice.BrailleDisplayController.BrailleDisplayCallback void onConnectionFailed(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.accessibilityservice.BrailleDisplayController.BrailleDisplayCallback.FLAG_ERROR_CANNOT_ACCESS, android.accessibilityservice.BrailleDisplayController.BrailleDisplayCallback.FLAG_ERROR_BRAILLE_DISPLAY_NOT_FOUND}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.accessibilityservice.InputMethod.AccessibilityInputConnection android.view.inputmethod.SurroundingText getSurroundingText(int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputConnection.GET_TEXT_WITH_STYLES}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.accessibilityservice.MagnificationConfig.Builder android.accessibilityservice.MagnificationConfig.Builder setMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.accessibilityservice.MagnificationConfig.MAGNIFICATION_MODE_DEFAULT, android.accessibilityservice.MagnificationConfig.MAGNIFICATION_MODE_FULLSCREEN, android.accessibilityservice.MagnificationConfig.MAGNIFICATION_MODE_WINDOW}"></val>
        </annotation>
    </item>
    <item name="android.accessibilityservice.TouchInteractionController.Callback void onStateChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.accessibilityservice.TouchInteractionController.STATE_CLEAR, android.accessibilityservice.TouchInteractionController.STATE_TOUCH_INTERACTING, android.accessibilityservice.TouchInteractionController.STATE_TOUCH_EXPLORING, android.accessibilityservice.TouchInteractionController.STATE_DRAGGING, android.accessibilityservice.TouchInteractionController.STATE_DELEGATING}"></val>
        </annotation>
    </item>
    <item name="android.accounts.AccountManager boolean setAccountVisibility(android.accounts.Account, java.lang.String, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.accounts.AccountManager.VISIBILITY_UNDEFINED, android.accounts.AccountManager.VISIBILITY_VISIBLE, android.accounts.AccountManager.VISIBILITY_USER_MANAGED_VISIBLE, android.accounts.AccountManager.VISIBILITY_NOT_VISIBLE, android.accounts.AccountManager.VISIBILITY_USER_MANAGED_NOT_VISIBLE}"></val>
        </annotation>
    </item>
    <item name="android.adservices.adselection.ReportEventRequest.Builder Builder(long, java.lang.String, java.lang.String, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.adservices.adselection.ReportEventRequest.FLAG_REPORTING_DESTINATION_SELLER, android.adservices.adselection.ReportEventRequest.FLAG_REPORTING_DESTINATION_BUYER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.adservices.adselection.ReportEventRequest.Builder android.adservices.adselection.ReportEventRequest.Builder setReportingDestinations(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.adservices.adselection.ReportEventRequest.FLAG_REPORTING_DESTINATION_SELLER, android.adservices.adselection.ReportEventRequest.FLAG_REPORTING_DESTINATION_BUYER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.adservices.adselection.UpdateAdCounterHistogramRequest.Builder android.adservices.adselection.UpdateAdCounterHistogramRequest.Builder setAdEventType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.adservices.common.FrequencyCapFilters.AD_EVENT_TYPE_WIN, android.adservices.common.FrequencyCapFilters.AD_EVENT_TYPE_IMPRESSION, android.adservices.common.FrequencyCapFilters.AD_EVENT_TYPE_VIEW, android.adservices.common.FrequencyCapFilters.AD_EVENT_TYPE_CLICK}"></val>
        </annotation>
    </item>
    <item name="android.adservices.appsetid.AppSetId AppSetId(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.adservices.appsetid.AppSetId.SCOPE_APP, android.adservices.appsetid.AppSetId.SCOPE_DEVELOPER}"></val>
        </annotation>
    </item>
    <item name="android.adservices.customaudience.CustomAudience.Builder android.adservices.customaudience.CustomAudience.Builder setAuctionServerRequestFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.adservices.customaudience.CustomAudience.FLAG_AUCTION_SERVER_REQUEST_OMIT_ADS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.adservices.measurement.DeletionRequest.Builder android.adservices.measurement.DeletionRequest.Builder setDeletionMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.adservices.measurement.DeletionRequest.DELETION_MODE_ALL, android.adservices.measurement.DeletionRequest.DELETION_MODE_EXCLUDE_INTERNAL_DATA}"></val>
        </annotation>
    </item>
    <item name="android.adservices.measurement.DeletionRequest.Builder android.adservices.measurement.DeletionRequest.Builder setMatchBehavior(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.adservices.measurement.DeletionRequest.MATCH_BEHAVIOR_DELETE, android.adservices.measurement.DeletionRequest.MATCH_BEHAVIOR_PRESERVE}"></val>
        </annotation>
    </item>
    <item name="android.adservices.ondevicepersonalization.InferenceInput.Params.Builder android.adservices.ondevicepersonalization.InferenceInput.Params.Builder setDelegateType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.adservices.ondevicepersonalization.InferenceInput.Params.DELEGATE_CPU}"></val>
        </annotation>
    </item>
    <item name="android.adservices.ondevicepersonalization.InferenceInput.Params.Builder android.adservices.ondevicepersonalization.InferenceInput.Params.Builder setModelType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.adservices.ondevicepersonalization.InferenceInput.Params.MODEL_TYPE_TENSORFLOW_LITE}"></val>
        </annotation>
    </item>
    <item name="android.adservices.ondevicepersonalization.TrainingInterval.Builder android.adservices.ondevicepersonalization.TrainingInterval.Builder setSchedulingMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.adservices.ondevicepersonalization.TrainingInterval.SCHEDULING_MODE_ONE_TIME, android.adservices.ondevicepersonalization.TrainingInterval.SCHEDULING_MODE_RECURRENT}"></val>
        </annotation>
    </item>
    <item name="android.animation.ValueAnimator void setRepeatMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.animation.ValueAnimator.RESTART, android.animation.ValueAnimator.REVERSE}"></val>
        </annotation>
    </item>
    <item name="android.app.ActionBar void setDisplayOptions(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.ActionBar.DISPLAY_USE_LOGO, android.app.ActionBar.DISPLAY_SHOW_HOME, android.app.ActionBar.DISPLAY_HOME_AS_UP, android.app.ActionBar.DISPLAY_SHOW_TITLE, android.app.ActionBar.DISPLAY_SHOW_CUSTOM}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.ActionBar void setDisplayOptions(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.ActionBar.DISPLAY_USE_LOGO, android.app.ActionBar.DISPLAY_SHOW_HOME, android.app.ActionBar.DISPLAY_HOME_AS_UP, android.app.ActionBar.DISPLAY_SHOW_TITLE, android.app.ActionBar.DISPLAY_SHOW_CUSTOM}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.ActionBar void setDisplayOptions(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.ActionBar.DISPLAY_USE_LOGO, android.app.ActionBar.DISPLAY_SHOW_HOME, android.app.ActionBar.DISPLAY_HOME_AS_UP, android.app.ActionBar.DISPLAY_SHOW_TITLE, android.app.ActionBar.DISPLAY_SHOW_CUSTOM}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.ActionBar void setNavigationMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.ActionBar.NAVIGATION_MODE_STANDARD, android.app.ActionBar.NAVIGATION_MODE_LIST, android.app.ActionBar.NAVIGATION_MODE_TABS}"></val>
        </annotation>
    </item>
    <item name="android.app.Activity android.app.PendingIntent createPendingResult(int, android.content.Intent, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.PendingIntent.FLAG_ONE_SHOT, android.app.PendingIntent.FLAG_NO_CREATE, android.app.PendingIntent.FLAG_CANCEL_CURRENT, android.app.PendingIntent.FLAG_UPDATE_CURRENT, android.app.PendingIntent.FLAG_IMMUTABLE, android.app.PendingIntent.FLAG_MUTABLE, android.app.PendingIntent.FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT, android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.Activity android.content.SharedPreferences getPreferences(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Context.MODE_PRIVATE, android.content.Context.MODE_WORLD_READABLE, android.content.Context.MODE_WORLD_WRITEABLE, android.content.Context.MODE_MULTI_PROCESS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.Activity java.lang.Object getSystemService(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.content.Context.POWER_SERVICE, android.content.Context.WINDOW_SERVICE, android.content.Context.LAYOUT_INFLATER_SERVICE, android.content.Context.ACCOUNT_SERVICE, android.content.Context.ACTIVITY_SERVICE, android.content.Context.ALARM_SERVICE, android.content.Context.NOTIFICATION_SERVICE, android.content.Context.ACCESSIBILITY_SERVICE, android.content.Context.CAPTIONING_SERVICE, android.content.Context.KEYGUARD_SERVICE, android.content.Context.LOCATION_SERVICE, android.content.Context.HEALTHCONNECT_SERVICE, android.content.Context.SEARCH_SERVICE, android.content.Context.SENSOR_SERVICE, android.content.Context.STORAGE_SERVICE, android.content.Context.STORAGE_STATS_SERVICE, android.content.Context.WALLPAPER_SERVICE, android.content.Context.VIBRATOR_MANAGER_SERVICE, android.content.Context.VIBRATOR_SERVICE, android.content.Context.CONNECTIVITY_SERVICE, android.content.Context.IPSEC_SERVICE, android.content.Context.VPN_MANAGEMENT_SERVICE, android.content.Context.NETWORK_STATS_SERVICE, android.content.Context.WIFI_SERVICE, android.content.Context.WIFI_AWARE_SERVICE, android.content.Context.WIFI_P2P_SERVICE, android.content.Context.WIFI_RTT_RANGING_SERVICE, android.content.Context.NSD_SERVICE, android.content.Context.AUDIO_SERVICE, android.content.Context.FINGERPRINT_SERVICE, android.content.Context.BIOMETRIC_SERVICE, android.content.Context.MEDIA_ROUTER_SERVICE, android.content.Context.TELEPHONY_SERVICE, android.content.Context.TELEPHONY_SUBSCRIPTION_SERVICE, android.content.Context.CARRIER_CONFIG_SERVICE, android.content.Context.EUICC_SERVICE, android.content.Context.TELECOM_SERVICE, android.content.Context.CLIPBOARD_SERVICE, android.content.Context.INPUT_METHOD_SERVICE, android.content.Context.TEXT_SERVICES_MANAGER_SERVICE, android.content.Context.TEXT_CLASSIFICATION_SERVICE, android.content.Context.APPWIDGET_SERVICE, android.content.Context.DROPBOX_SERVICE, android.content.Context.DEVICE_POLICY_SERVICE, android.content.Context.UI_MODE_SERVICE, android.content.Context.DOWNLOAD_SERVICE, android.content.Context.NFC_SERVICE, android.content.Context.BLUETOOTH_SERVICE, android.content.Context.USB_SERVICE, android.content.Context.LAUNCHER_APPS_SERVICE, android.content.Context.INPUT_SERVICE, android.content.Context.DISPLAY_SERVICE, android.content.Context.USER_SERVICE, android.content.Context.RESTRICTIONS_SERVICE, android.content.Context.APP_OPS_SERVICE, android.content.Context.ROLE_SERVICE, android.content.Context.CAMERA_SERVICE, android.content.Context.PRINT_SERVICE, android.content.Context.CONSUMER_IR_SERVICE, android.content.Context.TV_INTERACTIVE_APP_SERVICE, android.content.Context.TV_INPUT_SERVICE, android.content.Context.USAGE_STATS_SERVICE, android.content.Context.MEDIA_SESSION_SERVICE, android.content.Context.MEDIA_COMMUNICATION_SERVICE, android.content.Context.BATTERY_SERVICE, android.content.Context.JOB_SCHEDULER_SERVICE, android.content.Context.PERSISTENT_DATA_BLOCK_SERVICE, android.content.Context.MEDIA_PROJECTION_SERVICE, android.content.Context.MIDI_SERVICE, android.content.Context.HARDWARE_PROPERTIES_SERVICE, android.content.Context.SHORTCUT_SERVICE, android.content.Context.SYSTEM_HEALTH_SERVICE, android.content.Context.COMPANION_DEVICE_SERVICE, android.content.Context.VIRTUAL_DEVICE_SERVICE, android.content.Context.CROSS_PROFILE_APPS_SERVICE, android.content.Context.LOCALE_SERVICE, android.content.Context.MEDIA_METRICS_SERVICE, android.content.Context.DISPLAY_HASH_SERVICE, android.content.Context.CREDENTIAL_SERVICE, android.content.Context.DEVICE_LOCK_SERVICE, android.content.Context.GRAMMATICAL_INFLECTION_SERVICE, android.content.Context.SECURITY_STATE_SERVICE, android.content.Context.CONTACT_KEYS_SERVICE}"></val>
        </annotation>
    </item>
    <item name="android.app.Activity void clearOverrideActivityTransition(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Activity.OVERRIDE_TRANSITION_OPEN, android.app.Activity.OVERRIDE_TRANSITION_CLOSE}"></val>
        </annotation>
    </item>
    <item name="android.app.Activity void overrideActivityTransition(int, int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Activity.OVERRIDE_TRANSITION_OPEN, android.app.Activity.OVERRIDE_TRANSITION_CLOSE}"></val>
        </annotation>
    </item>
    <item name="android.app.Activity void overrideActivityTransition(int, int, int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Activity.OVERRIDE_TRANSITION_OPEN, android.app.Activity.OVERRIDE_TRANSITION_CLOSE}"></val>
        </annotation>
    </item>
    <item name="android.app.Activity void requestFullscreenMode(int, android.os.OutcomeReceiver&lt;java.lang.Void,java.lang.Throwable&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Activity.FULLSCREEN_MODE_REQUEST_EXIT, android.app.Activity.FULLSCREEN_MODE_REQUEST_ENTER}"></val>
        </annotation>
    </item>
    <item name="android.app.Activity void setDefaultKeyMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Activity.DEFAULT_KEYS_DISABLE, android.app.Activity.DEFAULT_KEYS_DIALER, android.app.Activity.DEFAULT_KEYS_SHORTCUT, android.app.Activity.DEFAULT_KEYS_SEARCH_LOCAL, android.app.Activity.DEFAULT_KEYS_SEARCH_GLOBAL}"></val>
        </annotation>
    </item>
    <item name="android.app.Activity void setRequestedOrientation(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_USER, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_BEHIND, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_SENSOR, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_NOSENSOR, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_USER_LANDSCAPE, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_FULL_USER, android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LOCKED}"></val>
        </annotation>
    </item>
    <item name="android.app.ActivityManager void moveTaskToFront(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.ActivityManager.MOVE_TASK_WITH_HOME, android.app.ActivityManager.MOVE_TASK_NO_USER_ACTION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.ActivityManager void moveTaskToFront(int, int, android.os.Bundle) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.ActivityManager.MOVE_TASK_WITH_HOME, android.app.ActivityManager.MOVE_TASK_NO_USER_ACTION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.ActivityOptions android.app.ActivityOptions setPendingIntentBackgroundActivityStartMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.ActivityOptions.MODE_BACKGROUND_ACTIVITY_START_SYSTEM_DEFINED, android.app.ActivityOptions.MODE_BACKGROUND_ACTIVITY_START_ALLOWED, android.app.ActivityOptions.MODE_BACKGROUND_ACTIVITY_START_DENIED}"></val>
        </annotation>
    </item>
    <item name="android.app.ActivityOptions android.app.ActivityOptions setPendingIntentCreatorBackgroundActivityStartMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.ActivityOptions.MODE_BACKGROUND_ACTIVITY_START_SYSTEM_DEFINED, android.app.ActivityOptions.MODE_BACKGROUND_ACTIVITY_START_ALLOWED, android.app.ActivityOptions.MODE_BACKGROUND_ACTIVITY_START_DENIED}"></val>
        </annotation>
    </item>
    <item name="android.app.ActivityOptions android.app.ActivityOptions setSplashScreenStyle(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.window.SplashScreen.SPLASH_SCREEN_STYLE_SOLID_COLOR, android.window.SplashScreen.SPLASH_SCREEN_STYLE_ICON}"></val>
        </annotation>
    </item>
    <item name="android.app.AlarmManager void set(int, long, android.app.PendingIntent) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.AlarmManager.RTC_WAKEUP, android.app.AlarmManager.RTC, android.app.AlarmManager.ELAPSED_REALTIME_WAKEUP, android.app.AlarmManager.ELAPSED_REALTIME}"></val>
        </annotation>
    </item>
    <item name="android.app.AlarmManager void set(int, long, java.lang.String, android.app.AlarmManager.OnAlarmListener, android.os.Handler) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.AlarmManager.RTC_WAKEUP, android.app.AlarmManager.RTC, android.app.AlarmManager.ELAPSED_REALTIME_WAKEUP, android.app.AlarmManager.ELAPSED_REALTIME}"></val>
        </annotation>
    </item>
    <item name="android.app.AlarmManager void setAndAllowWhileIdle(int, long, android.app.PendingIntent) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.AlarmManager.RTC_WAKEUP, android.app.AlarmManager.RTC, android.app.AlarmManager.ELAPSED_REALTIME_WAKEUP, android.app.AlarmManager.ELAPSED_REALTIME}"></val>
        </annotation>
    </item>
    <item name="android.app.AlarmManager void setExact(int, long, android.app.PendingIntent) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.AlarmManager.RTC_WAKEUP, android.app.AlarmManager.RTC, android.app.AlarmManager.ELAPSED_REALTIME_WAKEUP, android.app.AlarmManager.ELAPSED_REALTIME}"></val>
        </annotation>
    </item>
    <item name="android.app.AlarmManager void setExact(int, long, java.lang.String, android.app.AlarmManager.OnAlarmListener, android.os.Handler) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.AlarmManager.RTC_WAKEUP, android.app.AlarmManager.RTC, android.app.AlarmManager.ELAPSED_REALTIME_WAKEUP, android.app.AlarmManager.ELAPSED_REALTIME}"></val>
        </annotation>
    </item>
    <item name="android.app.AlarmManager void setExactAndAllowWhileIdle(int, long, android.app.PendingIntent) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.AlarmManager.RTC_WAKEUP, android.app.AlarmManager.RTC, android.app.AlarmManager.ELAPSED_REALTIME_WAKEUP, android.app.AlarmManager.ELAPSED_REALTIME}"></val>
        </annotation>
    </item>
    <item name="android.app.AlarmManager void setInexactRepeating(int, long, long, android.app.PendingIntent) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.AlarmManager.RTC_WAKEUP, android.app.AlarmManager.RTC, android.app.AlarmManager.ELAPSED_REALTIME_WAKEUP, android.app.AlarmManager.ELAPSED_REALTIME}"></val>
        </annotation>
    </item>
    <item name="android.app.AlarmManager void setRepeating(int, long, long, android.app.PendingIntent) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.AlarmManager.RTC_WAKEUP, android.app.AlarmManager.RTC, android.app.AlarmManager.ELAPSED_REALTIME_WAKEUP, android.app.AlarmManager.ELAPSED_REALTIME}"></val>
        </annotation>
    </item>
    <item name="android.app.AlarmManager void setWindow(int, long, long, android.app.PendingIntent) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.AlarmManager.RTC_WAKEUP, android.app.AlarmManager.RTC, android.app.AlarmManager.ELAPSED_REALTIME_WAKEUP, android.app.AlarmManager.ELAPSED_REALTIME}"></val>
        </annotation>
    </item>
    <item name="android.app.AlarmManager void setWindow(int, long, long, java.lang.String, android.app.AlarmManager.OnAlarmListener, android.os.Handler) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.AlarmManager.RTC_WAKEUP, android.app.AlarmManager.RTC, android.app.AlarmManager.ELAPSED_REALTIME_WAKEUP, android.app.AlarmManager.ELAPSED_REALTIME}"></val>
        </annotation>
    </item>
    <item name="android.app.AlarmManager void setWindow(int, long, long, java.lang.String, java.util.concurrent.Executor, android.app.AlarmManager.OnAlarmListener) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.AlarmManager.RTC_WAKEUP, android.app.AlarmManager.RTC, android.app.AlarmManager.ELAPSED_REALTIME_WAKEUP, android.app.AlarmManager.ELAPSED_REALTIME}"></val>
        </annotation>
    </item>
    <item name="android.app.AutomaticZenRule void setInterruptionFilter(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.NotificationManager.INTERRUPTION_FILTER_NONE, android.app.NotificationManager.INTERRUPTION_FILTER_PRIORITY, android.app.NotificationManager.INTERRUPTION_FILTER_ALARMS, android.app.NotificationManager.INTERRUPTION_FILTER_ALL, android.app.NotificationManager.INTERRUPTION_FILTER_UNKNOWN}"></val>
        </annotation>
    </item>
    <item name="android.app.AutomaticZenRule.Builder android.app.AutomaticZenRule.Builder setInterruptionFilter(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.NotificationManager.INTERRUPTION_FILTER_NONE, android.app.NotificationManager.INTERRUPTION_FILTER_PRIORITY, android.app.NotificationManager.INTERRUPTION_FILTER_ALARMS, android.app.NotificationManager.INTERRUPTION_FILTER_ALL, android.app.NotificationManager.INTERRUPTION_FILTER_UNKNOWN}"></val>
        </annotation>
    </item>
    <item name="android.app.AutomaticZenRule.Builder android.app.AutomaticZenRule.Builder setType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.AutomaticZenRule.TYPE_UNKNOWN, android.app.AutomaticZenRule.TYPE_OTHER, android.app.AutomaticZenRule.TYPE_SCHEDULE_TIME, android.app.AutomaticZenRule.TYPE_SCHEDULE_CALENDAR, android.app.AutomaticZenRule.TYPE_BEDTIME, android.app.AutomaticZenRule.TYPE_DRIVING, android.app.AutomaticZenRule.TYPE_IMMERSIVE, android.app.AutomaticZenRule.TYPE_THEATER, android.app.AutomaticZenRule.TYPE_MANAGED}"></val>
        </annotation>
    </item>
    <item name="android.app.BroadcastOptions android.app.BroadcastOptions setDeferralPolicy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.BroadcastOptions.DEFERRAL_POLICY_DEFAULT, android.app.BroadcastOptions.DEFERRAL_POLICY_NONE, android.app.BroadcastOptions.DEFERRAL_POLICY_UNTIL_ACTIVE}"></val>
        </annotation>
    </item>
    <item name="android.app.BroadcastOptions android.app.BroadcastOptions setDeliveryGroupPolicy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.BroadcastOptions.DELIVERY_GROUP_POLICY_ALL, android.app.BroadcastOptions.DELIVERY_GROUP_POLICY_MOST_RECENT}"></val>
        </annotation>
    </item>
    <item name="android.app.ComponentCaller int checkContentUriPermission(android.net.Uri, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.FragmentTransaction android.app.FragmentTransaction setTransition(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.FragmentTransaction.TRANSIT_NONE, android.app.FragmentTransaction.TRANSIT_FRAGMENT_OPEN, android.app.FragmentTransaction.TRANSIT_FRAGMENT_CLOSE, android.app.FragmentTransaction.TRANSIT_FRAGMENT_FADE}"></val>
        </annotation>
    </item>
    <item name="android.app.GameState GameState(boolean, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.GameState.MODE_UNKNOWN, android.app.GameState.MODE_NONE, android.app.GameState.MODE_GAMEPLAY_INTERRUPTIBLE, android.app.GameState.MODE_GAMEPLAY_UNINTERRUPTIBLE, android.app.GameState.MODE_CONTENT}"></val>
        </annotation>
    </item>
    <item name="android.app.GameState GameState(boolean, int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.GameState.MODE_UNKNOWN, android.app.GameState.MODE_NONE, android.app.GameState.MODE_GAMEPLAY_INTERRUPTIBLE, android.app.GameState.MODE_GAMEPLAY_UNINTERRUPTIBLE, android.app.GameState.MODE_CONTENT}"></val>
        </annotation>
    </item>
    <item name="android.app.GrammaticalInflectionManager void setRequestedApplicationGrammaticalGender(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.res.Configuration.GRAMMATICAL_GENDER_NOT_SPECIFIED, android.content.res.Configuration.GRAMMATICAL_GENDER_NEUTRAL, android.content.res.Configuration.GRAMMATICAL_GENDER_FEMININE, android.content.res.Configuration.GRAMMATICAL_GENDER_MASCULINE}"></val>
        </annotation>
    </item>
    <item name="android.app.Instrumentation android.app.UiAutomation getUiAutomation(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.UiAutomation.FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES, android.app.UiAutomation.FLAG_DONT_USE_ACCESSIBILITY}"></val>
        </annotation>
    </item>
    <item name="android.app.Notification.Action.Builder android.app.Notification.Action.Builder setSemanticAction(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Notification.Action.SEMANTIC_ACTION_NONE, android.app.Notification.Action.SEMANTIC_ACTION_REPLY, android.app.Notification.Action.SEMANTIC_ACTION_MARK_AS_READ, android.app.Notification.Action.SEMANTIC_ACTION_MARK_AS_UNREAD, android.app.Notification.Action.SEMANTIC_ACTION_DELETE, android.app.Notification.Action.SEMANTIC_ACTION_ARCHIVE, android.app.Notification.Action.SEMANTIC_ACTION_MUTE, android.app.Notification.Action.SEMANTIC_ACTION_UNMUTE, android.app.Notification.Action.SEMANTIC_ACTION_THUMBS_UP, android.app.Notification.Action.SEMANTIC_ACTION_THUMBS_DOWN, android.app.Notification.Action.SEMANTIC_ACTION_CALL}"></val>
        </annotation>
    </item>
    <item name="android.app.Notification.Builder android.app.Notification.Builder setFlag(int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Notification.FLAG_SHOW_LIGHTS, android.app.Notification.FLAG_ONGOING_EVENT, android.app.Notification.FLAG_INSISTENT, android.app.Notification.FLAG_ONLY_ALERT_ONCE, android.app.Notification.FLAG_AUTO_CANCEL, android.app.Notification.FLAG_NO_CLEAR, android.app.Notification.FLAG_FOREGROUND_SERVICE, android.app.Notification.FLAG_HIGH_PRIORITY, android.app.Notification.FLAG_LOCAL_ONLY, android.app.Notification.FLAG_GROUP_SUMMARY, android.app.Notification.FLAG_BUBBLE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.Notification.Builder android.app.Notification.Builder setForegroundServiceBehavior(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Notification.FOREGROUND_SERVICE_DEFAULT, android.app.Notification.FOREGROUND_SERVICE_IMMEDIATE, android.app.Notification.FOREGROUND_SERVICE_DEFERRED}"></val>
        </annotation>
    </item>
    <item name="android.app.Notification.Builder android.app.Notification.Builder setGroupAlertBehavior(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Notification.GROUP_ALERT_ALL, android.app.Notification.GROUP_ALERT_CHILDREN, android.app.Notification.GROUP_ALERT_SUMMARY}"></val>
        </annotation>
    </item>
    <item name="android.app.Notification.Builder android.app.Notification.Builder setPriority(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Notification.PRIORITY_DEFAULT, android.app.Notification.PRIORITY_LOW, android.app.Notification.PRIORITY_MIN, android.app.Notification.PRIORITY_HIGH, android.app.Notification.PRIORITY_MAX}"></val>
        </annotation>
    </item>
    <item name="android.app.Notification.Builder android.app.Notification.Builder setVisibility(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Notification.VISIBILITY_PUBLIC, android.app.Notification.VISIBILITY_PRIVATE, android.app.Notification.VISIBILITY_SECRET}"></val>
        </annotation>
    </item>
    <item name="android.app.NotificationChannel NotificationChannel(java.lang.String, java.lang.CharSequence, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.NotificationManager.IMPORTANCE_UNSPECIFIED, android.app.NotificationManager.IMPORTANCE_NONE, android.app.NotificationManager.IMPORTANCE_MIN, android.app.NotificationManager.IMPORTANCE_LOW, android.app.NotificationManager.IMPORTANCE_DEFAULT, android.app.NotificationManager.IMPORTANCE_HIGH}"></val>
        </annotation>
    </item>
    <item name="android.app.NotificationChannel void setImportance(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.NotificationManager.IMPORTANCE_UNSPECIFIED, android.app.NotificationManager.IMPORTANCE_NONE, android.app.NotificationManager.IMPORTANCE_MIN, android.app.NotificationManager.IMPORTANCE_LOW, android.app.NotificationManager.IMPORTANCE_DEFAULT, android.app.NotificationManager.IMPORTANCE_HIGH}"></val>
        </annotation>
    </item>
    <item name="android.app.NotificationManager void setInterruptionFilter(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.NotificationManager.INTERRUPTION_FILTER_NONE, android.app.NotificationManager.INTERRUPTION_FILTER_PRIORITY, android.app.NotificationManager.INTERRUPTION_FILTER_ALARMS, android.app.NotificationManager.INTERRUPTION_FILTER_ALL, android.app.NotificationManager.INTERRUPTION_FILTER_UNKNOWN}"></val>
        </annotation>
    </item>
    <item name="android.app.NotificationManager.Policy Policy(int, int, int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.NotificationManager.Policy.PRIORITY_SENDERS_ANY, android.app.NotificationManager.Policy.PRIORITY_SENDERS_CONTACTS, android.app.NotificationManager.Policy.PRIORITY_SENDERS_STARRED}"></val>
        </annotation>
    </item>
    <item name="android.app.NotificationManager.Policy Policy(int, int, int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.NotificationManager.Policy.PRIORITY_SENDERS_ANY, android.app.NotificationManager.Policy.PRIORITY_SENDERS_CONTACTS, android.app.NotificationManager.Policy.PRIORITY_SENDERS_STARRED}"></val>
        </annotation>
    </item>
    <item name="android.app.NotificationManager.Policy Policy(int, int, int, int, int) 4">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.NotificationManager.Policy.CONVERSATION_SENDERS_ANYONE, android.app.NotificationManager.Policy.CONVERSATION_SENDERS_IMPORTANT, android.app.NotificationManager.Policy.CONVERSATION_SENDERS_NONE}"></val>
        </annotation>
    </item>
    <item name="android.app.PendingIntent android.app.PendingIntent getActivities(android.content.Context, int, android.content.Intent[], int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.PendingIntent.FLAG_ONE_SHOT, android.app.PendingIntent.FLAG_NO_CREATE, android.app.PendingIntent.FLAG_CANCEL_CURRENT, android.app.PendingIntent.FLAG_UPDATE_CURRENT, android.app.PendingIntent.FLAG_IMMUTABLE, android.app.PendingIntent.FLAG_MUTABLE, android.app.PendingIntent.FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT, android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.PendingIntent android.app.PendingIntent getActivities(android.content.Context, int, android.content.Intent[], int, android.os.Bundle) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.PendingIntent.FLAG_ONE_SHOT, android.app.PendingIntent.FLAG_NO_CREATE, android.app.PendingIntent.FLAG_CANCEL_CURRENT, android.app.PendingIntent.FLAG_UPDATE_CURRENT, android.app.PendingIntent.FLAG_IMMUTABLE, android.app.PendingIntent.FLAG_MUTABLE, android.app.PendingIntent.FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT, android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.PendingIntent android.app.PendingIntent getActivity(android.content.Context, int, android.content.Intent, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.PendingIntent.FLAG_ONE_SHOT, android.app.PendingIntent.FLAG_NO_CREATE, android.app.PendingIntent.FLAG_CANCEL_CURRENT, android.app.PendingIntent.FLAG_UPDATE_CURRENT, android.app.PendingIntent.FLAG_IMMUTABLE, android.app.PendingIntent.FLAG_MUTABLE, android.app.PendingIntent.FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT, android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.PendingIntent android.app.PendingIntent getActivity(android.content.Context, int, android.content.Intent, int, android.os.Bundle) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.PendingIntent.FLAG_ONE_SHOT, android.app.PendingIntent.FLAG_NO_CREATE, android.app.PendingIntent.FLAG_CANCEL_CURRENT, android.app.PendingIntent.FLAG_UPDATE_CURRENT, android.app.PendingIntent.FLAG_IMMUTABLE, android.app.PendingIntent.FLAG_MUTABLE, android.app.PendingIntent.FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT, android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.PendingIntent android.app.PendingIntent getBroadcast(android.content.Context, int, android.content.Intent, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.PendingIntent.FLAG_ONE_SHOT, android.app.PendingIntent.FLAG_NO_CREATE, android.app.PendingIntent.FLAG_CANCEL_CURRENT, android.app.PendingIntent.FLAG_UPDATE_CURRENT, android.app.PendingIntent.FLAG_IMMUTABLE, android.app.PendingIntent.FLAG_MUTABLE, android.app.PendingIntent.FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT, android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.PendingIntent android.app.PendingIntent getForegroundService(android.content.Context, int, android.content.Intent, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.PendingIntent.FLAG_ONE_SHOT, android.app.PendingIntent.FLAG_NO_CREATE, android.app.PendingIntent.FLAG_CANCEL_CURRENT, android.app.PendingIntent.FLAG_UPDATE_CURRENT, android.app.PendingIntent.FLAG_IMMUTABLE, android.app.PendingIntent.FLAG_MUTABLE, android.app.PendingIntent.FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT, android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.PendingIntent android.app.PendingIntent getService(android.content.Context, int, android.content.Intent, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.PendingIntent.FLAG_ONE_SHOT, android.app.PendingIntent.FLAG_NO_CREATE, android.app.PendingIntent.FLAG_CANCEL_CURRENT, android.app.PendingIntent.FLAG_UPDATE_CURRENT, android.app.PendingIntent.FLAG_IMMUTABLE, android.app.PendingIntent.FLAG_MUTABLE, android.app.PendingIntent.FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT, android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.Person void writeToParcel(android.os.Parcel, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.RemoteInput void setResultsSource(android.content.Intent, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.RemoteInput.SOURCE_FREE_FORM_INPUT, android.app.RemoteInput.SOURCE_CHOICE}"></val>
        </annotation>
    </item>
    <item name="android.app.RemoteInput.Builder android.app.RemoteInput.Builder setEditChoicesBeforeSending(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.RemoteInput.EDIT_CHOICES_BEFORE_SENDING_AUTO, android.app.RemoteInput.EDIT_CHOICES_BEFORE_SENDING_DISABLED, android.app.RemoteInput.EDIT_CHOICES_BEFORE_SENDING_ENABLED}"></val>
        </annotation>
    </item>
    <item name="android.app.Service int onStartCommand(android.content.Intent, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Service.START_FLAG_REDELIVERY, android.app.Service.START_FLAG_RETRY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.Service void onTimeout(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MANIFEST, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_NONE, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_DATA_SYNC, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_PHONE_CALL, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_LOCATION, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_CONNECTED_DEVICE, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_CAMERA, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MICROPHONE, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_HEALTH, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_REMOTE_MESSAGING, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_SYSTEM_EXEMPTED, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_SHORT_SERVICE, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PROCESSING, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_SPECIAL_USE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.Service void startForeground(int, android.app.Notification, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MANIFEST, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_NONE, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_DATA_SYNC, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_PHONE_CALL, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_LOCATION, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_CONNECTED_DEVICE, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_CAMERA, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MICROPHONE, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_HEALTH, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_REMOTE_MESSAGING, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_SYSTEM_EXEMPTED, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_SHORT_SERVICE, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PROCESSING, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_SPECIAL_USE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.Service void stopForeground(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.Service.STOP_FOREGROUND_LEGACY, android.app.Service.STOP_FOREGROUND_REMOVE, android.app.Service.STOP_FOREGROUND_DETACH}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.app.TaskStackBuilder android.app.PendingIntent getPendingIntent(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.PendingIntent.FLAG_ONE_SHOT, android.app.PendingIntent.FLAG_NO_CREATE, android.app.PendingIntent.FLAG_CANCEL_CURRENT, android.app.PendingIntent.FLAG_UPDATE_CURRENT, android.app.PendingIntent.FLAG_IMMUTABLE, android.app.PendingIntent.FLAG_MUTABLE, android.app.PendingIntent.FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT, android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.TaskStackBuilder android.app.PendingIntent getPendingIntent(int, int, android.os.Bundle) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.PendingIntent.FLAG_ONE_SHOT, android.app.PendingIntent.FLAG_NO_CREATE, android.app.PendingIntent.FLAG_CANCEL_CURRENT, android.app.PendingIntent.FLAG_UPDATE_CURRENT, android.app.PendingIntent.FLAG_IMMUTABLE, android.app.PendingIntent.FLAG_MUTABLE, android.app.PendingIntent.FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT, android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.UiModeManager void disableCarMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.UiModeManager.DISABLE_CAR_MODE_GO_HOME}"></val>
        </annotation>
    </item>
    <item name="android.app.UiModeManager void setApplicationNightMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.UiModeManager.MODE_NIGHT_AUTO, android.app.UiModeManager.MODE_NIGHT_CUSTOM, android.app.UiModeManager.MODE_NIGHT_NO, android.app.UiModeManager.MODE_NIGHT_YES}"></val>
        </annotation>
    </item>
    <item name="android.app.UiModeManager void setNightMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.UiModeManager.MODE_NIGHT_AUTO, android.app.UiModeManager.MODE_NIGHT_CUSTOM, android.app.UiModeManager.MODE_NIGHT_NO, android.app.UiModeManager.MODE_NIGHT_YES}"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperColors WallpaperColors(android.graphics.Color, android.graphics.Color, android.graphics.Color, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperColors.HINT_SUPPORTS_DARK_TEXT, android.app.WallpaperColors.HINT_SUPPORTS_DARK_THEME}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager android.app.WallpaperInfo getWallpaperInfo(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager android.graphics.drawable.Drawable getBuiltInDrawable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager android.graphics.drawable.Drawable getBuiltInDrawable(int, int, boolean, float, float, int) 5">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager android.graphics.drawable.Drawable getDrawable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager android.graphics.drawable.Drawable getFastDrawable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager android.graphics.drawable.Drawable peekDrawable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager android.graphics.drawable.Drawable peekFastDrawable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager android.os.ParcelFileDescriptor getWallpaperFile(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager int getWallpaperId(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager int setBitmap(android.graphics.Bitmap, android.graphics.Rect, boolean, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager int setResource(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager int setStream(java.io.InputStream, android.graphics.Rect, boolean, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.WallpaperManager void clear(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DeviceAdminReceiver void onBugreportFailed(android.content.Context, android.content.Intent, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DeviceAdminReceiver.BUGREPORT_FAILURE_FAILED_COMPLETING, android.app.admin.DeviceAdminReceiver.BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DeviceAdminReceiver void onOperationSafetyStateChanged(android.content.Context, int, boolean) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.OPERATION_SAFETY_REASON_DRIVING_DISTRACTION}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyIdentifiers java.lang.String getIdentifierForUserRestriction(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.os.UserManager.ALLOW_PARENT_PROFILE_APP_LINKING, android.os.UserManager.DISALLOW_ADD_MANAGED_PROFILE, android.os.UserManager.DISALLOW_ADD_PRIVATE_PROFILE, android.os.UserManager.DISALLOW_ADD_USER, android.os.UserManager.DISALLOW_ADD_WIFI_CONFIG, android.os.UserManager.DISALLOW_ADJUST_VOLUME, android.os.UserManager.DISALLOW_AIRPLANE_MODE, android.os.UserManager.DISALLOW_AMBIENT_DISPLAY, android.os.UserManager.DISALLOW_APPS_CONTROL, android.os.UserManager.DISALLOW_ASSIST_CONTENT, android.os.UserManager.DISALLOW_AUTOFILL, android.os.UserManager.DISALLOW_BLUETOOTH, android.os.UserManager.DISALLOW_BLUETOOTH_SHARING, android.os.UserManager.DISALLOW_CAMERA_TOGGLE, android.os.UserManager.DISALLOW_CELLULAR_2G, android.os.UserManager.DISALLOW_CHANGE_WIFI_STATE, android.os.UserManager.DISALLOW_CONFIG_BLUETOOTH, android.os.UserManager.DISALLOW_CONFIG_BRIGHTNESS, android.os.UserManager.DISALLOW_CONFIG_CELL_BROADCASTS, android.os.UserManager.DISALLOW_CONFIG_CREDENTIALS, android.os.UserManager.DISALLOW_CONFIG_DATE_TIME, android.os.UserManager.DISALLOW_CONFIG_DEFAULT_APPS, android.os.UserManager.DISALLOW_CONFIG_LOCALE, android.os.UserManager.DISALLOW_CONFIG_LOCATION, android.os.UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS, android.os.UserManager.DISALLOW_CONFIG_PRIVATE_DNS, android.os.UserManager.DISALLOW_CONFIG_SCREEN_TIMEOUT, android.os.UserManager.DISALLOW_CONFIG_TETHERING, android.os.UserManager.DISALLOW_CONFIG_VPN, android.os.UserManager.DISALLOW_CONFIG_WIFI, android.os.UserManager.DISALLOW_CONTENT_CAPTURE, android.os.UserManager.DISALLOW_CONTENT_SUGGESTIONS, android.os.UserManager.DISALLOW_CREATE_WINDOWS, android.os.UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE, android.os.UserManager.DISALLOW_DATA_ROAMING, android.os.UserManager.DISALLOW_DEBUGGING_FEATURES, android.os.UserManager.DISALLOW_FACTORY_RESET, android.os.UserManager.DISALLOW_FUN, android.os.UserManager.DISALLOW_GRANT_ADMIN, android.os.UserManager.DISALLOW_INSTALL_APPS, android.os.UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES, android.os.UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY, android.os.UserManager.DISALLOW_MICROPHONE_TOGGLE, android.os.UserManager.DISALLOW_MODIFY_ACCOUNTS, android.os.UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA, android.os.UserManager.DISALLOW_NEAR_FIELD_COMMUNICATION_RADIO, android.os.UserManager.DISALLOW_NETWORK_RESET, android.os.UserManager.DISALLOW_OUTGOING_BEAM, android.os.UserManager.DISALLOW_OUTGOING_CALLS, android.os.UserManager.DISALLOW_PRINTING, android.os.UserManager.DISALLOW_REMOVE_MANAGED_PROFILE, android.os.UserManager.DISALLOW_REMOVE_USER, android.os.UserManager.DISALLOW_SAFE_BOOT, android.os.UserManager.DISALLOW_SET_USER_ICON, android.os.UserManager.DISALLOW_SET_WALLPAPER, android.os.UserManager.DISALLOW_SHARE_INTO_MANAGED_PROFILE, android.os.UserManager.DISALLOW_SHARE_LOCATION, android.os.UserManager.DISALLOW_SHARING_ADMIN_CONFIGURED_WIFI, android.os.UserManager.DISALLOW_SIM_GLOBALLY, android.os.UserManager.DISALLOW_SMS, android.os.UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS, android.os.UserManager.DISALLOW_ULTRA_WIDEBAND_RADIO, android.os.UserManager.DISALLOW_UNIFIED_PASSWORD, android.os.UserManager.DISALLOW_UNINSTALL_APPS, android.os.UserManager.DISALLOW_UNMUTE_MICROPHONE, android.os.UserManager.DISALLOW_USB_FILE_TRANSFER, android.os.UserManager.DISALLOW_USER_SWITCH, android.os.UserManager.DISALLOW_WIFI_DIRECT, android.os.UserManager.DISALLOW_WIFI_TETHERING, android.os.UserManager.ENSURE_VERIFY_APPS, android.os.UserManager.KEY_RESTRICTIONS_PENDING}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager android.os.UserHandle createAndManageUser(android.content.ComponentName, java.lang.String, android.content.ComponentName, android.os.PersistableBundle, int) 4">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.SKIP_SETUP_WIZARD, android.app.admin.DevicePolicyManager.MAKE_USER_EPHEMERAL, android.app.admin.DevicePolicyManager.LEAVE_ALL_SYSTEM_APPS_ENABLED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager android.security.AttestedKeyPair generateKeyPair(android.content.ComponentName, java.lang.String, android.security.keystore.KeyGenParameterSpec, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.ID_TYPE_BASE_INFO, android.app.admin.DevicePolicyManager.ID_TYPE_SERIAL, android.app.admin.DevicePolicyManager.ID_TYPE_IMEI, android.app.admin.DevicePolicyManager.ID_TYPE_MEID, android.app.admin.DevicePolicyManager.ID_TYPE_INDIVIDUAL_ATTESTATION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager boolean bindDeviceAdminServiceAsUser(android.content.ComponentName, android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Context.BIND_AUTO_CREATE, android.content.Context.BIND_DEBUG_UNBIND, android.content.Context.BIND_NOT_FOREGROUND, android.content.Context.BIND_ABOVE_CLIENT, android.content.Context.BIND_ALLOW_OOM_MANAGEMENT, android.content.Context.BIND_WAIVE_PRIORITY, android.content.Context.BIND_IMPORTANT, android.content.Context.BIND_ADJUST_WITH_ACTIVITY, android.content.Context.BIND_NOT_PERCEPTIBLE, android.content.Context.BIND_ALLOW_ACTIVITY_STARTS, android.content.Context.BIND_INCLUDE_CAPABILITIES, android.content.Context.BIND_SHARED_ISOLATED_PROCESS, android.content.Context.BIND_PACKAGE_ISOLATED_PROCESS, android.content.Context.BIND_EXTERNAL_SERVICE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager boolean isSafeOperation(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.OPERATION_SAFETY_REASON_DRIVING_DISTRACTION}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager boolean setPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.PERMISSION_GRANT_STATE_DEFAULT, android.app.admin.DevicePolicyManager.PERMISSION_GRANT_STATE_GRANTED, android.app.admin.DevicePolicyManager.PERMISSION_GRANT_STATE_DENIED}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager void addUserRestriction(android.content.ComponentName, java.lang.String) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.os.UserManager.ALLOW_PARENT_PROFILE_APP_LINKING, android.os.UserManager.DISALLOW_ADD_MANAGED_PROFILE, android.os.UserManager.DISALLOW_ADD_PRIVATE_PROFILE, android.os.UserManager.DISALLOW_ADD_USER, android.os.UserManager.DISALLOW_ADD_WIFI_CONFIG, android.os.UserManager.DISALLOW_ADJUST_VOLUME, android.os.UserManager.DISALLOW_AIRPLANE_MODE, android.os.UserManager.DISALLOW_AMBIENT_DISPLAY, android.os.UserManager.DISALLOW_APPS_CONTROL, android.os.UserManager.DISALLOW_ASSIST_CONTENT, android.os.UserManager.DISALLOW_AUTOFILL, android.os.UserManager.DISALLOW_BLUETOOTH, android.os.UserManager.DISALLOW_BLUETOOTH_SHARING, android.os.UserManager.DISALLOW_CAMERA_TOGGLE, android.os.UserManager.DISALLOW_CELLULAR_2G, android.os.UserManager.DISALLOW_CHANGE_WIFI_STATE, android.os.UserManager.DISALLOW_CONFIG_BLUETOOTH, android.os.UserManager.DISALLOW_CONFIG_BRIGHTNESS, android.os.UserManager.DISALLOW_CONFIG_CELL_BROADCASTS, android.os.UserManager.DISALLOW_CONFIG_CREDENTIALS, android.os.UserManager.DISALLOW_CONFIG_DATE_TIME, android.os.UserManager.DISALLOW_CONFIG_DEFAULT_APPS, android.os.UserManager.DISALLOW_CONFIG_LOCALE, android.os.UserManager.DISALLOW_CONFIG_LOCATION, android.os.UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS, android.os.UserManager.DISALLOW_CONFIG_PRIVATE_DNS, android.os.UserManager.DISALLOW_CONFIG_SCREEN_TIMEOUT, android.os.UserManager.DISALLOW_CONFIG_TETHERING, android.os.UserManager.DISALLOW_CONFIG_VPN, android.os.UserManager.DISALLOW_CONFIG_WIFI, android.os.UserManager.DISALLOW_CONTENT_CAPTURE, android.os.UserManager.DISALLOW_CONTENT_SUGGESTIONS, android.os.UserManager.DISALLOW_CREATE_WINDOWS, android.os.UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE, android.os.UserManager.DISALLOW_DATA_ROAMING, android.os.UserManager.DISALLOW_DEBUGGING_FEATURES, android.os.UserManager.DISALLOW_FACTORY_RESET, android.os.UserManager.DISALLOW_FUN, android.os.UserManager.DISALLOW_GRANT_ADMIN, android.os.UserManager.DISALLOW_INSTALL_APPS, android.os.UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES, android.os.UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY, android.os.UserManager.DISALLOW_MICROPHONE_TOGGLE, android.os.UserManager.DISALLOW_MODIFY_ACCOUNTS, android.os.UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA, android.os.UserManager.DISALLOW_NEAR_FIELD_COMMUNICATION_RADIO, android.os.UserManager.DISALLOW_NETWORK_RESET, android.os.UserManager.DISALLOW_OUTGOING_BEAM, android.os.UserManager.DISALLOW_OUTGOING_CALLS, android.os.UserManager.DISALLOW_PRINTING, android.os.UserManager.DISALLOW_REMOVE_MANAGED_PROFILE, android.os.UserManager.DISALLOW_REMOVE_USER, android.os.UserManager.DISALLOW_SAFE_BOOT, android.os.UserManager.DISALLOW_SET_USER_ICON, android.os.UserManager.DISALLOW_SET_WALLPAPER, android.os.UserManager.DISALLOW_SHARE_INTO_MANAGED_PROFILE, android.os.UserManager.DISALLOW_SHARE_LOCATION, android.os.UserManager.DISALLOW_SHARING_ADMIN_CONFIGURED_WIFI, android.os.UserManager.DISALLOW_SIM_GLOBALLY, android.os.UserManager.DISALLOW_SMS, android.os.UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS, android.os.UserManager.DISALLOW_ULTRA_WIDEBAND_RADIO, android.os.UserManager.DISALLOW_UNIFIED_PASSWORD, android.os.UserManager.DISALLOW_UNINSTALL_APPS, android.os.UserManager.DISALLOW_UNMUTE_MICROPHONE, android.os.UserManager.DISALLOW_USB_FILE_TRANSFER, android.os.UserManager.DISALLOW_USER_SWITCH, android.os.UserManager.DISALLOW_WIFI_DIRECT, android.os.UserManager.DISALLOW_WIFI_TETHERING, android.os.UserManager.ENSURE_VERIFY_APPS, android.os.UserManager.KEY_RESTRICTIONS_PENDING}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager void addUserRestrictionGlobally(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.os.UserManager.ALLOW_PARENT_PROFILE_APP_LINKING, android.os.UserManager.DISALLOW_ADD_MANAGED_PROFILE, android.os.UserManager.DISALLOW_ADD_PRIVATE_PROFILE, android.os.UserManager.DISALLOW_ADD_USER, android.os.UserManager.DISALLOW_ADD_WIFI_CONFIG, android.os.UserManager.DISALLOW_ADJUST_VOLUME, android.os.UserManager.DISALLOW_AIRPLANE_MODE, android.os.UserManager.DISALLOW_AMBIENT_DISPLAY, android.os.UserManager.DISALLOW_APPS_CONTROL, android.os.UserManager.DISALLOW_ASSIST_CONTENT, android.os.UserManager.DISALLOW_AUTOFILL, android.os.UserManager.DISALLOW_BLUETOOTH, android.os.UserManager.DISALLOW_BLUETOOTH_SHARING, android.os.UserManager.DISALLOW_CAMERA_TOGGLE, android.os.UserManager.DISALLOW_CELLULAR_2G, android.os.UserManager.DISALLOW_CHANGE_WIFI_STATE, android.os.UserManager.DISALLOW_CONFIG_BLUETOOTH, android.os.UserManager.DISALLOW_CONFIG_BRIGHTNESS, android.os.UserManager.DISALLOW_CONFIG_CELL_BROADCASTS, android.os.UserManager.DISALLOW_CONFIG_CREDENTIALS, android.os.UserManager.DISALLOW_CONFIG_DATE_TIME, android.os.UserManager.DISALLOW_CONFIG_DEFAULT_APPS, android.os.UserManager.DISALLOW_CONFIG_LOCALE, android.os.UserManager.DISALLOW_CONFIG_LOCATION, android.os.UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS, android.os.UserManager.DISALLOW_CONFIG_PRIVATE_DNS, android.os.UserManager.DISALLOW_CONFIG_SCREEN_TIMEOUT, android.os.UserManager.DISALLOW_CONFIG_TETHERING, android.os.UserManager.DISALLOW_CONFIG_VPN, android.os.UserManager.DISALLOW_CONFIG_WIFI, android.os.UserManager.DISALLOW_CONTENT_CAPTURE, android.os.UserManager.DISALLOW_CONTENT_SUGGESTIONS, android.os.UserManager.DISALLOW_CREATE_WINDOWS, android.os.UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE, android.os.UserManager.DISALLOW_DATA_ROAMING, android.os.UserManager.DISALLOW_DEBUGGING_FEATURES, android.os.UserManager.DISALLOW_FACTORY_RESET, android.os.UserManager.DISALLOW_FUN, android.os.UserManager.DISALLOW_GRANT_ADMIN, android.os.UserManager.DISALLOW_INSTALL_APPS, android.os.UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES, android.os.UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY, android.os.UserManager.DISALLOW_MICROPHONE_TOGGLE, android.os.UserManager.DISALLOW_MODIFY_ACCOUNTS, android.os.UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA, android.os.UserManager.DISALLOW_NEAR_FIELD_COMMUNICATION_RADIO, android.os.UserManager.DISALLOW_NETWORK_RESET, android.os.UserManager.DISALLOW_OUTGOING_BEAM, android.os.UserManager.DISALLOW_OUTGOING_CALLS, android.os.UserManager.DISALLOW_PRINTING, android.os.UserManager.DISALLOW_REMOVE_MANAGED_PROFILE, android.os.UserManager.DISALLOW_REMOVE_USER, android.os.UserManager.DISALLOW_SAFE_BOOT, android.os.UserManager.DISALLOW_SET_USER_ICON, android.os.UserManager.DISALLOW_SET_WALLPAPER, android.os.UserManager.DISALLOW_SHARE_INTO_MANAGED_PROFILE, android.os.UserManager.DISALLOW_SHARE_LOCATION, android.os.UserManager.DISALLOW_SHARING_ADMIN_CONFIGURED_WIFI, android.os.UserManager.DISALLOW_SIM_GLOBALLY, android.os.UserManager.DISALLOW_SMS, android.os.UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS, android.os.UserManager.DISALLOW_ULTRA_WIDEBAND_RADIO, android.os.UserManager.DISALLOW_UNIFIED_PASSWORD, android.os.UserManager.DISALLOW_UNINSTALL_APPS, android.os.UserManager.DISALLOW_UNMUTE_MICROPHONE, android.os.UserManager.DISALLOW_USB_FILE_TRANSFER, android.os.UserManager.DISALLOW_USER_SWITCH, android.os.UserManager.DISALLOW_WIFI_DIRECT, android.os.UserManager.DISALLOW_WIFI_TETHERING, android.os.UserManager.ENSURE_VERIFY_APPS, android.os.UserManager.KEY_RESTRICTIONS_PENDING}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager void clearUserRestriction(android.content.ComponentName, java.lang.String) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.os.UserManager.ALLOW_PARENT_PROFILE_APP_LINKING, android.os.UserManager.DISALLOW_ADD_MANAGED_PROFILE, android.os.UserManager.DISALLOW_ADD_PRIVATE_PROFILE, android.os.UserManager.DISALLOW_ADD_USER, android.os.UserManager.DISALLOW_ADD_WIFI_CONFIG, android.os.UserManager.DISALLOW_ADJUST_VOLUME, android.os.UserManager.DISALLOW_AIRPLANE_MODE, android.os.UserManager.DISALLOW_AMBIENT_DISPLAY, android.os.UserManager.DISALLOW_APPS_CONTROL, android.os.UserManager.DISALLOW_ASSIST_CONTENT, android.os.UserManager.DISALLOW_AUTOFILL, android.os.UserManager.DISALLOW_BLUETOOTH, android.os.UserManager.DISALLOW_BLUETOOTH_SHARING, android.os.UserManager.DISALLOW_CAMERA_TOGGLE, android.os.UserManager.DISALLOW_CELLULAR_2G, android.os.UserManager.DISALLOW_CHANGE_WIFI_STATE, android.os.UserManager.DISALLOW_CONFIG_BLUETOOTH, android.os.UserManager.DISALLOW_CONFIG_BRIGHTNESS, android.os.UserManager.DISALLOW_CONFIG_CELL_BROADCASTS, android.os.UserManager.DISALLOW_CONFIG_CREDENTIALS, android.os.UserManager.DISALLOW_CONFIG_DATE_TIME, android.os.UserManager.DISALLOW_CONFIG_DEFAULT_APPS, android.os.UserManager.DISALLOW_CONFIG_LOCALE, android.os.UserManager.DISALLOW_CONFIG_LOCATION, android.os.UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS, android.os.UserManager.DISALLOW_CONFIG_PRIVATE_DNS, android.os.UserManager.DISALLOW_CONFIG_SCREEN_TIMEOUT, android.os.UserManager.DISALLOW_CONFIG_TETHERING, android.os.UserManager.DISALLOW_CONFIG_VPN, android.os.UserManager.DISALLOW_CONFIG_WIFI, android.os.UserManager.DISALLOW_CONTENT_CAPTURE, android.os.UserManager.DISALLOW_CONTENT_SUGGESTIONS, android.os.UserManager.DISALLOW_CREATE_WINDOWS, android.os.UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE, android.os.UserManager.DISALLOW_DATA_ROAMING, android.os.UserManager.DISALLOW_DEBUGGING_FEATURES, android.os.UserManager.DISALLOW_FACTORY_RESET, android.os.UserManager.DISALLOW_FUN, android.os.UserManager.DISALLOW_GRANT_ADMIN, android.os.UserManager.DISALLOW_INSTALL_APPS, android.os.UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES, android.os.UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY, android.os.UserManager.DISALLOW_MICROPHONE_TOGGLE, android.os.UserManager.DISALLOW_MODIFY_ACCOUNTS, android.os.UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA, android.os.UserManager.DISALLOW_NEAR_FIELD_COMMUNICATION_RADIO, android.os.UserManager.DISALLOW_NETWORK_RESET, android.os.UserManager.DISALLOW_OUTGOING_BEAM, android.os.UserManager.DISALLOW_OUTGOING_CALLS, android.os.UserManager.DISALLOW_PRINTING, android.os.UserManager.DISALLOW_REMOVE_MANAGED_PROFILE, android.os.UserManager.DISALLOW_REMOVE_USER, android.os.UserManager.DISALLOW_SAFE_BOOT, android.os.UserManager.DISALLOW_SET_USER_ICON, android.os.UserManager.DISALLOW_SET_WALLPAPER, android.os.UserManager.DISALLOW_SHARE_INTO_MANAGED_PROFILE, android.os.UserManager.DISALLOW_SHARE_LOCATION, android.os.UserManager.DISALLOW_SHARING_ADMIN_CONFIGURED_WIFI, android.os.UserManager.DISALLOW_SIM_GLOBALLY, android.os.UserManager.DISALLOW_SMS, android.os.UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS, android.os.UserManager.DISALLOW_ULTRA_WIDEBAND_RADIO, android.os.UserManager.DISALLOW_UNIFIED_PASSWORD, android.os.UserManager.DISALLOW_UNINSTALL_APPS, android.os.UserManager.DISALLOW_UNMUTE_MICROPHONE, android.os.UserManager.DISALLOW_USB_FILE_TRANSFER, android.os.UserManager.DISALLOW_USER_SWITCH, android.os.UserManager.DISALLOW_WIFI_DIRECT, android.os.UserManager.DISALLOW_WIFI_TETHERING, android.os.UserManager.ENSURE_VERIFY_APPS, android.os.UserManager.KEY_RESTRICTIONS_PENDING}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager void lockNow(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager void setContentProtectionPolicy(android.content.ComponentName, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.CONTENT_PROTECTION_NOT_CONTROLLED_BY_POLICY, android.app.admin.DevicePolicyManager.CONTENT_PROTECTION_DISABLED, android.app.admin.DevicePolicyManager.CONTENT_PROTECTION_ENABLED}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager void setLockTaskFeatures(android.content.ComponentName, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.LOCK_TASK_FEATURE_NONE, android.app.admin.DevicePolicyManager.LOCK_TASK_FEATURE_SYSTEM_INFO, android.app.admin.DevicePolicyManager.LOCK_TASK_FEATURE_NOTIFICATIONS, android.app.admin.DevicePolicyManager.LOCK_TASK_FEATURE_HOME, android.app.admin.DevicePolicyManager.LOCK_TASK_FEATURE_OVERVIEW, android.app.admin.DevicePolicyManager.LOCK_TASK_FEATURE_GLOBAL_ACTIONS, android.app.admin.DevicePolicyManager.LOCK_TASK_FEATURE_KEYGUARD, android.app.admin.DevicePolicyManager.LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager void setMinimumRequiredWifiSecurityLevel(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.WIFI_SECURITY_OPEN, android.app.admin.DevicePolicyManager.WIFI_SECURITY_PERSONAL, android.app.admin.DevicePolicyManager.WIFI_SECURITY_ENTERPRISE_EAP, android.app.admin.DevicePolicyManager.WIFI_SECURITY_ENTERPRISE_192}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager void setMtePolicy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.MTE_ENABLED, android.app.admin.DevicePolicyManager.MTE_DISABLED, android.app.admin.DevicePolicyManager.MTE_NOT_CONTROLLED_BY_POLICY}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager void setNearbyAppStreamingPolicy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.NEARBY_STREAMING_NOT_CONTROLLED_BY_POLICY, android.app.admin.DevicePolicyManager.NEARBY_STREAMING_DISABLED, android.app.admin.DevicePolicyManager.NEARBY_STREAMING_ENABLED, android.app.admin.DevicePolicyManager.NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLY}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager void setNearbyNotificationStreamingPolicy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.NEARBY_STREAMING_NOT_CONTROLLED_BY_POLICY, android.app.admin.DevicePolicyManager.NEARBY_STREAMING_DISABLED, android.app.admin.DevicePolicyManager.NEARBY_STREAMING_ENABLED, android.app.admin.DevicePolicyManager.NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLY}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager void setRequiredPasswordComplexity(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.PASSWORD_COMPLEXITY_NONE, android.app.admin.DevicePolicyManager.PASSWORD_COMPLEXITY_LOW, android.app.admin.DevicePolicyManager.PASSWORD_COMPLEXITY_MEDIUM, android.app.admin.DevicePolicyManager.PASSWORD_COMPLEXITY_HIGH}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager void setSystemSetting(android.content.ComponentName, java.lang.String, java.lang.String) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE, android.provider.Settings.System.SCREEN_BRIGHTNESS, android.provider.Settings.System.SCREEN_OFF_TIMEOUT}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback void onInstallUpdateError(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback.UPDATE_ERROR_UNKNOWN, android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback.UPDATE_ERROR_INCORRECT_OS_VERSION, android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback.UPDATE_ERROR_UPDATE_FILE_INVALID, android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback.UPDATE_ERROR_FILE_NOT_FOUND, android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback.UPDATE_ERROR_BATTERY_LOW}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.ManagedSubscriptionsPolicy ManagedSubscriptionsPolicy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.ManagedSubscriptionsPolicy.TYPE_ALL_PERSONAL_SUBSCRIPTIONS, android.app.admin.ManagedSubscriptionsPolicy.TYPE_ALL_MANAGED_SUBSCRIPTIONS}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.PackagePolicy PackagePolicy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.PackagePolicy.PACKAGE_POLICY_BLOCKLIST, android.app.admin.PackagePolicy.PACKAGE_POLICY_ALLOWLIST_AND_SYSTEM, android.app.admin.PackagePolicy.PACKAGE_POLICY_ALLOWLIST}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.PackagePolicy PackagePolicy(int, java.util.Set&lt;java.lang.String&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.PackagePolicy.PACKAGE_POLICY_BLOCKLIST, android.app.admin.PackagePolicy.PACKAGE_POLICY_ALLOWLIST_AND_SYSTEM, android.app.admin.PackagePolicy.PACKAGE_POLICY_ALLOWLIST}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.PolicyUpdateResult PolicyUpdateResult(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.PolicyUpdateResult.RESULT_FAILURE_UNKNOWN, android.app.admin.PolicyUpdateResult.RESULT_POLICY_SET, android.app.admin.PolicyUpdateResult.RESULT_FAILURE_CONFLICTING_ADMIN_POLICY, android.app.admin.PolicyUpdateResult.RESULT_POLICY_CLEARED, android.app.admin.PolicyUpdateResult.RESULT_FAILURE_STORAGE_LIMIT_REACHED, android.app.admin.PolicyUpdateResult.RESULT_FAILURE_HARDWARE_LIMITATION}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.PreferentialNetworkServiceConfig.Builder android.app.admin.PreferentialNetworkServiceConfig.Builder setNetworkId(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.PreferentialNetworkServiceConfig.PREFERENTIAL_NETWORK_ID_1, android.app.admin.PreferentialNetworkServiceConfig.PREFERENTIAL_NETWORK_ID_2, android.app.admin.PreferentialNetworkServiceConfig.PREFERENTIAL_NETWORK_ID_3, android.app.admin.PreferentialNetworkServiceConfig.PREFERENTIAL_NETWORK_ID_4, android.app.admin.PreferentialNetworkServiceConfig.PREFERENTIAL_NETWORK_ID_5}"></val>
        </annotation>
    </item>
    <item name="android.app.admin.WifiSsidPolicy WifiSsidPolicy(int, java.util.Set&lt;android.net.wifi.WifiSsid&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.admin.WifiSsidPolicy.WIFI_SSID_POLICY_TYPE_ALLOWLIST, android.app.admin.WifiSsidPolicy.WIFI_SSID_POLICY_TYPE_DENYLIST}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.AppSearchBatchResult.Builder android.app.appsearch.AppSearchBatchResult.Builder&lt;KeyType,ValueType&gt; setFailure(KeyType, int, java.lang.String) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchResult.RESULT_OK, android.app.appsearch.AppSearchResult.RESULT_UNKNOWN_ERROR, android.app.appsearch.AppSearchResult.RESULT_INTERNAL_ERROR, android.app.appsearch.AppSearchResult.RESULT_INVALID_ARGUMENT, android.app.appsearch.AppSearchResult.RESULT_IO_ERROR, android.app.appsearch.AppSearchResult.RESULT_OUT_OF_SPACE, android.app.appsearch.AppSearchResult.RESULT_NOT_FOUND, android.app.appsearch.AppSearchResult.RESULT_INVALID_SCHEMA, android.app.appsearch.AppSearchResult.RESULT_SECURITY_ERROR, android.app.appsearch.AppSearchResult.RESULT_DENIED, android.app.appsearch.AppSearchResult.RESULT_RATE_LIMITED}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.AppSearchResult android.app.appsearch.AppSearchResult&lt;ValueType&gt; newFailedResult(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchResult.RESULT_OK, android.app.appsearch.AppSearchResult.RESULT_UNKNOWN_ERROR, android.app.appsearch.AppSearchResult.RESULT_INTERNAL_ERROR, android.app.appsearch.AppSearchResult.RESULT_INVALID_ARGUMENT, android.app.appsearch.AppSearchResult.RESULT_IO_ERROR, android.app.appsearch.AppSearchResult.RESULT_OUT_OF_SPACE, android.app.appsearch.AppSearchResult.RESULT_NOT_FOUND, android.app.appsearch.AppSearchResult.RESULT_INVALID_SCHEMA, android.app.appsearch.AppSearchResult.RESULT_SECURITY_ERROR, android.app.appsearch.AppSearchResult.RESULT_DENIED, android.app.appsearch.AppSearchResult.RESULT_RATE_LIMITED}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.AppSearchSchema.BooleanPropertyConfig.Builder android.app.appsearch.AppSearchSchema.BooleanPropertyConfig.Builder setCardinality(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_REPEATED, android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_OPTIONAL, android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.AppSearchSchema.BytesPropertyConfig.Builder android.app.appsearch.AppSearchSchema.BytesPropertyConfig.Builder setCardinality(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_REPEATED, android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_OPTIONAL, android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.AppSearchSchema.DocumentPropertyConfig.Builder android.app.appsearch.AppSearchSchema.DocumentPropertyConfig.Builder setCardinality(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_REPEATED, android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_OPTIONAL, android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.AppSearchSchema.DoublePropertyConfig.Builder android.app.appsearch.AppSearchSchema.DoublePropertyConfig.Builder setCardinality(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_REPEATED, android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_OPTIONAL, android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.AppSearchSchema.LongPropertyConfig.Builder android.app.appsearch.AppSearchSchema.LongPropertyConfig.Builder setCardinality(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_REPEATED, android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_OPTIONAL, android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.AppSearchSchema.LongPropertyConfig.Builder android.app.appsearch.AppSearchSchema.LongPropertyConfig.Builder setIndexingType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchSchema.LongPropertyConfig.INDEXING_TYPE_NONE, android.app.appsearch.AppSearchSchema.LongPropertyConfig.INDEXING_TYPE_RANGE}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder setCardinality(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_REPEATED, android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_OPTIONAL, android.app.appsearch.AppSearchSchema.PropertyConfig.CARDINALITY_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder setIndexingType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchSchema.StringPropertyConfig.INDEXING_TYPE_NONE, android.app.appsearch.AppSearchSchema.StringPropertyConfig.INDEXING_TYPE_EXACT_TERMS, android.app.appsearch.AppSearchSchema.StringPropertyConfig.INDEXING_TYPE_PREFIXES}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder setJoinableValueType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchSchema.StringPropertyConfig.JOINABLE_VALUE_TYPE_NONE, android.app.appsearch.AppSearchSchema.StringPropertyConfig.JOINABLE_VALUE_TYPE_QUALIFIED_ID}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder setTokenizerType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchSchema.StringPropertyConfig.TOKENIZER_TYPE_NONE, android.app.appsearch.AppSearchSchema.StringPropertyConfig.TOKENIZER_TYPE_PLAIN, android.app.appsearch.AppSearchSchema.StringPropertyConfig.TOKENIZER_TYPE_VERBATIM, android.app.appsearch.AppSearchSchema.StringPropertyConfig.TOKENIZER_TYPE_RFC822}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.GetSchemaResponse.Builder android.app.appsearch.GetSchemaResponse.Builder setRequiredPermissionsForSchemaTypeVisibility(java.lang.String, java.util.Set&lt;java.util.Set&lt;java.lang.Integer&gt;&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.SetSchemaRequest.READ_SMS, android.app.appsearch.SetSchemaRequest.READ_CALENDAR, android.app.appsearch.SetSchemaRequest.READ_CONTACTS, android.app.appsearch.SetSchemaRequest.READ_EXTERNAL_STORAGE, android.app.appsearch.SetSchemaRequest.READ_HOME_APP_SEARCH_DATA, android.app.appsearch.SetSchemaRequest.READ_ASSISTANT_APP_SEARCH_DATA}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.JoinSpec.Builder android.app.appsearch.JoinSpec.Builder setAggregationScoringStrategy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.JoinSpec.AGGREGATION_SCORING_OUTER_RESULT_RANKING_SIGNAL, android.app.appsearch.JoinSpec.AGGREGATION_SCORING_RESULT_COUNT, android.app.appsearch.JoinSpec.AGGREGATION_SCORING_MIN_RANKING_SIGNAL, android.app.appsearch.JoinSpec.AGGREGATION_SCORING_AVG_RANKING_SIGNAL, android.app.appsearch.JoinSpec.AGGREGATION_SCORING_MAX_RANKING_SIGNAL, android.app.appsearch.JoinSpec.AGGREGATION_SCORING_SUM_RANKING_SIGNAL}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.SearchSpec.Builder android.app.appsearch.SearchSpec.Builder setOrder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.SearchSpec.ORDER_DESCENDING, android.app.appsearch.SearchSpec.ORDER_ASCENDING}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.SearchSpec.Builder android.app.appsearch.SearchSpec.Builder setRankingStrategy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.SearchSpec.RANKING_STRATEGY_NONE, android.app.appsearch.SearchSpec.RANKING_STRATEGY_DOCUMENT_SCORE, android.app.appsearch.SearchSpec.RANKING_STRATEGY_CREATION_TIMESTAMP, android.app.appsearch.SearchSpec.RANKING_STRATEGY_RELEVANCE_SCORE, android.app.appsearch.SearchSpec.RANKING_STRATEGY_USAGE_COUNT, android.app.appsearch.SearchSpec.RANKING_STRATEGY_USAGE_LAST_USED_TIMESTAMP, android.app.appsearch.SearchSpec.RANKING_STRATEGY_SYSTEM_USAGE_COUNT, android.app.appsearch.SearchSpec.RANKING_STRATEGY_SYSTEM_USAGE_LAST_USED_TIMESTAMP, android.app.appsearch.SearchSpec.RANKING_STRATEGY_JOIN_AGGREGATE_SCORE, android.app.appsearch.SearchSpec.RANKING_STRATEGY_ADVANCED_RANKING_EXPRESSION}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.SearchSpec.Builder android.app.appsearch.SearchSpec.Builder setResultGrouping(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.SearchSpec.GROUPING_TYPE_PER_PACKAGE, android.app.appsearch.SearchSpec.GROUPING_TYPE_PER_NAMESPACE, android.app.appsearch.SearchSpec.GROUPING_TYPE_PER_SCHEMA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.SearchSpec.Builder android.app.appsearch.SearchSpec.Builder setTermMatch(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.SearchSpec.TERM_MATCH_EXACT_ONLY, android.app.appsearch.SearchSpec.TERM_MATCH_PREFIX}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.SearchSuggestionSpec.Builder android.app.appsearch.SearchSuggestionSpec.Builder setRankingStrategy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.SearchSuggestionSpec.SUGGESTION_RANKING_STRATEGY_NONE, android.app.appsearch.SearchSuggestionSpec.SUGGESTION_RANKING_STRATEGY_DOCUMENT_COUNT, android.app.appsearch.SearchSuggestionSpec.SUGGESTION_RANKING_STRATEGY_TERM_FREQUENCY}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.SetSchemaRequest.Builder android.app.appsearch.SetSchemaRequest.Builder addRequiredPermissionsForSchemaTypeVisibility(java.lang.String, java.util.Set&lt;java.lang.Integer&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.SetSchemaRequest.READ_SMS, android.app.appsearch.SetSchemaRequest.READ_CALENDAR, android.app.appsearch.SetSchemaRequest.READ_CONTACTS, android.app.appsearch.SetSchemaRequest.READ_EXTERNAL_STORAGE, android.app.appsearch.SetSchemaRequest.READ_HOME_APP_SEARCH_DATA, android.app.appsearch.SetSchemaRequest.READ_ASSISTANT_APP_SEARCH_DATA}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.exceptions.AppSearchException AppSearchException(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchResult.RESULT_OK, android.app.appsearch.AppSearchResult.RESULT_UNKNOWN_ERROR, android.app.appsearch.AppSearchResult.RESULT_INTERNAL_ERROR, android.app.appsearch.AppSearchResult.RESULT_INVALID_ARGUMENT, android.app.appsearch.AppSearchResult.RESULT_IO_ERROR, android.app.appsearch.AppSearchResult.RESULT_OUT_OF_SPACE, android.app.appsearch.AppSearchResult.RESULT_NOT_FOUND, android.app.appsearch.AppSearchResult.RESULT_INVALID_SCHEMA, android.app.appsearch.AppSearchResult.RESULT_SECURITY_ERROR, android.app.appsearch.AppSearchResult.RESULT_DENIED, android.app.appsearch.AppSearchResult.RESULT_RATE_LIMITED}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.exceptions.AppSearchException AppSearchException(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchResult.RESULT_OK, android.app.appsearch.AppSearchResult.RESULT_UNKNOWN_ERROR, android.app.appsearch.AppSearchResult.RESULT_INTERNAL_ERROR, android.app.appsearch.AppSearchResult.RESULT_INVALID_ARGUMENT, android.app.appsearch.AppSearchResult.RESULT_IO_ERROR, android.app.appsearch.AppSearchResult.RESULT_OUT_OF_SPACE, android.app.appsearch.AppSearchResult.RESULT_NOT_FOUND, android.app.appsearch.AppSearchResult.RESULT_INVALID_SCHEMA, android.app.appsearch.AppSearchResult.RESULT_SECURITY_ERROR, android.app.appsearch.AppSearchResult.RESULT_DENIED, android.app.appsearch.AppSearchResult.RESULT_RATE_LIMITED}"></val>
        </annotation>
    </item>
    <item name="android.app.appsearch.exceptions.AppSearchException AppSearchException(int, java.lang.String, java.lang.Throwable) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.appsearch.AppSearchResult.RESULT_OK, android.app.appsearch.AppSearchResult.RESULT_UNKNOWN_ERROR, android.app.appsearch.AppSearchResult.RESULT_INTERNAL_ERROR, android.app.appsearch.AppSearchResult.RESULT_INVALID_ARGUMENT, android.app.appsearch.AppSearchResult.RESULT_IO_ERROR, android.app.appsearch.AppSearchResult.RESULT_OUT_OF_SPACE, android.app.appsearch.AppSearchResult.RESULT_NOT_FOUND, android.app.appsearch.AppSearchResult.RESULT_INVALID_SCHEMA, android.app.appsearch.AppSearchResult.RESULT_SECURITY_ERROR, android.app.appsearch.AppSearchResult.RESULT_DENIED, android.app.appsearch.AppSearchResult.RESULT_RATE_LIMITED}"></val>
        </annotation>
    </item>
    <item name="android.app.job.JobInfo.Builder android.app.job.JobInfo.Builder setBackoffCriteria(long, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.job.JobInfo.BACKOFF_POLICY_LINEAR, android.app.job.JobInfo.BACKOFF_POLICY_EXPONENTIAL}"></val>
        </annotation>
    </item>
    <item name="android.app.job.JobInfo.Builder android.app.job.JobInfo.Builder setPriority(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.job.JobInfo.PRIORITY_MIN, android.app.job.JobInfo.PRIORITY_LOW, android.app.job.JobInfo.PRIORITY_DEFAULT, android.app.job.JobInfo.PRIORITY_HIGH, android.app.job.JobInfo.PRIORITY_MAX}"></val>
        </annotation>
    </item>
    <item name="android.app.job.JobInfo.Builder android.app.job.JobInfo.Builder setRequiredNetworkType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.job.JobInfo.NETWORK_TYPE_NONE, android.app.job.JobInfo.NETWORK_TYPE_ANY, android.app.job.JobInfo.NETWORK_TYPE_UNMETERED, android.app.job.JobInfo.NETWORK_TYPE_NOT_ROAMING, android.app.job.JobInfo.NETWORK_TYPE_CELLULAR}"></val>
        </annotation>
    </item>
    <item name="android.app.job.JobInfo.TriggerContentUri TriggerContentUri(android.net.Uri, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.job.JobInfo.TriggerContentUri.FLAG_NOTIFY_FOR_DESCENDANTS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.app.job.JobService void setNotification(android.app.job.JobParameters, int, android.app.Notification, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.job.JobService.JOB_END_NOTIFICATION_POLICY_DETACH, android.app.job.JobService.JOB_END_NOTIFICATION_POLICY_REMOVE}"></val>
        </annotation>
    </item>
    <item name="android.app.job.JobServiceEngine void setNotification(android.app.job.JobParameters, int, android.app.Notification, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.job.JobService.JOB_END_NOTIFICATION_POLICY_DETACH, android.app.job.JobService.JOB_END_NOTIFICATION_POLICY_REMOVE}"></val>
        </annotation>
    </item>
    <item name="android.app.people.ConversationStatus.Builder Builder(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.people.ConversationStatus.ACTIVITY_OTHER, android.app.people.ConversationStatus.ACTIVITY_BIRTHDAY, android.app.people.ConversationStatus.ACTIVITY_ANNIVERSARY, android.app.people.ConversationStatus.ACTIVITY_NEW_STORY, android.app.people.ConversationStatus.ACTIVITY_AUDIO, android.app.people.ConversationStatus.ACTIVITY_VIDEO, android.app.people.ConversationStatus.ACTIVITY_GAME, android.app.people.ConversationStatus.ACTIVITY_LOCATION, android.app.people.ConversationStatus.ACTIVITY_UPCOMING_BIRTHDAY}"></val>
        </annotation>
    </item>
    <item name="android.app.people.ConversationStatus.Builder android.app.people.ConversationStatus.Builder setAvailability(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.people.ConversationStatus.AVAILABILITY_UNKNOWN, android.app.people.ConversationStatus.AVAILABILITY_AVAILABLE, android.app.people.ConversationStatus.AVAILABILITY_BUSY, android.app.people.ConversationStatus.AVAILABILITY_OFFLINE}"></val>
        </annotation>
    </item>
    <item name="android.app.sdksandbox.RequestSurfacePackageException RequestSurfacePackageException(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.sdksandbox.SdkSandboxManager.REQUEST_SURFACE_PACKAGE_INTERNAL_ERROR, android.app.sdksandbox.SdkSandboxManager.REQUEST_SURFACE_PACKAGE_SDK_NOT_LOADED}"></val>
        </annotation>
    </item>
    <item name="android.app.sdksandbox.RequestSurfacePackageException RequestSurfacePackageException(int, java.lang.String, java.lang.Throwable) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.sdksandbox.SdkSandboxManager.REQUEST_SURFACE_PACKAGE_INTERNAL_ERROR, android.app.sdksandbox.SdkSandboxManager.REQUEST_SURFACE_PACKAGE_SDK_NOT_LOADED}"></val>
        </annotation>
    </item>
    <item name="android.app.sdksandbox.RequestSurfacePackageException RequestSurfacePackageException(int, java.lang.String, java.lang.Throwable, android.os.Bundle) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.sdksandbox.SdkSandboxManager.REQUEST_SURFACE_PACKAGE_INTERNAL_ERROR, android.app.sdksandbox.SdkSandboxManager.REQUEST_SURFACE_PACKAGE_SDK_NOT_LOADED}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addAction(android.app.PendingIntent, android.app.slice.Slice, java.lang.String) 2">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.SUBTYPE_COLOR, android.app.slice.Slice.SUBTYPE_CONTENT_DESCRIPTION, android.app.slice.Slice.SUBTYPE_MAX, android.app.slice.Slice.SUBTYPE_MESSAGE, android.app.slice.Slice.SUBTYPE_PRIORITY, android.app.slice.Slice.SUBTYPE_RANGE, android.app.slice.Slice.SUBTYPE_SOURCE, android.app.slice.Slice.SUBTYPE_TOGGLE, android.app.slice.Slice.SUBTYPE_VALUE, android.app.slice.Slice.SUBTYPE_LAYOUT_DIRECTION}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addBundle(android.os.Bundle, java.lang.String, java.util.List&lt;java.lang.String&gt;) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.SUBTYPE_COLOR, android.app.slice.Slice.SUBTYPE_CONTENT_DESCRIPTION, android.app.slice.Slice.SUBTYPE_MAX, android.app.slice.Slice.SUBTYPE_MESSAGE, android.app.slice.Slice.SUBTYPE_PRIORITY, android.app.slice.Slice.SUBTYPE_RANGE, android.app.slice.Slice.SUBTYPE_SOURCE, android.app.slice.Slice.SUBTYPE_TOGGLE, android.app.slice.Slice.SUBTYPE_VALUE, android.app.slice.Slice.SUBTYPE_LAYOUT_DIRECTION}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addBundle(android.os.Bundle, java.lang.String, java.util.List&lt;java.lang.String&gt;) 2">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.HINT_TITLE, android.app.slice.Slice.HINT_LIST, android.app.slice.Slice.HINT_LIST_ITEM, android.app.slice.Slice.HINT_LARGE, android.app.slice.Slice.HINT_ACTIONS, android.app.slice.Slice.HINT_SELECTED, android.app.slice.Slice.HINT_NO_TINT, android.app.slice.Slice.HINT_SHORTCUT, android.app.slice.Slice.HINT_HORIZONTAL, android.app.slice.Slice.HINT_PARTIAL, android.app.slice.Slice.HINT_SEE_MORE, android.app.slice.Slice.HINT_KEYWORDS, android.app.slice.Slice.HINT_ERROR, android.app.slice.Slice.HINT_TTL, android.app.slice.Slice.HINT_LAST_UPDATED, android.app.slice.Slice.HINT_PERMISSION_REQUEST}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addHints(java.util.List&lt;java.lang.String&gt;) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.HINT_TITLE, android.app.slice.Slice.HINT_LIST, android.app.slice.Slice.HINT_LIST_ITEM, android.app.slice.Slice.HINT_LARGE, android.app.slice.Slice.HINT_ACTIONS, android.app.slice.Slice.HINT_SELECTED, android.app.slice.Slice.HINT_NO_TINT, android.app.slice.Slice.HINT_SHORTCUT, android.app.slice.Slice.HINT_HORIZONTAL, android.app.slice.Slice.HINT_PARTIAL, android.app.slice.Slice.HINT_SEE_MORE, android.app.slice.Slice.HINT_KEYWORDS, android.app.slice.Slice.HINT_ERROR, android.app.slice.Slice.HINT_TTL, android.app.slice.Slice.HINT_LAST_UPDATED, android.app.slice.Slice.HINT_PERMISSION_REQUEST}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addIcon(android.graphics.drawable.Icon, java.lang.String, java.util.List&lt;java.lang.String&gt;) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.SUBTYPE_COLOR, android.app.slice.Slice.SUBTYPE_CONTENT_DESCRIPTION, android.app.slice.Slice.SUBTYPE_MAX, android.app.slice.Slice.SUBTYPE_MESSAGE, android.app.slice.Slice.SUBTYPE_PRIORITY, android.app.slice.Slice.SUBTYPE_RANGE, android.app.slice.Slice.SUBTYPE_SOURCE, android.app.slice.Slice.SUBTYPE_TOGGLE, android.app.slice.Slice.SUBTYPE_VALUE, android.app.slice.Slice.SUBTYPE_LAYOUT_DIRECTION}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addIcon(android.graphics.drawable.Icon, java.lang.String, java.util.List&lt;java.lang.String&gt;) 2">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.HINT_TITLE, android.app.slice.Slice.HINT_LIST, android.app.slice.Slice.HINT_LIST_ITEM, android.app.slice.Slice.HINT_LARGE, android.app.slice.Slice.HINT_ACTIONS, android.app.slice.Slice.HINT_SELECTED, android.app.slice.Slice.HINT_NO_TINT, android.app.slice.Slice.HINT_SHORTCUT, android.app.slice.Slice.HINT_HORIZONTAL, android.app.slice.Slice.HINT_PARTIAL, android.app.slice.Slice.HINT_SEE_MORE, android.app.slice.Slice.HINT_KEYWORDS, android.app.slice.Slice.HINT_ERROR, android.app.slice.Slice.HINT_TTL, android.app.slice.Slice.HINT_LAST_UPDATED, android.app.slice.Slice.HINT_PERMISSION_REQUEST}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addInt(int, java.lang.String, java.util.List&lt;java.lang.String&gt;) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.SUBTYPE_COLOR, android.app.slice.Slice.SUBTYPE_CONTENT_DESCRIPTION, android.app.slice.Slice.SUBTYPE_MAX, android.app.slice.Slice.SUBTYPE_MESSAGE, android.app.slice.Slice.SUBTYPE_PRIORITY, android.app.slice.Slice.SUBTYPE_RANGE, android.app.slice.Slice.SUBTYPE_SOURCE, android.app.slice.Slice.SUBTYPE_TOGGLE, android.app.slice.Slice.SUBTYPE_VALUE, android.app.slice.Slice.SUBTYPE_LAYOUT_DIRECTION}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addInt(int, java.lang.String, java.util.List&lt;java.lang.String&gt;) 2">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.HINT_TITLE, android.app.slice.Slice.HINT_LIST, android.app.slice.Slice.HINT_LIST_ITEM, android.app.slice.Slice.HINT_LARGE, android.app.slice.Slice.HINT_ACTIONS, android.app.slice.Slice.HINT_SELECTED, android.app.slice.Slice.HINT_NO_TINT, android.app.slice.Slice.HINT_SHORTCUT, android.app.slice.Slice.HINT_HORIZONTAL, android.app.slice.Slice.HINT_PARTIAL, android.app.slice.Slice.HINT_SEE_MORE, android.app.slice.Slice.HINT_KEYWORDS, android.app.slice.Slice.HINT_ERROR, android.app.slice.Slice.HINT_TTL, android.app.slice.Slice.HINT_LAST_UPDATED, android.app.slice.Slice.HINT_PERMISSION_REQUEST}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addLong(long, java.lang.String, java.util.List&lt;java.lang.String&gt;) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.SUBTYPE_COLOR, android.app.slice.Slice.SUBTYPE_CONTENT_DESCRIPTION, android.app.slice.Slice.SUBTYPE_MAX, android.app.slice.Slice.SUBTYPE_MESSAGE, android.app.slice.Slice.SUBTYPE_PRIORITY, android.app.slice.Slice.SUBTYPE_RANGE, android.app.slice.Slice.SUBTYPE_SOURCE, android.app.slice.Slice.SUBTYPE_TOGGLE, android.app.slice.Slice.SUBTYPE_VALUE, android.app.slice.Slice.SUBTYPE_LAYOUT_DIRECTION}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addLong(long, java.lang.String, java.util.List&lt;java.lang.String&gt;) 2">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.HINT_TITLE, android.app.slice.Slice.HINT_LIST, android.app.slice.Slice.HINT_LIST_ITEM, android.app.slice.Slice.HINT_LARGE, android.app.slice.Slice.HINT_ACTIONS, android.app.slice.Slice.HINT_SELECTED, android.app.slice.Slice.HINT_NO_TINT, android.app.slice.Slice.HINT_SHORTCUT, android.app.slice.Slice.HINT_HORIZONTAL, android.app.slice.Slice.HINT_PARTIAL, android.app.slice.Slice.HINT_SEE_MORE, android.app.slice.Slice.HINT_KEYWORDS, android.app.slice.Slice.HINT_ERROR, android.app.slice.Slice.HINT_TTL, android.app.slice.Slice.HINT_LAST_UPDATED, android.app.slice.Slice.HINT_PERMISSION_REQUEST}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addRemoteInput(android.app.RemoteInput, java.lang.String, java.util.List&lt;java.lang.String&gt;) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.SUBTYPE_COLOR, android.app.slice.Slice.SUBTYPE_CONTENT_DESCRIPTION, android.app.slice.Slice.SUBTYPE_MAX, android.app.slice.Slice.SUBTYPE_MESSAGE, android.app.slice.Slice.SUBTYPE_PRIORITY, android.app.slice.Slice.SUBTYPE_RANGE, android.app.slice.Slice.SUBTYPE_SOURCE, android.app.slice.Slice.SUBTYPE_TOGGLE, android.app.slice.Slice.SUBTYPE_VALUE, android.app.slice.Slice.SUBTYPE_LAYOUT_DIRECTION}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addRemoteInput(android.app.RemoteInput, java.lang.String, java.util.List&lt;java.lang.String&gt;) 2">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.HINT_TITLE, android.app.slice.Slice.HINT_LIST, android.app.slice.Slice.HINT_LIST_ITEM, android.app.slice.Slice.HINT_LARGE, android.app.slice.Slice.HINT_ACTIONS, android.app.slice.Slice.HINT_SELECTED, android.app.slice.Slice.HINT_NO_TINT, android.app.slice.Slice.HINT_SHORTCUT, android.app.slice.Slice.HINT_HORIZONTAL, android.app.slice.Slice.HINT_PARTIAL, android.app.slice.Slice.HINT_SEE_MORE, android.app.slice.Slice.HINT_KEYWORDS, android.app.slice.Slice.HINT_ERROR, android.app.slice.Slice.HINT_TTL, android.app.slice.Slice.HINT_LAST_UPDATED, android.app.slice.Slice.HINT_PERMISSION_REQUEST}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addSubSlice(android.app.slice.Slice, java.lang.String) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.SUBTYPE_COLOR, android.app.slice.Slice.SUBTYPE_CONTENT_DESCRIPTION, android.app.slice.Slice.SUBTYPE_MAX, android.app.slice.Slice.SUBTYPE_MESSAGE, android.app.slice.Slice.SUBTYPE_PRIORITY, android.app.slice.Slice.SUBTYPE_RANGE, android.app.slice.Slice.SUBTYPE_SOURCE, android.app.slice.Slice.SUBTYPE_TOGGLE, android.app.slice.Slice.SUBTYPE_VALUE, android.app.slice.Slice.SUBTYPE_LAYOUT_DIRECTION}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addText(java.lang.CharSequence, java.lang.String, java.util.List&lt;java.lang.String&gt;) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.SUBTYPE_COLOR, android.app.slice.Slice.SUBTYPE_CONTENT_DESCRIPTION, android.app.slice.Slice.SUBTYPE_MAX, android.app.slice.Slice.SUBTYPE_MESSAGE, android.app.slice.Slice.SUBTYPE_PRIORITY, android.app.slice.Slice.SUBTYPE_RANGE, android.app.slice.Slice.SUBTYPE_SOURCE, android.app.slice.Slice.SUBTYPE_TOGGLE, android.app.slice.Slice.SUBTYPE_VALUE, android.app.slice.Slice.SUBTYPE_LAYOUT_DIRECTION}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.Slice.Builder android.app.slice.Slice.Builder addText(java.lang.CharSequence, java.lang.String, java.util.List&lt;java.lang.String&gt;) 2">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.HINT_TITLE, android.app.slice.Slice.HINT_LIST, android.app.slice.Slice.HINT_LIST_ITEM, android.app.slice.Slice.HINT_LARGE, android.app.slice.Slice.HINT_ACTIONS, android.app.slice.Slice.HINT_SELECTED, android.app.slice.Slice.HINT_NO_TINT, android.app.slice.Slice.HINT_SHORTCUT, android.app.slice.Slice.HINT_HORIZONTAL, android.app.slice.Slice.HINT_PARTIAL, android.app.slice.Slice.HINT_SEE_MORE, android.app.slice.Slice.HINT_KEYWORDS, android.app.slice.Slice.HINT_ERROR, android.app.slice.Slice.HINT_TTL, android.app.slice.Slice.HINT_LAST_UPDATED, android.app.slice.Slice.HINT_PERMISSION_REQUEST}"></val>
        </annotation>
    </item>
    <item name="android.app.slice.SliceItem boolean hasHint(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.app.slice.Slice.HINT_TITLE, android.app.slice.Slice.HINT_LIST, android.app.slice.Slice.HINT_LIST_ITEM, android.app.slice.Slice.HINT_LARGE, android.app.slice.Slice.HINT_ACTIONS, android.app.slice.Slice.HINT_SELECTED, android.app.slice.Slice.HINT_NO_TINT, android.app.slice.Slice.HINT_SHORTCUT, android.app.slice.Slice.HINT_HORIZONTAL, android.app.slice.Slice.HINT_PARTIAL, android.app.slice.Slice.HINT_SEE_MORE, android.app.slice.Slice.HINT_KEYWORDS, android.app.slice.Slice.HINT_ERROR, android.app.slice.Slice.HINT_TTL, android.app.slice.Slice.HINT_LAST_UPDATED, android.app.slice.Slice.HINT_PERMISSION_REQUEST}"></val>
        </annotation>
    </item>
    <item name="android.app.usage.StorageStats long getAppBytesByDataType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.usage.StorageStats.APP_DATA_TYPE_FILE_TYPE_DEXOPT_ARTIFACT, android.app.usage.StorageStats.APP_DATA_TYPE_FILE_TYPE_REFERENCE_PROFILE, android.app.usage.StorageStats.APP_DATA_TYPE_FILE_TYPE_CURRENT_PROFILE, android.app.usage.StorageStats.APP_DATA_TYPE_FILE_TYPE_APK, android.app.usage.StorageStats.APP_DATA_TYPE_FILE_TYPE_DM, android.app.usage.StorageStats.APP_DATA_TYPE_LIB}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.app.usage.UsageEventsQuery.Builder android.app.usage.UsageEventsQuery.Builder setEventTypes(int...) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.usage.UsageEvents.Event.NONE, android.app.usage.UsageEvents.Event.ACTIVITY_RESUMED, android.app.usage.UsageEvents.Event.ACTIVITY_PAUSED, android.app.usage.UsageEvents.Event.CONFIGURATION_CHANGE, android.app.usage.UsageEvents.Event.USER_INTERACTION, android.app.usage.UsageEvents.Event.SHORTCUT_INVOCATION, android.app.usage.UsageEvents.Event.STANDBY_BUCKET_CHANGED, android.app.usage.UsageEvents.Event.SCREEN_INTERACTIVE, android.app.usage.UsageEvents.Event.SCREEN_NON_INTERACTIVE, android.app.usage.UsageEvents.Event.KEYGUARD_SHOWN, android.app.usage.UsageEvents.Event.KEYGUARD_HIDDEN, android.app.usage.UsageEvents.Event.FOREGROUND_SERVICE_START, android.app.usage.UsageEvents.Event.FOREGROUND_SERVICE_STOP, android.app.usage.UsageEvents.Event.ACTIVITY_STOPPED, android.app.usage.UsageEvents.Event.DEVICE_SHUTDOWN, android.app.usage.UsageEvents.Event.DEVICE_STARTUP}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.appwidget.AppWidgetManager android.widget.RemoteViews getWidgetPreview(android.content.ComponentName, android.os.UserHandle, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_HOME_SCREEN, android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_KEYGUARD, android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_SEARCHBOX}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.appwidget.AppWidgetManager boolean setWidgetPreview(android.content.ComponentName, int, android.widget.RemoteViews) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_HOME_SCREEN, android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_KEYGUARD, android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_SEARCHBOX}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.appwidget.AppWidgetManager void removeWidgetPreview(android.content.ComponentName, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_HOME_SCREEN, android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_KEYGUARD, android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_SEARCHBOX}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothAdapter android.bluetooth.BluetoothDevice getRemoteLeDevice(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothDevice.ADDRESS_TYPE_PUBLIC, android.bluetooth.BluetoothDevice.ADDRESS_TYPE_RANDOM, android.bluetooth.BluetoothDevice.ADDRESS_TYPE_ANONYMOUS, android.bluetooth.BluetoothDevice.ADDRESS_TYPE_UNKNOWN}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothCodecConfig.Builder android.bluetooth.BluetoothCodecConfig.Builder setBitsPerSample(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothCodecConfig.BITS_PER_SAMPLE_NONE, android.bluetooth.BluetoothCodecConfig.BITS_PER_SAMPLE_16, android.bluetooth.BluetoothCodecConfig.BITS_PER_SAMPLE_24, android.bluetooth.BluetoothCodecConfig.BITS_PER_SAMPLE_32}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothCodecConfig.Builder android.bluetooth.BluetoothCodecConfig.Builder setChannelMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothCodecConfig.CHANNEL_MODE_NONE, android.bluetooth.BluetoothCodecConfig.CHANNEL_MODE_MONO, android.bluetooth.BluetoothCodecConfig.CHANNEL_MODE_STEREO}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothCodecConfig.Builder android.bluetooth.BluetoothCodecConfig.Builder setCodecPriority(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothCodecConfig.CODEC_PRIORITY_DISABLED, android.bluetooth.BluetoothCodecConfig.CODEC_PRIORITY_DEFAULT, android.bluetooth.BluetoothCodecConfig.CODEC_PRIORITY_HIGHEST}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothCodecConfig.Builder android.bluetooth.BluetoothCodecConfig.Builder setCodecType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothCodecConfig.SOURCE_CODEC_TYPE_SBC, android.bluetooth.BluetoothCodecConfig.SOURCE_CODEC_TYPE_AAC, android.bluetooth.BluetoothCodecConfig.SOURCE_CODEC_TYPE_APTX, android.bluetooth.BluetoothCodecConfig.SOURCE_CODEC_TYPE_APTX_HD, android.bluetooth.BluetoothCodecConfig.SOURCE_CODEC_TYPE_LDAC, android.bluetooth.BluetoothCodecConfig.SOURCE_CODEC_TYPE_LC3, android.bluetooth.BluetoothCodecConfig.SOURCE_CODEC_TYPE_OPUS, android.bluetooth.BluetoothCodecConfig.SOURCE_CODEC_TYPE_INVALID}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothCodecConfig.Builder android.bluetooth.BluetoothCodecConfig.Builder setSampleRate(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothCodecConfig.SAMPLE_RATE_NONE, android.bluetooth.BluetoothCodecConfig.SAMPLE_RATE_44100, android.bluetooth.BluetoothCodecConfig.SAMPLE_RATE_48000, android.bluetooth.BluetoothCodecConfig.SAMPLE_RATE_88200, android.bluetooth.BluetoothCodecConfig.SAMPLE_RATE_96000, android.bluetooth.BluetoothCodecConfig.SAMPLE_RATE_176400, android.bluetooth.BluetoothCodecConfig.SAMPLE_RATE_192000}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothGatt int writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic, byte[], int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT, android.bluetooth.BluetoothGattCharacteristic.WRITE_TYPE_NO_RESPONSE, android.bluetooth.BluetoothGattCharacteristic.WRITE_TYPE_SIGNED}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothLeAudioCodecConfig.Builder android.bluetooth.BluetoothLeAudioCodecConfig.Builder setBitsPerSample(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothLeAudioCodecConfig.BITS_PER_SAMPLE_NONE, android.bluetooth.BluetoothLeAudioCodecConfig.BITS_PER_SAMPLE_16, android.bluetooth.BluetoothLeAudioCodecConfig.BITS_PER_SAMPLE_24, android.bluetooth.BluetoothLeAudioCodecConfig.BITS_PER_SAMPLE_32}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothLeAudioCodecConfig.Builder android.bluetooth.BluetoothLeAudioCodecConfig.Builder setChannelCount(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothLeAudioCodecConfig.CHANNEL_COUNT_NONE, android.bluetooth.BluetoothLeAudioCodecConfig.CHANNEL_COUNT_1, android.bluetooth.BluetoothLeAudioCodecConfig.CHANNEL_COUNT_2}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothLeAudioCodecConfig.Builder android.bluetooth.BluetoothLeAudioCodecConfig.Builder setCodecPriority(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothLeAudioCodecConfig.CODEC_PRIORITY_DISABLED, android.bluetooth.BluetoothLeAudioCodecConfig.CODEC_PRIORITY_DEFAULT, android.bluetooth.BluetoothLeAudioCodecConfig.CODEC_PRIORITY_HIGHEST}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothLeAudioCodecConfig.Builder android.bluetooth.BluetoothLeAudioCodecConfig.Builder setCodecType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothLeAudioCodecConfig.SOURCE_CODEC_TYPE_LC3, android.bluetooth.BluetoothLeAudioCodecConfig.SOURCE_CODEC_TYPE_INVALID}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothLeAudioCodecConfig.Builder android.bluetooth.BluetoothLeAudioCodecConfig.Builder setFrameDuration(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothLeAudioCodecConfig.FRAME_DURATION_NONE, android.bluetooth.BluetoothLeAudioCodecConfig.FRAME_DURATION_7500, android.bluetooth.BluetoothLeAudioCodecConfig.FRAME_DURATION_10000}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothLeAudioCodecConfig.Builder android.bluetooth.BluetoothLeAudioCodecConfig.Builder setSampleRate(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_NONE, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_8000, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_11025, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_16000, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_22050, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_24000, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_32000, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_44100, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_48000, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_88200, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_96000, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_176400, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_192000, android.bluetooth.BluetoothLeAudioCodecConfig.SAMPLE_RATE_384000}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothSocketException BluetoothSocketException(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothSocketException.UNSPECIFIED, android.bluetooth.BluetoothSocketException.L2CAP_UNKNOWN, android.bluetooth.BluetoothSocketException.L2CAP_ACL_FAILURE, android.bluetooth.BluetoothSocketException.L2CAP_CLIENT_SECURITY_FAILURE, android.bluetooth.BluetoothSocketException.L2CAP_INSUFFICIENT_AUTHENTICATION, android.bluetooth.BluetoothSocketException.L2CAP_INSUFFICIENT_AUTHORIZATION, android.bluetooth.BluetoothSocketException.L2CAP_INSUFFICIENT_ENCRYPT_KEY_SIZE, android.bluetooth.BluetoothSocketException.L2CAP_INSUFFICIENT_ENCRYPTION, android.bluetooth.BluetoothSocketException.L2CAP_INVALID_SOURCE_CID, android.bluetooth.BluetoothSocketException.L2CAP_SOURCE_CID_ALREADY_ALLOCATED, android.bluetooth.BluetoothSocketException.L2CAP_UNACCEPTABLE_PARAMETERS, android.bluetooth.BluetoothSocketException.L2CAP_INVALID_PARAMETERS, android.bluetooth.BluetoothSocketException.L2CAP_NO_RESOURCES, android.bluetooth.BluetoothSocketException.L2CAP_NO_PSM_AVAILABLE, android.bluetooth.BluetoothSocketException.L2CAP_TIMEOUT, android.bluetooth.BluetoothSocketException.BLUETOOTH_OFF_FAILURE, android.bluetooth.BluetoothSocketException.SOCKET_MANAGER_FAILURE, android.bluetooth.BluetoothSocketException.SOCKET_CLOSED, android.bluetooth.BluetoothSocketException.SOCKET_CONNECTION_FAILURE, android.bluetooth.BluetoothSocketException.NULL_DEVICE, android.bluetooth.BluetoothSocketException.RPC_FAILURE, android.bluetooth.BluetoothSocketException.UNIX_FILE_SOCKET_CREATION_FAILURE}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.BluetoothSocketException BluetoothSocketException(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.BluetoothSocketException.UNSPECIFIED, android.bluetooth.BluetoothSocketException.L2CAP_UNKNOWN, android.bluetooth.BluetoothSocketException.L2CAP_ACL_FAILURE, android.bluetooth.BluetoothSocketException.L2CAP_CLIENT_SECURITY_FAILURE, android.bluetooth.BluetoothSocketException.L2CAP_INSUFFICIENT_AUTHENTICATION, android.bluetooth.BluetoothSocketException.L2CAP_INSUFFICIENT_AUTHORIZATION, android.bluetooth.BluetoothSocketException.L2CAP_INSUFFICIENT_ENCRYPT_KEY_SIZE, android.bluetooth.BluetoothSocketException.L2CAP_INSUFFICIENT_ENCRYPTION, android.bluetooth.BluetoothSocketException.L2CAP_INVALID_SOURCE_CID, android.bluetooth.BluetoothSocketException.L2CAP_SOURCE_CID_ALREADY_ALLOCATED, android.bluetooth.BluetoothSocketException.L2CAP_UNACCEPTABLE_PARAMETERS, android.bluetooth.BluetoothSocketException.L2CAP_INVALID_PARAMETERS, android.bluetooth.BluetoothSocketException.L2CAP_NO_RESOURCES, android.bluetooth.BluetoothSocketException.L2CAP_NO_PSM_AVAILABLE, android.bluetooth.BluetoothSocketException.L2CAP_TIMEOUT, android.bluetooth.BluetoothSocketException.BLUETOOTH_OFF_FAILURE, android.bluetooth.BluetoothSocketException.SOCKET_MANAGER_FAILURE, android.bluetooth.BluetoothSocketException.SOCKET_CLOSED, android.bluetooth.BluetoothSocketException.SOCKET_CONNECTION_FAILURE, android.bluetooth.BluetoothSocketException.NULL_DEVICE, android.bluetooth.BluetoothSocketException.RPC_FAILURE, android.bluetooth.BluetoothSocketException.UNIX_FILE_SOCKET_CREATION_FAILURE}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.le.ScanCallback void onScanFailed(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.le.ScanCallback.SCAN_FAILED_ALREADY_STARTED, android.bluetooth.le.ScanCallback.SCAN_FAILED_APPLICATION_REGISTRATION_FAILED, android.bluetooth.le.ScanCallback.SCAN_FAILED_INTERNAL_ERROR, android.bluetooth.le.ScanCallback.SCAN_FAILED_FEATURE_UNSUPPORTED, android.bluetooth.le.ScanCallback.SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES, android.bluetooth.le.ScanCallback.SCAN_FAILED_SCANNING_TOO_FREQUENTLY}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.le.ScanFilter.Builder android.bluetooth.le.ScanFilter.Builder setAdvertisingDataType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.le.ScanRecord.DATA_TYPE_FLAGS, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE, android.bluetooth.le.ScanRecord.DATA_TYPE_LOCAL_NAME_SHORT, android.bluetooth.le.ScanRecord.DATA_TYPE_LOCAL_NAME_COMPLETE, android.bluetooth.le.ScanRecord.DATA_TYPE_TX_POWER_LEVEL, android.bluetooth.le.ScanRecord.DATA_TYPE_CLASS_OF_DEVICE, android.bluetooth.le.ScanRecord.DATA_TYPE_SIMPLE_PAIRING_HASH_C, android.bluetooth.le.ScanRecord.DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R, android.bluetooth.le.ScanRecord.DATA_TYPE_DEVICE_ID, android.bluetooth.le.ScanRecord.DATA_TYPE_SECURITY_MANAGER_OUT_OF_BAND_FLAGS, android.bluetooth.le.ScanRecord.DATA_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_SOLICITATION_UUIDS_16_BIT, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_SOLICITATION_UUIDS_128_BIT, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_DATA_16_BIT, android.bluetooth.le.ScanRecord.DATA_TYPE_PUBLIC_TARGET_ADDRESS, android.bluetooth.le.ScanRecord.DATA_TYPE_RANDOM_TARGET_ADDRESS, android.bluetooth.le.ScanRecord.DATA_TYPE_APPEARANCE, android.bluetooth.le.ScanRecord.DATA_TYPE_ADVERTISING_INTERVAL, android.bluetooth.le.ScanRecord.DATA_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS, android.bluetooth.le.ScanRecord.DATA_TYPE_LE_ROLE, android.bluetooth.le.ScanRecord.DATA_TYPE_SIMPLE_PAIRING_HASH_C_256, android.bluetooth.le.ScanRecord.DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R_256, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_SOLICITATION_UUIDS_32_BIT, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_DATA_32_BIT, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_DATA_128_BIT, android.bluetooth.le.ScanRecord.DATA_TYPE_LE_SECURE_CONNECTIONS_CONFIRMATION_VALUE, android.bluetooth.le.ScanRecord.DATA_TYPE_LE_SECURE_CONNECTIONS_RANDOM_VALUE, android.bluetooth.le.ScanRecord.DATA_TYPE_URI, android.bluetooth.le.ScanRecord.DATA_TYPE_INDOOR_POSITIONING, android.bluetooth.le.ScanRecord.DATA_TYPE_TRANSPORT_DISCOVERY_DATA, android.bluetooth.le.ScanRecord.DATA_TYPE_LE_SUPPORTED_FEATURES, android.bluetooth.le.ScanRecord.DATA_TYPE_CHANNEL_MAP_UPDATE_INDICATION, android.bluetooth.le.ScanRecord.DATA_TYPE_PB_ADV, android.bluetooth.le.ScanRecord.DATA_TYPE_MESH_MESSAGE, android.bluetooth.le.ScanRecord.DATA_TYPE_MESH_BEACON, android.bluetooth.le.ScanRecord.DATA_TYPE_BIG_INFO, android.bluetooth.le.ScanRecord.DATA_TYPE_BROADCAST_CODE, android.bluetooth.le.ScanRecord.DATA_TYPE_RESOLVABLE_SET_IDENTIFIER, android.bluetooth.le.ScanRecord.DATA_TYPE_ADVERTISING_INTERVAL_LONG, android.bluetooth.le.ScanRecord.DATA_TYPE_3D_INFORMATION_DATA, android.bluetooth.le.ScanRecord.DATA_TYPE_MANUFACTURER_SPECIFIC_DATA}"></val>
        </annotation>
    </item>
    <item name="android.bluetooth.le.ScanFilter.Builder android.bluetooth.le.ScanFilter.Builder setAdvertisingDataTypeWithData(int, byte[], byte[]) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.bluetooth.le.ScanRecord.DATA_TYPE_FLAGS, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE, android.bluetooth.le.ScanRecord.DATA_TYPE_LOCAL_NAME_SHORT, android.bluetooth.le.ScanRecord.DATA_TYPE_LOCAL_NAME_COMPLETE, android.bluetooth.le.ScanRecord.DATA_TYPE_TX_POWER_LEVEL, android.bluetooth.le.ScanRecord.DATA_TYPE_CLASS_OF_DEVICE, android.bluetooth.le.ScanRecord.DATA_TYPE_SIMPLE_PAIRING_HASH_C, android.bluetooth.le.ScanRecord.DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R, android.bluetooth.le.ScanRecord.DATA_TYPE_DEVICE_ID, android.bluetooth.le.ScanRecord.DATA_TYPE_SECURITY_MANAGER_OUT_OF_BAND_FLAGS, android.bluetooth.le.ScanRecord.DATA_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_SOLICITATION_UUIDS_16_BIT, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_SOLICITATION_UUIDS_128_BIT, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_DATA_16_BIT, android.bluetooth.le.ScanRecord.DATA_TYPE_PUBLIC_TARGET_ADDRESS, android.bluetooth.le.ScanRecord.DATA_TYPE_RANDOM_TARGET_ADDRESS, android.bluetooth.le.ScanRecord.DATA_TYPE_APPEARANCE, android.bluetooth.le.ScanRecord.DATA_TYPE_ADVERTISING_INTERVAL, android.bluetooth.le.ScanRecord.DATA_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS, android.bluetooth.le.ScanRecord.DATA_TYPE_LE_ROLE, android.bluetooth.le.ScanRecord.DATA_TYPE_SIMPLE_PAIRING_HASH_C_256, android.bluetooth.le.ScanRecord.DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R_256, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_SOLICITATION_UUIDS_32_BIT, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_DATA_32_BIT, android.bluetooth.le.ScanRecord.DATA_TYPE_SERVICE_DATA_128_BIT, android.bluetooth.le.ScanRecord.DATA_TYPE_LE_SECURE_CONNECTIONS_CONFIRMATION_VALUE, android.bluetooth.le.ScanRecord.DATA_TYPE_LE_SECURE_CONNECTIONS_RANDOM_VALUE, android.bluetooth.le.ScanRecord.DATA_TYPE_URI, android.bluetooth.le.ScanRecord.DATA_TYPE_INDOOR_POSITIONING, android.bluetooth.le.ScanRecord.DATA_TYPE_TRANSPORT_DISCOVERY_DATA, android.bluetooth.le.ScanRecord.DATA_TYPE_LE_SUPPORTED_FEATURES, android.bluetooth.le.ScanRecord.DATA_TYPE_CHANNEL_MAP_UPDATE_INDICATION, android.bluetooth.le.ScanRecord.DATA_TYPE_PB_ADV, android.bluetooth.le.ScanRecord.DATA_TYPE_MESH_MESSAGE, android.bluetooth.le.ScanRecord.DATA_TYPE_MESH_BEACON, android.bluetooth.le.ScanRecord.DATA_TYPE_BIG_INFO, android.bluetooth.le.ScanRecord.DATA_TYPE_BROADCAST_CODE, android.bluetooth.le.ScanRecord.DATA_TYPE_RESOLVABLE_SET_IDENTIFIER, android.bluetooth.le.ScanRecord.DATA_TYPE_ADVERTISING_INTERVAL_LONG, android.bluetooth.le.ScanRecord.DATA_TYPE_3D_INFORMATION_DATA, android.bluetooth.le.ScanRecord.DATA_TYPE_MANUFACTURER_SPECIFIC_DATA}"></val>
        </annotation>
    </item>
    <item name="android.companion.AssociationRequest.Builder android.companion.AssociationRequest.Builder setDeviceProfile(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.companion.AssociationRequest.DEVICE_PROFILE_WATCH, android.companion.AssociationRequest.DEVICE_PROFILE_COMPUTER, android.companion.AssociationRequest.DEVICE_PROFILE_AUTOMOTIVE_PROJECTION, android.companion.AssociationRequest.DEVICE_PROFILE_APP_STREAMING, android.companion.AssociationRequest.DEVICE_PROFILE_GLASSES, android.companion.AssociationRequest.DEVICE_PROFILE_NEARBY_DEVICE_STREAMING}"></val>
        </annotation>
    </item>
    <item name="android.companion.CompanionDeviceManager void disableSystemDataSyncForTypes(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.companion.CompanionDeviceManager.FLAG_CALL_METADATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.companion.CompanionDeviceManager void enableSystemDataSyncForTypes(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.companion.CompanionDeviceManager.FLAG_CALL_METADATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.ClipDescription float getConfidenceScore(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.view.textclassifier.TextClassifier.TYPE_UNKNOWN, android.view.textclassifier.TextClassifier.TYPE_OTHER, android.view.textclassifier.TextClassifier.TYPE_EMAIL, android.view.textclassifier.TextClassifier.TYPE_PHONE, android.view.textclassifier.TextClassifier.TYPE_ADDRESS, android.view.textclassifier.TextClassifier.TYPE_URL, android.view.textclassifier.TextClassifier.TYPE_DATE, android.view.textclassifier.TextClassifier.TYPE_DATE_TIME, android.view.textclassifier.TextClassifier.TYPE_FLIGHT_NUMBER}"></val>
        </annotation>
    </item>
    <item name="android.content.ComponentCallbacks2 void onTrimMemory(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE, android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE, android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND, android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN, android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL, android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW, android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE}"></val>
        </annotation>
    </item>
    <item name="android.content.ContentResolver void notifyChange(android.net.Uri, android.database.ContentObserver, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.ContentResolver.NOTIFY_SYNC_TO_NETWORK, android.content.ContentResolver.NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS, android.content.ContentResolver.NOTIFY_INSERT, android.content.ContentResolver.NOTIFY_UPDATE, android.content.ContentResolver.NOTIFY_DELETE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.ContentResolver void notifyChange(java.util.Collection&lt;android.net.Uri&gt;, android.database.ContentObserver, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.ContentResolver.NOTIFY_SYNC_TO_NETWORK, android.content.ContentResolver.NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS, android.content.ContentResolver.NOTIFY_INSERT, android.content.ContentResolver.NOTIFY_UPDATE, android.content.ContentResolver.NOTIFY_DELETE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.ContentResolver void releasePersistableUriPermission(android.net.Uri, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.ContentResolver void takePersistableUriPermission(android.net.Uri, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context android.content.Context createPackageContext(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Context.CONTEXT_INCLUDE_CODE, android.content.Context.CONTEXT_IGNORE_SECURITY, android.content.Context.CONTEXT_RESTRICTED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context android.content.Context createWindowContext(android.view.Display, int, android.os.Bundle) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING, android.view.WindowManager.LayoutParams.TYPE_DRAWN_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG, android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR, android.view.WindowManager.LayoutParams.TYPE_SEARCH_BAR, android.view.WindowManager.LayoutParams.TYPE_PHONE, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT, android.view.WindowManager.LayoutParams.TYPE_TOAST, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_PRIORITY_PHONE, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG, android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_WALLPAPER, android.view.WindowManager.LayoutParams.TYPE_PRIVATE_PRESENTATION, android.view.WindowManager.LayoutParams.TYPE_ACCESSIBILITY_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY}"></val>
        </annotation>
    </item>
    <item name="android.content.Context android.content.Context createWindowContext(int, android.os.Bundle) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING, android.view.WindowManager.LayoutParams.TYPE_DRAWN_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG, android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR, android.view.WindowManager.LayoutParams.TYPE_SEARCH_BAR, android.view.WindowManager.LayoutParams.TYPE_PHONE, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT, android.view.WindowManager.LayoutParams.TYPE_TOAST, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_PRIORITY_PHONE, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG, android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_WALLPAPER, android.view.WindowManager.LayoutParams.TYPE_PRIVATE_PRESENTATION, android.view.WindowManager.LayoutParams.TYPE_ACCESSIBILITY_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY}"></val>
        </annotation>
    </item>
    <item name="android.content.Context android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Context.RECEIVER_VISIBLE_TO_INSTANT_APPS, android.content.Context.RECEIVER_EXPORTED, android.content.Context.RECEIVER_NOT_EXPORTED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler, int) 4">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Context.RECEIVER_VISIBLE_TO_INSTANT_APPS, android.content.Context.RECEIVER_EXPORTED, android.content.Context.RECEIVER_NOT_EXPORTED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context android.content.SharedPreferences getSharedPreferences(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Context.MODE_PRIVATE, android.content.Context.MODE_WORLD_READABLE, android.content.Context.MODE_WORLD_WRITEABLE, android.content.Context.MODE_MULTI_PROCESS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase.CursorFactory) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Context.MODE_PRIVATE, android.content.Context.MODE_WORLD_READABLE, android.content.Context.MODE_WORLD_WRITEABLE, android.content.Context.MODE_ENABLE_WRITE_AHEAD_LOGGING, android.content.Context.MODE_NO_LOCALIZED_COLLATORS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase.CursorFactory, android.database.DatabaseErrorHandler) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Context.MODE_PRIVATE, android.content.Context.MODE_WORLD_READABLE, android.content.Context.MODE_WORLD_WRITEABLE, android.content.Context.MODE_ENABLE_WRITE_AHEAD_LOGGING, android.content.Context.MODE_NO_LOCALIZED_COLLATORS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context boolean bindService(android.content.Intent, int, java.util.concurrent.Executor, android.content.ServiceConnection) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Context.BIND_AUTO_CREATE, android.content.Context.BIND_DEBUG_UNBIND, android.content.Context.BIND_NOT_FOREGROUND, android.content.Context.BIND_ABOVE_CLIENT, android.content.Context.BIND_ALLOW_OOM_MANAGEMENT, android.content.Context.BIND_WAIVE_PRIORITY, android.content.Context.BIND_IMPORTANT, android.content.Context.BIND_ADJUST_WITH_ACTIVITY, android.content.Context.BIND_NOT_PERCEPTIBLE, android.content.Context.BIND_ALLOW_ACTIVITY_STARTS, android.content.Context.BIND_INCLUDE_CAPABILITIES, android.content.Context.BIND_SHARED_ISOLATED_PROCESS, android.content.Context.BIND_PACKAGE_ISOLATED_PROCESS, android.content.Context.BIND_EXTERNAL_SERVICE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context int checkCallingOrSelfUriPermission(android.net.Uri, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context int checkCallingUriPermission(android.net.Uri, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context int checkContentUriPermissionFull(android.net.Uri, int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context int checkUriPermission(android.net.Uri, int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int) 5">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context int[] checkCallingOrSelfUriPermissions(java.util.List&lt;android.net.Uri&gt;, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context int[] checkCallingUriPermissions(java.util.List&lt;android.net.Uri&gt;, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context int[] checkUriPermissions(java.util.List&lt;android.net.Uri&gt;, int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context java.io.File getDir(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Context.MODE_PRIVATE, android.content.Context.MODE_WORLD_READABLE, android.content.Context.MODE_WORLD_WRITEABLE, android.content.Context.MODE_APPEND}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context java.io.FileOutputStream openFileOutput(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Context.MODE_PRIVATE, android.content.Context.MODE_WORLD_READABLE, android.content.Context.MODE_WORLD_WRITEABLE, android.content.Context.MODE_APPEND}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context java.lang.Object getSystemService(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.content.Context.POWER_SERVICE, android.content.Context.WINDOW_SERVICE, android.content.Context.LAYOUT_INFLATER_SERVICE, android.content.Context.ACCOUNT_SERVICE, android.content.Context.ACTIVITY_SERVICE, android.content.Context.ALARM_SERVICE, android.content.Context.NOTIFICATION_SERVICE, android.content.Context.ACCESSIBILITY_SERVICE, android.content.Context.CAPTIONING_SERVICE, android.content.Context.KEYGUARD_SERVICE, android.content.Context.LOCATION_SERVICE, android.content.Context.HEALTHCONNECT_SERVICE, android.content.Context.SEARCH_SERVICE, android.content.Context.SENSOR_SERVICE, android.content.Context.STORAGE_SERVICE, android.content.Context.STORAGE_STATS_SERVICE, android.content.Context.WALLPAPER_SERVICE, android.content.Context.VIBRATOR_MANAGER_SERVICE, android.content.Context.VIBRATOR_SERVICE, android.content.Context.CONNECTIVITY_SERVICE, android.content.Context.IPSEC_SERVICE, android.content.Context.VPN_MANAGEMENT_SERVICE, android.content.Context.NETWORK_STATS_SERVICE, android.content.Context.WIFI_SERVICE, android.content.Context.WIFI_AWARE_SERVICE, android.content.Context.WIFI_P2P_SERVICE, android.content.Context.WIFI_RTT_RANGING_SERVICE, android.content.Context.NSD_SERVICE, android.content.Context.AUDIO_SERVICE, android.content.Context.FINGERPRINT_SERVICE, android.content.Context.BIOMETRIC_SERVICE, android.content.Context.MEDIA_ROUTER_SERVICE, android.content.Context.TELEPHONY_SERVICE, android.content.Context.TELEPHONY_SUBSCRIPTION_SERVICE, android.content.Context.CARRIER_CONFIG_SERVICE, android.content.Context.EUICC_SERVICE, android.content.Context.TELECOM_SERVICE, android.content.Context.CLIPBOARD_SERVICE, android.content.Context.INPUT_METHOD_SERVICE, android.content.Context.TEXT_SERVICES_MANAGER_SERVICE, android.content.Context.TEXT_CLASSIFICATION_SERVICE, android.content.Context.APPWIDGET_SERVICE, android.content.Context.DROPBOX_SERVICE, android.content.Context.DEVICE_POLICY_SERVICE, android.content.Context.UI_MODE_SERVICE, android.content.Context.DOWNLOAD_SERVICE, android.content.Context.NFC_SERVICE, android.content.Context.BLUETOOTH_SERVICE, android.content.Context.USB_SERVICE, android.content.Context.LAUNCHER_APPS_SERVICE, android.content.Context.INPUT_SERVICE, android.content.Context.DISPLAY_SERVICE, android.content.Context.USER_SERVICE, android.content.Context.RESTRICTIONS_SERVICE, android.content.Context.APP_OPS_SERVICE, android.content.Context.ROLE_SERVICE, android.content.Context.CAMERA_SERVICE, android.content.Context.PRINT_SERVICE, android.content.Context.CONSUMER_IR_SERVICE, android.content.Context.TV_INTERACTIVE_APP_SERVICE, android.content.Context.TV_INPUT_SERVICE, android.content.Context.USAGE_STATS_SERVICE, android.content.Context.MEDIA_SESSION_SERVICE, android.content.Context.MEDIA_COMMUNICATION_SERVICE, android.content.Context.BATTERY_SERVICE, android.content.Context.JOB_SCHEDULER_SERVICE, android.content.Context.PERSISTENT_DATA_BLOCK_SERVICE, android.content.Context.MEDIA_PROJECTION_SERVICE, android.content.Context.MIDI_SERVICE, android.content.Context.HARDWARE_PROPERTIES_SERVICE, android.content.Context.SHORTCUT_SERVICE, android.content.Context.SYSTEM_HEALTH_SERVICE, android.content.Context.COMPANION_DEVICE_SERVICE, android.content.Context.VIRTUAL_DEVICE_SERVICE, android.content.Context.CROSS_PROFILE_APPS_SERVICE, android.content.Context.LOCALE_SERVICE, android.content.Context.MEDIA_METRICS_SERVICE, android.content.Context.DISPLAY_HASH_SERVICE, android.content.Context.CREDENTIAL_SERVICE, android.content.Context.DEVICE_LOCK_SERVICE, android.content.Context.GRAMMATICAL_INFLECTION_SERVICE, android.content.Context.SECURITY_STATE_SERVICE, android.content.Context.CONTACT_KEYS_SERVICE}"></val>
        </annotation>
    </item>
    <item name="android.content.Context void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context void enforceCallingUriPermission(android.net.Uri, int, java.lang.String) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String) 5">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context void grantUriPermission(java.lang.String, android.net.Uri, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION, android.content.Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION, android.content.Intent.FLAG_GRANT_PREFIX_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context void revokeUriPermission(android.net.Uri, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context void revokeUriPermission(java.lang.String, android.net.Uri, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Context.BindServiceFlags android.content.Context.BindServiceFlags of(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.content.Context.BIND_AUTO_CREATE, android.content.Context.BIND_DEBUG_UNBIND, android.content.Context.BIND_NOT_FOREGROUND, android.content.Context.BIND_ABOVE_CLIENT, android.content.Context.BIND_ALLOW_OOM_MANAGEMENT, android.content.Context.BIND_WAIVE_PRIORITY, android.content.Context.BIND_IMPORTANT, android.content.Context.BIND_ADJUST_WITH_ACTIVITY, android.content.Context.BIND_NOT_PERCEPTIBLE, android.content.Context.BIND_ALLOW_ACTIVITY_STARTS, android.content.Context.BIND_INCLUDE_CAPABILITIES, android.content.Context.BIND_SHARED_ISOLATED_PROCESS, android.content.Context.BIND_PACKAGE_ISOLATED_PROCESS, android.content.Context.BIND_EXTERNAL_SERVICE_LONG}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.ContextWrapper android.content.Context createWindowContext(android.view.Display, int, android.os.Bundle) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING, android.view.WindowManager.LayoutParams.TYPE_DRAWN_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG, android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR, android.view.WindowManager.LayoutParams.TYPE_SEARCH_BAR, android.view.WindowManager.LayoutParams.TYPE_PHONE, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT, android.view.WindowManager.LayoutParams.TYPE_TOAST, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_PRIORITY_PHONE, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG, android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_WALLPAPER, android.view.WindowManager.LayoutParams.TYPE_PRIVATE_PRESENTATION, android.view.WindowManager.LayoutParams.TYPE_ACCESSIBILITY_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY}"></val>
        </annotation>
    </item>
    <item name="android.content.ContextWrapper android.content.Context createWindowContext(int, android.os.Bundle) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING, android.view.WindowManager.LayoutParams.TYPE_DRAWN_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG, android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR, android.view.WindowManager.LayoutParams.TYPE_SEARCH_BAR, android.view.WindowManager.LayoutParams.TYPE_PHONE, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT, android.view.WindowManager.LayoutParams.TYPE_TOAST, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_PRIORITY_PHONE, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG, android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_WALLPAPER, android.view.WindowManager.LayoutParams.TYPE_PRIVATE_PRESENTATION, android.view.WindowManager.LayoutParams.TYPE_ACCESSIBILITY_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY}"></val>
        </annotation>
    </item>
    <item name="android.content.Intent android.content.Intent addFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION, android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION, android.content.Intent.FLAG_GRANT_PREFIX_URI_PERMISSION, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_ACTIVITY_REQUIRE_NON_BROWSER, android.content.Intent.FLAG_ACTIVITY_REQUIRE_DEFAULT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Intent android.content.Intent parseUri(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.URI_ALLOW_UNSAFE, android.content.Intent.URI_ANDROID_APP_SCHEME, android.content.Intent.URI_INTENT_SCHEME}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Intent android.content.Intent setFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION, android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION, android.content.Intent.FLAG_GRANT_PREFIX_URI_PERMISSION, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_ACTIVITY_REQUIRE_NON_BROWSER, android.content.Intent.FLAG_ACTIVITY_REQUIRE_DEFAULT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Intent android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager, int) 1">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.content.pm.PackageManager.GET_META_DATA, android.content.pm.PackageManager.GET_SHARED_LIBRARY_FILES, android.content.pm.PackageManager.MATCH_ALL, android.content.pm.PackageManager.MATCH_DEFAULT_ONLY, android.content.pm.PackageManager.MATCH_DISABLED_COMPONENTS, android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_AUTO, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_AWARE, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_UNAWARE, android.content.pm.PackageManager.MATCH_SYSTEM_ONLY, android.content.pm.PackageManager.MATCH_UNINSTALLED_PACKAGES, android.content.pm.PackageManager.GET_DISABLED_COMPONENTS, android.content.pm.PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Intent int fillIn(android.content.Intent, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Intent java.lang.String toUri(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.URI_ALLOW_UNSAFE, android.content.Intent.URI_ANDROID_APP_SCHEME, android.content.Intent.URI_INTENT_SCHEME}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.Intent void removeFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION, android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION, android.content.Intent.FLAG_GRANT_PREFIX_URI_PERMISSION, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_ACTIVITY_REQUIRE_NON_BROWSER, android.content.Intent.FLAG_ACTIVITY_REQUIRE_DEFAULT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.UriRelativeFilter UriRelativeFilter(int, int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.UriRelativeFilter.PATH, android.content.UriRelativeFilter.QUERY, android.content.UriRelativeFilter.FRAGMENT}"></val>
        </annotation>
    </item>
    <item name="android.content.UriRelativeFilter UriRelativeFilter(int, int, java.lang.String) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.PatternMatcher.PATTERN_LITERAL, android.os.PatternMatcher.PATTERN_PREFIX, android.os.PatternMatcher.PATTERN_SIMPLE_GLOB, android.os.PatternMatcher.PATTERN_ADVANCED_GLOB, android.os.PatternMatcher.PATTERN_SUFFIX}"></val>
        </annotation>
    </item>
    <item name="android.content.UriRelativeFilterGroup UriRelativeFilterGroup(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.UriRelativeFilterGroup.ACTION_ALLOW, android.content.UriRelativeFilterGroup.ACTION_BLOCK}"></val>
        </annotation>
    </item>
    <item name="android.content.om.FabricatedOverlay void setResourceValue(java.lang.String, int, java.lang.String, java.lang.String) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.TypedValue.TYPE_STRING}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.ApplicationInfo java.lang.CharSequence getCategoryTitle(android.content.Context, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.ApplicationInfo.CATEGORY_UNDEFINED, android.content.pm.ApplicationInfo.CATEGORY_GAME, android.content.pm.ApplicationInfo.CATEGORY_AUDIO, android.content.pm.ApplicationInfo.CATEGORY_VIDEO, android.content.pm.ApplicationInfo.CATEGORY_IMAGE, android.content.pm.ApplicationInfo.CATEGORY_SOCIAL, android.content.pm.ApplicationInfo.CATEGORY_NEWS, android.content.pm.ApplicationInfo.CATEGORY_MAPS, android.content.pm.ApplicationInfo.CATEGORY_PRODUCTIVITY, android.content.pm.ApplicationInfo.CATEGORY_ACCESSIBILITY}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.Checksum Checksum(int, byte[]) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.Checksum.TYPE_WHOLE_MERKLE_ROOT_4K_SHA256, android.content.pm.Checksum.TYPE_WHOLE_MD5, android.content.pm.Checksum.TYPE_WHOLE_SHA1, android.content.pm.Checksum.TYPE_WHOLE_SHA256, android.content.pm.Checksum.TYPE_WHOLE_SHA512, android.content.pm.Checksum.TYPE_PARTIAL_MERKLE_ROOT_1M_SHA256, android.content.pm.Checksum.TYPE_PARTIAL_MERKLE_ROOT_1M_SHA512}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.LauncherApps android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String, int, android.os.UserHandle) 1">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.content.pm.PackageManager.GET_META_DATA, android.content.pm.PackageManager.GET_SHARED_LIBRARY_FILES, android.content.pm.PackageManager.MATCH_UNINSTALLED_PACKAGES, android.content.pm.PackageManager.MATCH_SYSTEM_ONLY, android.content.pm.PackageManager.MATCH_DISABLED_COMPONENTS, android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES, android.content.pm.PackageManager.MATCH_APEX, android.content.pm.PackageManager.MATCH_ARCHIVED_PACKAGES}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.LauncherApps.ShortcutQuery android.content.pm.LauncherApps.ShortcutQuery setQueryFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.LauncherApps.ShortcutQuery.FLAG_MATCH_DYNAMIC, android.content.pm.LauncherApps.ShortcutQuery.FLAG_MATCH_PINNED, android.content.pm.LauncherApps.ShortcutQuery.FLAG_MATCH_MANIFEST, android.content.pm.LauncherApps.ShortcutQuery.FLAG_MATCH_CACHED, android.content.pm.LauncherApps.ShortcutQuery.FLAG_MATCH_PINNED_BY_ANY_LAUNCHER, android.content.pm.LauncherApps.ShortcutQuery.FLAG_GET_KEY_FIELDS_ONLY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageInstaller void installExistingPackage(java.lang.String, int, android.content.IntentSender) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.INSTALL_REASON_UNKNOWN, android.content.pm.PackageManager.INSTALL_REASON_POLICY, android.content.pm.PackageManager.INSTALL_REASON_DEVICE_RESTORE, android.content.pm.PackageManager.INSTALL_REASON_DEVICE_SETUP, android.content.pm.PackageManager.INSTALL_REASON_USER}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageInstaller void reportUnarchivalStatus(int, int, long, android.app.PendingIntent) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageInstaller.UNARCHIVAL_OK, android.content.pm.PackageInstaller.UNARCHIVAL_ERROR_USER_ACTION_NEEDED, android.content.pm.PackageInstaller.UNARCHIVAL_ERROR_INSUFFICIENT_STORAGE, android.content.pm.PackageInstaller.UNARCHIVAL_ERROR_NO_CONNECTIVITY, android.content.pm.PackageInstaller.UNARCHIVAL_ERROR_INSTALLER_DISABLED, android.content.pm.PackageInstaller.UNARCHIVAL_ERROR_INSTALLER_UNINSTALLED, android.content.pm.PackageInstaller.UNARCHIVAL_GENERIC_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageInstaller.Session void requestChecksums(java.lang.String, int, java.util.List&lt;java.security.cert.Certificate&gt;, java.util.concurrent.Executor, android.content.pm.PackageManager.OnChecksumsReadyListener) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.Checksum.TYPE_WHOLE_MERKLE_ROOT_4K_SHA256, android.content.pm.Checksum.TYPE_WHOLE_MD5, android.content.pm.Checksum.TYPE_WHOLE_SHA1, android.content.pm.Checksum.TYPE_WHOLE_SHA256, android.content.pm.Checksum.TYPE_WHOLE_SHA512, android.content.pm.Checksum.TYPE_PARTIAL_MERKLE_ROOT_1M_SHA256, android.content.pm.Checksum.TYPE_PARTIAL_MERKLE_ROOT_1M_SHA512}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageInstaller.SessionParams android.content.pm.PackageInstaller.SessionParams setPermissionState(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageInstaller.SessionParams.PERMISSION_STATE_DEFAULT, android.content.pm.PackageInstaller.SessionParams.PERMISSION_STATE_GRANTED, android.content.pm.PackageInstaller.SessionParams.PERMISSION_STATE_DENIED}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageInstaller.SessionParams void setInstallReason(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.INSTALL_REASON_UNKNOWN, android.content.pm.PackageManager.INSTALL_REASON_POLICY, android.content.pm.PackageManager.INSTALL_REASON_DEVICE_RESTORE, android.content.pm.PackageManager.INSTALL_REASON_DEVICE_SETUP, android.content.pm.PackageManager.INSTALL_REASON_USER}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageInstaller.SessionParams void setInstallScenario(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.INSTALL_SCENARIO_DEFAULT, android.content.pm.PackageManager.INSTALL_SCENARIO_FAST, android.content.pm.PackageManager.INSTALL_SCENARIO_BULK, android.content.pm.PackageManager.INSTALL_SCENARIO_BULK_SECONDARY}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageInstaller.SessionParams void setPackageSource(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageInstaller.PACKAGE_SOURCE_UNSPECIFIED, android.content.pm.PackageInstaller.PACKAGE_SOURCE_STORE, android.content.pm.PackageInstaller.PACKAGE_SOURCE_LOCAL_FILE, android.content.pm.PackageInstaller.PACKAGE_SOURCE_DOWNLOADED_FILE, android.content.pm.PackageInstaller.PACKAGE_SOURCE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageInstaller.SessionParams void setRequireUserAction(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageInstaller.SessionParams.USER_ACTION_UNSPECIFIED, android.content.pm.PackageInstaller.SessionParams.USER_ACTION_REQUIRED, android.content.pm.PackageInstaller.SessionParams.USER_ACTION_NOT_REQUIRED}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.GET_META_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.GET_META_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager android.content.pm.PermissionInfo getPermissionInfo(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.GET_META_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager boolean addWhitelistedRestrictedPermission(java.lang.String, java.lang.String, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.FLAG_PERMISSION_WHITELIST_SYSTEM, android.content.pm.PackageManager.FLAG_PERMISSION_WHITELIST_INSTALLER, android.content.pm.PackageManager.FLAG_PERMISSION_WHITELIST_UPGRADE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager boolean hasSigningCertificate(int, byte[], int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.CERT_INPUT_RAW_X509, android.content.pm.PackageManager.CERT_INPUT_SHA256}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager boolean hasSigningCertificate(java.lang.String, byte[], int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.CERT_INPUT_RAW_X509, android.content.pm.PackageManager.CERT_INPUT_SHA256}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager boolean removeWhitelistedRestrictedPermission(java.lang.String, java.lang.String, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.FLAG_PERMISSION_WHITELIST_SYSTEM, android.content.pm.PackageManager.FLAG_PERMISSION_WHITELIST_INSTALLER, android.content.pm.PackageManager.FLAG_PERMISSION_WHITELIST_UPGRADE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager java.util.List&lt;android.content.pm.InstrumentationInfo&gt; queryInstrumentation(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.GET_META_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager java.util.List&lt;android.content.pm.ModuleInfo&gt; getInstalledModules(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.MATCH_ALL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager java.util.List&lt;android.content.pm.PermissionGroupInfo&gt; getAllPermissionGroups(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.GET_META_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager java.util.List&lt;android.content.pm.PermissionInfo&gt; queryPermissionsByGroup(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.GET_META_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager java.util.Set&lt;java.lang.String&gt; getWhitelistedRestrictedPermissions(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.FLAG_PERMISSION_WHITELIST_SYSTEM, android.content.pm.PackageManager.FLAG_PERMISSION_WHITELIST_INSTALLER, android.content.pm.PackageManager.FLAG_PERMISSION_WHITELIST_UPGRADE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager void requestChecksums(java.lang.String, boolean, int, java.util.List&lt;java.security.cert.Certificate&gt;, android.content.pm.PackageManager.OnChecksumsReadyListener) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.Checksum.TYPE_WHOLE_MERKLE_ROOT_4K_SHA256, android.content.pm.Checksum.TYPE_WHOLE_MD5, android.content.pm.Checksum.TYPE_WHOLE_SHA1, android.content.pm.Checksum.TYPE_WHOLE_SHA256, android.content.pm.Checksum.TYPE_WHOLE_SHA512, android.content.pm.Checksum.TYPE_PARTIAL_MERKLE_ROOT_1M_SHA256, android.content.pm.Checksum.TYPE_PARTIAL_MERKLE_ROOT_1M_SHA512}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager void setApplicationCategoryHint(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.ApplicationInfo.CATEGORY_UNDEFINED, android.content.pm.ApplicationInfo.CATEGORY_GAME, android.content.pm.ApplicationInfo.CATEGORY_AUDIO, android.content.pm.ApplicationInfo.CATEGORY_VIDEO, android.content.pm.ApplicationInfo.CATEGORY_IMAGE, android.content.pm.ApplicationInfo.CATEGORY_SOCIAL, android.content.pm.ApplicationInfo.CATEGORY_NEWS, android.content.pm.ApplicationInfo.CATEGORY_MAPS, android.content.pm.ApplicationInfo.CATEGORY_PRODUCTIVITY, android.content.pm.ApplicationInfo.CATEGORY_ACCESSIBILITY}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager void setApplicationEnabledSetting(java.lang.String, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DEFAULT, android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_ENABLED, android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED, android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER, android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager void setApplicationEnabledSetting(java.lang.String, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.DONT_KILL_APP, android.content.pm.PackageManager.SYNCHRONOUS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager void setComponentEnabledSetting(android.content.ComponentName, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DEFAULT, android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_ENABLED, android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED, android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER, android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager void setComponentEnabledSetting(android.content.ComponentName, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.DONT_KILL_APP, android.content.pm.PackageManager.SYNCHRONOUS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager.ApplicationInfoFlags android.content.pm.PackageManager.ApplicationInfoFlags of(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.content.pm.PackageManager.GET_META_DATA, android.content.pm.PackageManager.GET_SHARED_LIBRARY_FILES, android.content.pm.PackageManager.MATCH_UNINSTALLED_PACKAGES, android.content.pm.PackageManager.MATCH_SYSTEM_ONLY, android.content.pm.PackageManager.MATCH_DISABLED_COMPONENTS, android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES, android.content.pm.PackageManager.MATCH_APEX, android.content.pm.PackageManager.MATCH_ARCHIVED_PACKAGES}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager.ComponentEnabledSetting ComponentEnabledSetting(android.content.ComponentName, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DEFAULT, android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_ENABLED, android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED, android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER, android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED}"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager.ComponentEnabledSetting ComponentEnabledSetting(android.content.ComponentName, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.DONT_KILL_APP, android.content.pm.PackageManager.SYNCHRONOUS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager.ComponentInfoFlags android.content.pm.PackageManager.ComponentInfoFlags of(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.content.pm.PackageManager.GET_META_DATA, android.content.pm.PackageManager.GET_SHARED_LIBRARY_FILES, android.content.pm.PackageManager.MATCH_ALL, android.content.pm.PackageManager.MATCH_DEFAULT_ONLY, android.content.pm.PackageManager.MATCH_DISABLED_COMPONENTS, android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_AUTO, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_AWARE, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_UNAWARE, android.content.pm.PackageManager.MATCH_SYSTEM_ONLY, android.content.pm.PackageManager.MATCH_UNINSTALLED_PACKAGES, android.content.pm.PackageManager.GET_DISABLED_COMPONENTS, android.content.pm.PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager.PackageInfoFlags android.content.pm.PackageManager.PackageInfoFlags of(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.content.pm.PackageManager.GET_ACTIVITIES, android.content.pm.PackageManager.GET_CONFIGURATIONS, android.content.pm.PackageManager.GET_GIDS, android.content.pm.PackageManager.GET_INSTRUMENTATION, android.content.pm.PackageManager.GET_INTENT_FILTERS, android.content.pm.PackageManager.GET_META_DATA, android.content.pm.PackageManager.GET_PERMISSIONS, android.content.pm.PackageManager.GET_PROVIDERS, android.content.pm.PackageManager.GET_RECEIVERS, android.content.pm.PackageManager.GET_SERVICES, android.content.pm.PackageManager.GET_SHARED_LIBRARY_FILES, android.content.pm.PackageManager.GET_SIGNATURES, android.content.pm.PackageManager.GET_SIGNING_CERTIFICATES, android.content.pm.PackageManager.GET_URI_PERMISSION_PATTERNS, android.content.pm.PackageManager.MATCH_UNINSTALLED_PACKAGES, android.content.pm.PackageManager.MATCH_DISABLED_COMPONENTS, android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.MATCH_SYSTEM_ONLY, android.content.pm.PackageManager.MATCH_APEX, android.content.pm.PackageManager.MATCH_ARCHIVED_PACKAGES, android.content.pm.PackageManager.GET_DISABLED_COMPONENTS, android.content.pm.PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_AWARE, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_UNAWARE, android.content.pm.PackageManager.GET_ATTRIBUTIONS_LONG}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.PackageManager.ResolveInfoFlags android.content.pm.PackageManager.ResolveInfoFlags of(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.content.pm.PackageManager.GET_META_DATA, android.content.pm.PackageManager.GET_RESOLVED_FILTER, android.content.pm.PackageManager.GET_SHARED_LIBRARY_FILES, android.content.pm.PackageManager.MATCH_ALL, android.content.pm.PackageManager.MATCH_DISABLED_COMPONENTS, android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.MATCH_DEFAULT_ONLY, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_AUTO, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_AWARE, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_UNAWARE, android.content.pm.PackageManager.MATCH_SYSTEM_ONLY, android.content.pm.PackageManager.MATCH_UNINSTALLED_PACKAGES, android.content.pm.PackageManager.GET_DISABLED_COMPONENTS, android.content.pm.PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.ShortcutInfo boolean isExcludedFromSurfaces(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.ShortcutInfo.SURFACE_LAUNCHER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.pm.ShortcutManager java.util.List&lt;android.content.pm.ShortcutInfo&gt; getShortcuts(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.ShortcutManager.FLAG_MATCH_MANIFEST, android.content.pm.ShortcutManager.FLAG_MATCH_DYNAMIC, android.content.pm.ShortcutManager.FLAG_MATCH_PINNED, android.content.pm.ShortcutManager.FLAG_MATCH_CACHED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.res.Configuration boolean needNewResources(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.ActivityInfo.CONFIG_MCC, android.content.pm.ActivityInfo.CONFIG_MNC, android.content.pm.ActivityInfo.CONFIG_LOCALE, android.content.pm.ActivityInfo.CONFIG_TOUCHSCREEN, android.content.pm.ActivityInfo.CONFIG_KEYBOARD, android.content.pm.ActivityInfo.CONFIG_KEYBOARD_HIDDEN, android.content.pm.ActivityInfo.CONFIG_NAVIGATION, android.content.pm.ActivityInfo.CONFIG_ORIENTATION, android.content.pm.ActivityInfo.CONFIG_SCREEN_LAYOUT, android.content.pm.ActivityInfo.CONFIG_UI_MODE, android.content.pm.ActivityInfo.CONFIG_SCREEN_SIZE, android.content.pm.ActivityInfo.CONFIG_SMALLEST_SCREEN_SIZE, android.content.pm.ActivityInfo.CONFIG_DENSITY, android.content.pm.ActivityInfo.CONFIG_LAYOUT_DIRECTION, android.content.pm.ActivityInfo.CONFIG_COLOR_MODE, android.content.pm.ActivityInfo.CONFIG_FONT_SCALE, android.content.pm.ActivityInfo.CONFIG_GRAMMATICAL_GENDER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.content.res.Configuration boolean needNewResources(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.ActivityInfo.CONFIG_MCC, android.content.pm.ActivityInfo.CONFIG_MNC, android.content.pm.ActivityInfo.CONFIG_LOCALE, android.content.pm.ActivityInfo.CONFIG_TOUCHSCREEN, android.content.pm.ActivityInfo.CONFIG_KEYBOARD, android.content.pm.ActivityInfo.CONFIG_KEYBOARD_HIDDEN, android.content.pm.ActivityInfo.CONFIG_NAVIGATION, android.content.pm.ActivityInfo.CONFIG_ORIENTATION, android.content.pm.ActivityInfo.CONFIG_SCREEN_LAYOUT, android.content.pm.ActivityInfo.CONFIG_UI_MODE, android.content.pm.ActivityInfo.CONFIG_SCREEN_SIZE, android.content.pm.ActivityInfo.CONFIG_SMALLEST_SCREEN_SIZE, android.content.pm.ActivityInfo.CONFIG_DENSITY, android.content.pm.ActivityInfo.CONFIG_LAYOUT_DIRECTION, android.content.pm.ActivityInfo.CONFIG_COLOR_MODE, android.content.pm.ActivityInfo.CONFIG_FONT_SCALE, android.content.pm.ActivityInfo.CONFIG_GRAMMATICAL_GENDER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.database.ContentObserver void dispatchChange(boolean, android.net.Uri, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.ContentResolver.NOTIFY_SYNC_TO_NETWORK, android.content.ContentResolver.NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS, android.content.ContentResolver.NOTIFY_INSERT, android.content.ContentResolver.NOTIFY_UPDATE, android.content.ContentResolver.NOTIFY_DELETE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.database.ContentObserver void dispatchChange(boolean, java.util.Collection&lt;android.net.Uri&gt;, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.ContentResolver.NOTIFY_SYNC_TO_NETWORK, android.content.ContentResolver.NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS, android.content.ContentResolver.NOTIFY_INSERT, android.content.ContentResolver.NOTIFY_UPDATE, android.content.ContentResolver.NOTIFY_DELETE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.database.ContentObserver void onChange(boolean, android.net.Uri, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.ContentResolver.NOTIFY_SYNC_TO_NETWORK, android.content.ContentResolver.NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS, android.content.ContentResolver.NOTIFY_INSERT, android.content.ContentResolver.NOTIFY_UPDATE, android.content.ContentResolver.NOTIFY_DELETE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.database.ContentObserver void onChange(boolean, java.util.Collection&lt;android.net.Uri&gt;, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.ContentResolver.NOTIFY_SYNC_TO_NETWORK, android.content.ContentResolver.NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS, android.content.ContentResolver.NOTIFY_INSERT, android.content.ContentResolver.NOTIFY_UPDATE, android.content.ContentResolver.NOTIFY_DELETE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.database.sqlite.SQLiteDatabase android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.database.sqlite.SQLiteDatabase.OPEN_READWRITE, android.database.sqlite.SQLiteDatabase.OPEN_READONLY, android.database.sqlite.SQLiteDatabase.CREATE_IF_NECESSARY, android.database.sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS, android.database.sqlite.SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.database.sqlite.SQLiteDatabase android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, int, android.database.DatabaseErrorHandler) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.database.sqlite.SQLiteDatabase.OPEN_READWRITE, android.database.sqlite.SQLiteDatabase.OPEN_READONLY, android.database.sqlite.SQLiteDatabase.CREATE_IF_NECESSARY, android.database.sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS, android.database.sqlite.SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.database.sqlite.SQLiteDatabase.OpenParams.Builder android.database.sqlite.SQLiteDatabase.OpenParams.Builder addOpenFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.database.sqlite.SQLiteDatabase.OPEN_READWRITE, android.database.sqlite.SQLiteDatabase.OPEN_READONLY, android.database.sqlite.SQLiteDatabase.CREATE_IF_NECESSARY, android.database.sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS, android.database.sqlite.SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.database.sqlite.SQLiteDatabase.OpenParams.Builder android.database.sqlite.SQLiteDatabase.OpenParams.Builder removeOpenFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.database.sqlite.SQLiteDatabase.OPEN_READWRITE, android.database.sqlite.SQLiteDatabase.OPEN_READONLY, android.database.sqlite.SQLiteDatabase.CREATE_IF_NECESSARY, android.database.sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS, android.database.sqlite.SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.database.sqlite.SQLiteDatabase.OpenParams.Builder android.database.sqlite.SQLiteDatabase.OpenParams.Builder setJournalMode(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.database.sqlite.SQLiteDatabase.JOURNAL_MODE_WAL, android.database.sqlite.SQLiteDatabase.JOURNAL_MODE_PERSIST, android.database.sqlite.SQLiteDatabase.JOURNAL_MODE_TRUNCATE, android.database.sqlite.SQLiteDatabase.JOURNAL_MODE_MEMORY, android.database.sqlite.SQLiteDatabase.JOURNAL_MODE_DELETE, android.database.sqlite.SQLiteDatabase.JOURNAL_MODE_OFF}"></val>
        </annotation>
    </item>
    <item name="android.database.sqlite.SQLiteDatabase.OpenParams.Builder android.database.sqlite.SQLiteDatabase.OpenParams.Builder setOpenFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.database.sqlite.SQLiteDatabase.OPEN_READWRITE, android.database.sqlite.SQLiteDatabase.OPEN_READONLY, android.database.sqlite.SQLiteDatabase.CREATE_IF_NECESSARY, android.database.sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS, android.database.sqlite.SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.database.sqlite.SQLiteDatabase.OpenParams.Builder android.database.sqlite.SQLiteDatabase.OpenParams.Builder setSynchronousMode(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.database.sqlite.SQLiteDatabase.SYNC_MODE_EXTRA, android.database.sqlite.SQLiteDatabase.SYNC_MODE_FULL, android.database.sqlite.SQLiteDatabase.SYNC_MODE_NORMAL, android.database.sqlite.SQLiteDatabase.SYNC_MODE_OFF}"></val>
        </annotation>
    </item>
    <item name="android.graphics.BitmapShader void setFilterMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.BitmapShader.FILTER_MODE_DEFAULT, android.graphics.BitmapShader.FILTER_MODE_NEAREST, android.graphics.BitmapShader.FILTER_MODE_LINEAR}"></val>
        </annotation>
    </item>
    <item name="android.graphics.Canvas int saveLayer(android.graphics.RectF, android.graphics.Paint, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Canvas.ALL_SAVE_FLAG}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.graphics.Canvas int saveLayer(float, float, float, float, android.graphics.Paint, int) 5">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Canvas.ALL_SAVE_FLAG}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.graphics.Canvas int saveLayerAlpha(android.graphics.RectF, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Canvas.ALL_SAVE_FLAG}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.graphics.Canvas int saveLayerAlpha(float, float, float, float, int, int) 5">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Canvas.ALL_SAVE_FLAG}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.graphics.ColorSpace android.graphics.ColorSpace getFromDataSpace(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.DataSpace.DATASPACE_UNKNOWN, android.hardware.DataSpace.DATASPACE_SCRGB_LINEAR, android.hardware.DataSpace.DATASPACE_SRGB, android.hardware.DataSpace.DATASPACE_SCRGB, android.hardware.DataSpace.DATASPACE_DISPLAY_P3, android.hardware.DataSpace.DATASPACE_BT2020_HLG, android.hardware.DataSpace.DATASPACE_BT2020_PQ, android.hardware.DataSpace.DATASPACE_ADOBE_RGB, android.hardware.DataSpace.DATASPACE_JFIF, android.hardware.DataSpace.DATASPACE_BT601_625, android.hardware.DataSpace.DATASPACE_BT601_525, android.hardware.DataSpace.DATASPACE_BT2020, android.hardware.DataSpace.DATASPACE_BT709, android.hardware.DataSpace.DATASPACE_DCI_P3, android.hardware.DataSpace.DATASPACE_SRGB_LINEAR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.graphics.HardwareBufferRenderer.RenderRequest android.graphics.HardwareBufferRenderer.RenderRequest setBufferTransform(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.SurfaceControl.BUFFER_TRANSFORM_IDENTITY, android.view.SurfaceControl.BUFFER_TRANSFORM_MIRROR_HORIZONTAL, android.view.SurfaceControl.BUFFER_TRANSFORM_MIRROR_VERTICAL, android.view.SurfaceControl.BUFFER_TRANSFORM_ROTATE_90, android.view.SurfaceControl.BUFFER_TRANSFORM_ROTATE_180, android.view.SurfaceControl.BUFFER_TRANSFORM_ROTATE_270}"></val>
        </annotation>
    </item>
    <item name="android.graphics.ImageDecoder void setAllocator(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageDecoder.ALLOCATOR_DEFAULT, android.graphics.ImageDecoder.ALLOCATOR_SOFTWARE, android.graphics.ImageDecoder.ALLOCATOR_SHARED_MEMORY, android.graphics.ImageDecoder.ALLOCATOR_HARDWARE}"></val>
        </annotation>
    </item>
    <item name="android.graphics.ImageDecoder void setMemorySizePolicy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageDecoder.MEMORY_POLICY_DEFAULT, android.graphics.ImageDecoder.MEMORY_POLICY_LOW_RAM}"></val>
        </annotation>
    </item>
    <item name="android.graphics.ImageFormat int getBitsPerPixel(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.graphics.Mesh Mesh(android.graphics.MeshSpecification, int, java.nio.Buffer, int, android.graphics.RectF) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Mesh.TRIANGLES, android.graphics.Mesh.TRIANGLE_STRIP}"></val>
        </annotation>
    </item>
    <item name="android.graphics.Mesh Mesh(android.graphics.MeshSpecification, int, java.nio.Buffer, int, java.nio.ShortBuffer, android.graphics.RectF) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Mesh.TRIANGLES, android.graphics.Mesh.TRIANGLE_STRIP}"></val>
        </annotation>
    </item>
    <item name="android.graphics.MeshSpecification android.graphics.MeshSpecification make(android.graphics.MeshSpecification.Attribute[], int, android.graphics.MeshSpecification.Varying[], java.lang.String, java.lang.String, android.graphics.ColorSpace, int) 6">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.MeshSpecification.ALPHA_TYPE_UNKNOWN, android.graphics.MeshSpecification.ALPHA_TYPE_OPAQUE, android.graphics.MeshSpecification.ALPHA_TYPE_PREMULTIPLIED, android.graphics.MeshSpecification.ALPHA_TYPE_UNPREMULTIPLIED}"></val>
        </annotation>
    </item>
    <item name="android.graphics.MeshSpecification.Attribute Attribute(int, int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.MeshSpecification.TYPE_FLOAT, android.graphics.MeshSpecification.TYPE_FLOAT2, android.graphics.MeshSpecification.TYPE_FLOAT3, android.graphics.MeshSpecification.TYPE_FLOAT4, android.graphics.MeshSpecification.TYPE_UBYTE4}"></val>
        </annotation>
    </item>
    <item name="android.graphics.MeshSpecification.Varying Varying(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.MeshSpecification.TYPE_FLOAT, android.graphics.MeshSpecification.TYPE_FLOAT2, android.graphics.MeshSpecification.TYPE_FLOAT3, android.graphics.MeshSpecification.TYPE_FLOAT4, android.graphics.MeshSpecification.TYPE_UBYTE4}"></val>
        </annotation>
    </item>
    <item name="android.graphics.Paint int getTextRunCursor(char[], int, int, boolean, int, int) 5">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Paint.CURSOR_AFTER, android.graphics.Paint.CURSOR_AT_OR_AFTER, android.graphics.Paint.CURSOR_BEFORE, android.graphics.Paint.CURSOR_AT_OR_BEFORE}"></val>
        </annotation>
    </item>
    <item name="android.graphics.Paint int getTextRunCursor(java.lang.CharSequence, int, int, boolean, int, int) 5">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Paint.CURSOR_AFTER, android.graphics.Paint.CURSOR_AT_OR_AFTER, android.graphics.Paint.CURSOR_BEFORE, android.graphics.Paint.CURSOR_AT_OR_BEFORE}"></val>
        </annotation>
    </item>
    <item name="android.graphics.Paint void setEndHyphenEdit(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Paint.END_HYPHEN_EDIT_NO_EDIT, android.graphics.Paint.END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN, android.graphics.Paint.END_HYPHEN_EDIT_INSERT_HYPHEN, android.graphics.Paint.END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN, android.graphics.Paint.END_HYPHEN_EDIT_INSERT_MAQAF, android.graphics.Paint.END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN, android.graphics.Paint.END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN}"></val>
        </annotation>
    </item>
    <item name="android.graphics.Paint void setFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Paint.ANTI_ALIAS_FLAG, android.graphics.Paint.FILTER_BITMAP_FLAG, android.graphics.Paint.DITHER_FLAG, android.graphics.Paint.UNDERLINE_TEXT_FLAG, android.graphics.Paint.STRIKE_THRU_TEXT_FLAG, android.graphics.Paint.FAKE_BOLD_TEXT_FLAG, android.graphics.Paint.LINEAR_TEXT_FLAG, android.graphics.Paint.SUBPIXEL_TEXT_FLAG, android.graphics.Paint.EMBEDDED_BITMAP_TEXT_FLAG, android.graphics.Paint.TEXT_RUN_FLAG_LEFT_EDGE, android.graphics.Paint.TEXT_RUN_FLAG_RIGHT_EDGE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.graphics.Paint void setStartHyphenEdit(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Paint.START_HYPHEN_EDIT_NO_EDIT, android.graphics.Paint.START_HYPHEN_EDIT_INSERT_HYPHEN, android.graphics.Paint.START_HYPHEN_EDIT_INSERT_ZWJ}"></val>
        </annotation>
    </item>
    <item name="android.graphics.PixelFormat boolean formatHasAlpha(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGBA_F16, android.graphics.PixelFormat.RGBA_1010102, android.graphics.PixelFormat.RGB_888, android.graphics.PixelFormat.RGB_565}"></val>
        </annotation>
    </item>
    <item name="android.graphics.PixelFormat void getPixelFormatInfo(int, android.graphics.PixelFormat) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGBA_F16, android.graphics.PixelFormat.RGBA_1010102, android.graphics.PixelFormat.RGB_888, android.graphics.PixelFormat.RGB_565}"></val>
        </annotation>
    </item>
    <item name="android.graphics.Typeface android.graphics.Typeface create(android.graphics.Typeface, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Typeface.NORMAL, android.graphics.Typeface.BOLD, android.graphics.Typeface.ITALIC, android.graphics.Typeface.BOLD_ITALIC}"></val>
        </annotation>
    </item>
    <item name="android.graphics.Typeface android.graphics.Typeface create(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Typeface.NORMAL, android.graphics.Typeface.BOLD, android.graphics.Typeface.ITALIC, android.graphics.Typeface.BOLD_ITALIC}"></val>
        </annotation>
    </item>
    <item name="android.graphics.Typeface android.graphics.Typeface defaultFromStyle(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Typeface.NORMAL, android.graphics.Typeface.BOLD, android.graphics.Typeface.ITALIC, android.graphics.Typeface.BOLD_ITALIC}"></val>
        </annotation>
    </item>
    <item name="android.graphics.drawable.AnimatedVectorDrawable boolean onLayoutDirectionChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}"></val>
        </annotation>
    </item>
    <item name="android.graphics.drawable.Drawable boolean onLayoutDirectionChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}"></val>
        </annotation>
    </item>
    <item name="android.graphics.drawable.Drawable boolean setLayoutDirection(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}"></val>
        </annotation>
    </item>
    <item name="android.graphics.drawable.Drawable int resolveOpacity(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.PixelFormat.UNKNOWN, android.graphics.PixelFormat.TRANSLUCENT, android.graphics.PixelFormat.TRANSPARENT, android.graphics.PixelFormat.OPAQUE}"></val>
        </annotation>
    </item>
    <item name="android.graphics.drawable.Drawable int resolveOpacity(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.PixelFormat.UNKNOWN, android.graphics.PixelFormat.TRANSLUCENT, android.graphics.PixelFormat.TRANSPARENT, android.graphics.PixelFormat.OPAQUE}"></val>
        </annotation>
    </item>
    <item name="android.graphics.drawable.Drawable void setChangingConfigurations(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.ActivityInfo.CONFIG_MCC, android.content.pm.ActivityInfo.CONFIG_MNC, android.content.pm.ActivityInfo.CONFIG_LOCALE, android.content.pm.ActivityInfo.CONFIG_TOUCHSCREEN, android.content.pm.ActivityInfo.CONFIG_KEYBOARD, android.content.pm.ActivityInfo.CONFIG_KEYBOARD_HIDDEN, android.content.pm.ActivityInfo.CONFIG_NAVIGATION, android.content.pm.ActivityInfo.CONFIG_ORIENTATION, android.content.pm.ActivityInfo.CONFIG_SCREEN_LAYOUT, android.content.pm.ActivityInfo.CONFIG_UI_MODE, android.content.pm.ActivityInfo.CONFIG_SCREEN_SIZE, android.content.pm.ActivityInfo.CONFIG_SMALLEST_SCREEN_SIZE, android.content.pm.ActivityInfo.CONFIG_DENSITY, android.content.pm.ActivityInfo.CONFIG_LAYOUT_DIRECTION, android.content.pm.ActivityInfo.CONFIG_COLOR_MODE, android.content.pm.ActivityInfo.CONFIG_FONT_SCALE, android.content.pm.ActivityInfo.CONFIG_GRAMMATICAL_GENDER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.graphics.drawable.DrawableContainer boolean onLayoutDirectionChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}"></val>
        </annotation>
    </item>
    <item name="android.graphics.drawable.DrawableWrapper boolean onLayoutDirectionChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}"></val>
        </annotation>
    </item>
    <item name="android.graphics.drawable.GradientDrawable void setGradientType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.drawable.GradientDrawable.LINEAR_GRADIENT, android.graphics.drawable.GradientDrawable.RADIAL_GRADIENT, android.graphics.drawable.GradientDrawable.SWEEP_GRADIENT}"></val>
        </annotation>
    </item>
    <item name="android.graphics.drawable.GradientDrawable void setShape(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.drawable.GradientDrawable.RECTANGLE, android.graphics.drawable.GradientDrawable.OVAL, android.graphics.drawable.GradientDrawable.LINE, android.graphics.drawable.GradientDrawable.RING}"></val>
        </annotation>
    </item>
    <item name="android.graphics.drawable.LayerDrawable boolean onLayoutDirectionChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}"></val>
        </annotation>
    </item>
    <item name="android.graphics.fonts.Font.Builder android.graphics.fonts.Font.Builder setSlant(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.fonts.FontStyle.FONT_SLANT_UPRIGHT, android.graphics.fonts.FontStyle.FONT_SLANT_ITALIC}"></val>
        </annotation>
    </item>
    <item name="android.graphics.fonts.FontStyle FontStyle(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.fonts.FontStyle.FONT_SLANT_UPRIGHT, android.graphics.fonts.FontStyle.FONT_SLANT_ITALIC}"></val>
        </annotation>
    </item>
    <item name="android.graphics.pdf.PdfRenderer.Page void render(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Matrix, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.pdf.PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY, android.graphics.pdf.PdfRenderer.Page.RENDER_MODE_FOR_PRINT}"></val>
        </annotation>
    </item>
    <item name="android.graphics.pdf.PdfRendererPreV.Page java.util.List&lt;android.graphics.pdf.models.FormWidgetInfo&gt; getFormWidgetInfos(int[]) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_UNKNOWN, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_PUSHBUTTON, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_CHECKBOX, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_RADIOBUTTON, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_COMBOBOX, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_LISTBOX, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_TEXTFIELD, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_SIGNATURE}"></val>
        </annotation>
    </item>
    <item name="android.graphics.pdf.RenderParams.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.pdf.RenderParams.RENDER_MODE_FOR_DISPLAY, android.graphics.pdf.RenderParams.RENDER_MODE_FOR_PRINT}"></val>
        </annotation>
    </item>
    <item name="android.graphics.pdf.RenderParams.Builder android.graphics.pdf.RenderParams.Builder setRenderFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.pdf.RenderParams.FLAG_RENDER_TEXT_ANNOTATIONS, android.graphics.pdf.RenderParams.FLAG_RENDER_HIGHLIGHT_ANNOTATIONS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.graphics.pdf.RenderParams.Builder android.graphics.pdf.RenderParams.Builder setRenderFlags(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.pdf.RenderParams.FLAG_RENDER_TEXT_ANNOTATIONS, android.graphics.pdf.RenderParams.FLAG_RENDER_HIGHLIGHT_ANNOTATIONS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.graphics.pdf.RenderParams.Builder android.graphics.pdf.RenderParams.Builder setRenderFlags(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.pdf.RenderParams.FLAG_RENDER_TEXT_ANNOTATIONS, android.graphics.pdf.RenderParams.FLAG_RENDER_HIGHLIGHT_ANNOTATIONS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.graphics.pdf.models.FormEditRecord.Builder Builder(int, int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.pdf.models.FormEditRecord.EDIT_TYPE_CLICK, android.graphics.pdf.models.FormEditRecord.EDIT_TYPE_SET_INDICES, android.graphics.pdf.models.FormEditRecord.EDIT_TYPE_SET_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.graphics.pdf.models.FormWidgetInfo.Builder Builder(int, int, android.graphics.Rect, java.lang.String, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_UNKNOWN, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_PUSHBUTTON, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_CHECKBOX, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_RADIOBUTTON, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_COMBOBOX, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_LISTBOX, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_TEXTFIELD, android.graphics.pdf.models.FormWidgetInfo.WIDGET_TYPE_SIGNATURE}"></val>
        </annotation>
    </item>
    <item name="android.graphics.text.LineBreakConfig.Builder android.graphics.text.LineBreakConfig.Builder setHyphenation(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreakConfig.HYPHENATION_UNSPECIFIED, android.graphics.text.LineBreakConfig.HYPHENATION_ENABLED, android.graphics.text.LineBreakConfig.HYPHENATION_DISABLED}"></val>
        </annotation>
    </item>
    <item name="android.graphics.text.LineBreakConfig.Builder android.graphics.text.LineBreakConfig.Builder setLineBreakStyle(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_NONE, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_LOOSE, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_NORMAL, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_STRICT, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_UNSPECIFIED, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_NO_BREAK, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_AUTO}"></val>
        </annotation>
    </item>
    <item name="android.graphics.text.LineBreakConfig.Builder android.graphics.text.LineBreakConfig.Builder setLineBreakWordStyle(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreakConfig.LINE_BREAK_WORD_STYLE_NONE, android.graphics.text.LineBreakConfig.LINE_BREAK_WORD_STYLE_PHRASE, android.graphics.text.LineBreakConfig.LINE_BREAK_WORD_STYLE_UNSPECIFIED, android.graphics.text.LineBreakConfig.LINE_BREAK_WORD_STYLE_AUTO}"></val>
        </annotation>
    </item>
    <item name="android.graphics.text.LineBreaker.Builder android.graphics.text.LineBreaker.Builder setBreakStrategy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreaker.BREAK_STRATEGY_SIMPLE, android.graphics.text.LineBreaker.BREAK_STRATEGY_HIGH_QUALITY, android.graphics.text.LineBreaker.BREAK_STRATEGY_BALANCED}"></val>
        </annotation>
    </item>
    <item name="android.graphics.text.LineBreaker.Builder android.graphics.text.LineBreaker.Builder setHyphenationFrequency(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreaker.HYPHENATION_FREQUENCY_NORMAL, android.graphics.text.LineBreaker.HYPHENATION_FREQUENCY_FULL, android.graphics.text.LineBreaker.HYPHENATION_FREQUENCY_NONE}"></val>
        </annotation>
    </item>
    <item name="android.graphics.text.LineBreaker.Builder android.graphics.text.LineBreaker.Builder setJustificationMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreaker.JUSTIFICATION_MODE_NONE, android.graphics.text.LineBreaker.JUSTIFICATION_MODE_INTER_WORD, android.graphics.text.LineBreaker.JUSTIFICATION_MODE_INTER_CHARACTER}"></val>
        </annotation>
    </item>
    <item name="android.graphics.text.MeasuredText.Builder android.graphics.text.MeasuredText.Builder setComputeHyphenation(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.MeasuredText.Builder.HYPHENATION_MODE_NONE, android.graphics.text.MeasuredText.Builder.HYPHENATION_MODE_NORMAL, android.graphics.text.MeasuredText.Builder.HYPHENATION_MODE_FAST}"></val>
        </annotation>
    </item>
    <item name="android.hardware.DataSpace int getRange(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.DataSpace.DATASPACE_UNKNOWN, android.hardware.DataSpace.DATASPACE_SCRGB_LINEAR, android.hardware.DataSpace.DATASPACE_SRGB, android.hardware.DataSpace.DATASPACE_SCRGB, android.hardware.DataSpace.DATASPACE_DISPLAY_P3, android.hardware.DataSpace.DATASPACE_BT2020_HLG, android.hardware.DataSpace.DATASPACE_BT2020_PQ, android.hardware.DataSpace.DATASPACE_ADOBE_RGB, android.hardware.DataSpace.DATASPACE_JFIF, android.hardware.DataSpace.DATASPACE_BT601_625, android.hardware.DataSpace.DATASPACE_BT601_525, android.hardware.DataSpace.DATASPACE_BT2020, android.hardware.DataSpace.DATASPACE_BT709, android.hardware.DataSpace.DATASPACE_DCI_P3, android.hardware.DataSpace.DATASPACE_SRGB_LINEAR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.DataSpace int getStandard(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.DataSpace.DATASPACE_UNKNOWN, android.hardware.DataSpace.DATASPACE_SCRGB_LINEAR, android.hardware.DataSpace.DATASPACE_SRGB, android.hardware.DataSpace.DATASPACE_SCRGB, android.hardware.DataSpace.DATASPACE_DISPLAY_P3, android.hardware.DataSpace.DATASPACE_BT2020_HLG, android.hardware.DataSpace.DATASPACE_BT2020_PQ, android.hardware.DataSpace.DATASPACE_ADOBE_RGB, android.hardware.DataSpace.DATASPACE_JFIF, android.hardware.DataSpace.DATASPACE_BT601_625, android.hardware.DataSpace.DATASPACE_BT601_525, android.hardware.DataSpace.DATASPACE_BT2020, android.hardware.DataSpace.DATASPACE_BT709, android.hardware.DataSpace.DATASPACE_DCI_P3, android.hardware.DataSpace.DATASPACE_SRGB_LINEAR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.DataSpace int getTransfer(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.DataSpace.DATASPACE_UNKNOWN, android.hardware.DataSpace.DATASPACE_SCRGB_LINEAR, android.hardware.DataSpace.DATASPACE_SRGB, android.hardware.DataSpace.DATASPACE_SCRGB, android.hardware.DataSpace.DATASPACE_DISPLAY_P3, android.hardware.DataSpace.DATASPACE_BT2020_HLG, android.hardware.DataSpace.DATASPACE_BT2020_PQ, android.hardware.DataSpace.DATASPACE_ADOBE_RGB, android.hardware.DataSpace.DATASPACE_JFIF, android.hardware.DataSpace.DATASPACE_BT601_625, android.hardware.DataSpace.DATASPACE_BT601_525, android.hardware.DataSpace.DATASPACE_BT2020, android.hardware.DataSpace.DATASPACE_BT709, android.hardware.DataSpace.DATASPACE_DCI_P3, android.hardware.DataSpace.DATASPACE_SRGB_LINEAR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.DataSpace int pack(int, int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.DataSpace.STANDARD_UNSPECIFIED, android.hardware.DataSpace.STANDARD_BT709, android.hardware.DataSpace.STANDARD_BT601_625, android.hardware.DataSpace.STANDARD_BT601_625_UNADJUSTED, android.hardware.DataSpace.STANDARD_BT601_525, android.hardware.DataSpace.STANDARD_BT601_525_UNADJUSTED, android.hardware.DataSpace.STANDARD_BT2020, android.hardware.DataSpace.STANDARD_BT2020_CONSTANT_LUMINANCE, android.hardware.DataSpace.STANDARD_BT470M, android.hardware.DataSpace.STANDARD_FILM, android.hardware.DataSpace.STANDARD_DCI_P3, android.hardware.DataSpace.STANDARD_ADOBE_RGB}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.DataSpace int pack(int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.DataSpace.TRANSFER_UNSPECIFIED, android.hardware.DataSpace.TRANSFER_LINEAR, android.hardware.DataSpace.TRANSFER_SRGB, android.hardware.DataSpace.TRANSFER_SMPTE_170M, android.hardware.DataSpace.TRANSFER_GAMMA2_2, android.hardware.DataSpace.TRANSFER_GAMMA2_6, android.hardware.DataSpace.TRANSFER_GAMMA2_8, android.hardware.DataSpace.TRANSFER_ST2084, android.hardware.DataSpace.TRANSFER_HLG}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.DataSpace int pack(int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.DataSpace.RANGE_UNSPECIFIED, android.hardware.DataSpace.RANGE_FULL, android.hardware.DataSpace.RANGE_LIMITED, android.hardware.DataSpace.RANGE_EXTENDED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.HardwareBuffer android.hardware.HardwareBuffer create(int, int, int, int, long) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.HardwareBuffer.RGBA_8888, android.hardware.HardwareBuffer.RGBA_FP16, android.hardware.HardwareBuffer.RGBA_1010102, android.hardware.HardwareBuffer.RGBX_8888, android.hardware.HardwareBuffer.RGB_888, android.hardware.HardwareBuffer.RGB_565, android.hardware.HardwareBuffer.BLOB, android.hardware.HardwareBuffer.YCBCR_420_888, android.hardware.HardwareBuffer.D_16, android.hardware.HardwareBuffer.D_24, android.hardware.HardwareBuffer.DS_24UI8, android.hardware.HardwareBuffer.D_FP32, android.hardware.HardwareBuffer.DS_FP32UI8, android.hardware.HardwareBuffer.S_UI8, android.hardware.HardwareBuffer.YCBCR_P010, android.hardware.HardwareBuffer.R_8, android.hardware.HardwareBuffer.R_16, android.hardware.HardwareBuffer.RG_1616, android.hardware.HardwareBuffer.RGBA_10101010}"></val>
        </annotation>
    </item>
    <item name="android.hardware.HardwareBuffer android.hardware.HardwareBuffer create(int, int, int, int, long) 4">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.HardwareBuffer.USAGE_CPU_READ_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_READ_OFTEN, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_OFTEN, android.hardware.HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE, android.hardware.HardwareBuffer.USAGE_GPU_COLOR_OUTPUT, android.hardware.HardwareBuffer.USAGE_COMPOSER_OVERLAY, android.hardware.HardwareBuffer.USAGE_PROTECTED_CONTENT, android.hardware.HardwareBuffer.USAGE_VIDEO_ENCODE, android.hardware.HardwareBuffer.USAGE_GPU_DATA_BUFFER, android.hardware.HardwareBuffer.USAGE_SENSOR_DIRECT_DATA, android.hardware.HardwareBuffer.USAGE_GPU_CUBE_MAP, android.hardware.HardwareBuffer.USAGE_GPU_MIPMAP_COMPLETE, android.hardware.HardwareBuffer.USAGE_FRONT_BUFFER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.HardwareBuffer boolean isSupported(int, int, int, int, long) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.HardwareBuffer.RGBA_8888, android.hardware.HardwareBuffer.RGBA_FP16, android.hardware.HardwareBuffer.RGBA_1010102, android.hardware.HardwareBuffer.RGBX_8888, android.hardware.HardwareBuffer.RGB_888, android.hardware.HardwareBuffer.RGB_565, android.hardware.HardwareBuffer.BLOB, android.hardware.HardwareBuffer.YCBCR_420_888, android.hardware.HardwareBuffer.D_16, android.hardware.HardwareBuffer.D_24, android.hardware.HardwareBuffer.DS_24UI8, android.hardware.HardwareBuffer.D_FP32, android.hardware.HardwareBuffer.DS_FP32UI8, android.hardware.HardwareBuffer.S_UI8, android.hardware.HardwareBuffer.YCBCR_P010, android.hardware.HardwareBuffer.R_8, android.hardware.HardwareBuffer.R_16, android.hardware.HardwareBuffer.RG_1616, android.hardware.HardwareBuffer.RGBA_10101010}"></val>
        </annotation>
    </item>
    <item name="android.hardware.HardwareBuffer boolean isSupported(int, int, int, int, long) 4">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.HardwareBuffer.USAGE_CPU_READ_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_READ_OFTEN, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_OFTEN, android.hardware.HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE, android.hardware.HardwareBuffer.USAGE_GPU_COLOR_OUTPUT, android.hardware.HardwareBuffer.USAGE_COMPOSER_OVERLAY, android.hardware.HardwareBuffer.USAGE_PROTECTED_CONTENT, android.hardware.HardwareBuffer.USAGE_VIDEO_ENCODE, android.hardware.HardwareBuffer.USAGE_GPU_DATA_BUFFER, android.hardware.HardwareBuffer.USAGE_SENSOR_DIRECT_DATA, android.hardware.HardwareBuffer.USAGE_GPU_CUBE_MAP, android.hardware.HardwareBuffer.USAGE_GPU_MIPMAP_COMPLETE, android.hardware.HardwareBuffer.USAGE_FRONT_BUFFER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.OverlayProperties boolean isCombinationSupported(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.DataSpace.DATASPACE_UNKNOWN, android.hardware.DataSpace.DATASPACE_SCRGB_LINEAR, android.hardware.DataSpace.DATASPACE_SRGB, android.hardware.DataSpace.DATASPACE_SCRGB, android.hardware.DataSpace.DATASPACE_DISPLAY_P3, android.hardware.DataSpace.DATASPACE_BT2020_HLG, android.hardware.DataSpace.DATASPACE_BT2020_PQ, android.hardware.DataSpace.DATASPACE_ADOBE_RGB, android.hardware.DataSpace.DATASPACE_JFIF, android.hardware.DataSpace.DATASPACE_BT601_625, android.hardware.DataSpace.DATASPACE_BT601_525, android.hardware.DataSpace.DATASPACE_BT2020, android.hardware.DataSpace.DATASPACE_BT709, android.hardware.DataSpace.DATASPACE_DCI_P3, android.hardware.DataSpace.DATASPACE_SRGB_LINEAR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.OverlayProperties boolean isCombinationSupported(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.HardwareBuffer.RGBA_8888, android.hardware.HardwareBuffer.RGBA_FP16, android.hardware.HardwareBuffer.RGBA_1010102, android.hardware.HardwareBuffer.RGBX_8888, android.hardware.HardwareBuffer.RGB_888, android.hardware.HardwareBuffer.RGB_565, android.hardware.HardwareBuffer.BLOB, android.hardware.HardwareBuffer.YCBCR_420_888, android.hardware.HardwareBuffer.D_16, android.hardware.HardwareBuffer.D_24, android.hardware.HardwareBuffer.DS_24UI8, android.hardware.HardwareBuffer.D_FP32, android.hardware.HardwareBuffer.DS_FP32UI8, android.hardware.HardwareBuffer.S_UI8, android.hardware.HardwareBuffer.YCBCR_P010, android.hardware.HardwareBuffer.R_8, android.hardware.HardwareBuffer.R_16, android.hardware.HardwareBuffer.RG_1616, android.hardware.HardwareBuffer.RGBA_10101010}"></val>
        </annotation>
    </item>
    <item name="android.hardware.Sensor boolean isDirectChannelTypeSupported(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.SensorDirectChannel.TYPE_MEMORY_FILE, android.hardware.SensorDirectChannel.TYPE_HARDWARE_BUFFER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.SensorDirectChannel int configure(android.hardware.Sensor, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.SensorDirectChannel.RATE_STOP, android.hardware.SensorDirectChannel.RATE_NORMAL, android.hardware.SensorDirectChannel.RATE_FAST, android.hardware.SensorDirectChannel.RATE_VERY_FAST}"></val>
        </annotation>
    </item>
    <item name="android.hardware.SensorPrivacyManager boolean supportsSensorToggle(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.SensorPrivacyManager.Sensors.MICROPHONE, android.hardware.SensorPrivacyManager.Sensors.CAMERA}"></val>
        </annotation>
    </item>
    <item name="android.hardware.SensorPrivacyManager boolean supportsSensorToggle(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.SensorPrivacyManager.TOGGLE_TYPE_SOFTWARE, android.hardware.SensorPrivacyManager.TOGGLE_TYPE_HARDWARE}"></val>
        </annotation>
    </item>
    <item name="android.hardware.SensorPrivacyManager boolean supportsSensorToggle(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.SensorPrivacyManager.Sensors.MICROPHONE, android.hardware.SensorPrivacyManager.Sensors.CAMERA}"></val>
        </annotation>
    </item>
    <item name="android.hardware.biometrics.BiometricManager android.hardware.biometrics.BiometricManager.Strings getStrings(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.biometrics.BiometricManager.Authenticators.BIOMETRIC_STRONG, android.hardware.biometrics.BiometricManager.Authenticators.BIOMETRIC_WEAK, android.hardware.biometrics.BiometricManager.Authenticators.DEVICE_CREDENTIAL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.biometrics.BiometricManager int canAuthenticate(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.biometrics.BiometricManager.Authenticators.BIOMETRIC_STRONG, android.hardware.biometrics.BiometricManager.Authenticators.BIOMETRIC_WEAK, android.hardware.biometrics.BiometricManager.Authenticators.DEVICE_CREDENTIAL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.biometrics.BiometricManager long getLastAuthenticationTime(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.biometrics.BiometricManager.Authenticators.BIOMETRIC_STRONG, android.hardware.biometrics.BiometricManager.Authenticators.BIOMETRIC_WEAK, android.hardware.biometrics.BiometricManager.Authenticators.DEVICE_CREDENTIAL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.biometrics.BiometricPrompt.Builder android.hardware.biometrics.BiometricPrompt.Builder setAllowedAuthenticators(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.biometrics.BiometricManager.Authenticators.BIOMETRIC_STRONG, android.hardware.biometrics.BiometricManager.Authenticators.BIOMETRIC_WEAK, android.hardware.biometrics.BiometricManager.Authenticators.DEVICE_CREDENTIAL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraAccessException CameraAccessException(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraAccessException.CAMERA_IN_USE, android.hardware.camera2.CameraAccessException.MAX_CAMERAS_IN_USE, android.hardware.camera2.CameraAccessException.CAMERA_DISABLED, android.hardware.camera2.CameraAccessException.CAMERA_DISCONNECTED, android.hardware.camera2.CameraAccessException.CAMERA_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraAccessException CameraAccessException(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraAccessException.CAMERA_IN_USE, android.hardware.camera2.CameraAccessException.MAX_CAMERAS_IN_USE, android.hardware.camera2.CameraAccessException.CAMERA_DISABLED, android.hardware.camera2.CameraAccessException.CAMERA_DISCONNECTED, android.hardware.camera2.CameraAccessException.CAMERA_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraAccessException CameraAccessException(int, java.lang.String, java.lang.Throwable) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraAccessException.CAMERA_IN_USE, android.hardware.camera2.CameraAccessException.MAX_CAMERAS_IN_USE, android.hardware.camera2.CameraAccessException.CAMERA_DISABLED, android.hardware.camera2.CameraAccessException.CAMERA_DISCONNECTED, android.hardware.camera2.CameraAccessException.CAMERA_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraAccessException CameraAccessException(int, java.lang.Throwable) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraAccessException.CAMERA_IN_USE, android.hardware.camera2.CameraAccessException.MAX_CAMERAS_IN_USE, android.hardware.camera2.CameraAccessException.CAMERA_DISABLED, android.hardware.camera2.CameraAccessException.CAMERA_DISCONNECTED, android.hardware.camera2.CameraAccessException.CAMERA_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraCharacteristics android.hardware.camera2.params.RecommendedStreamConfigurationMap getRecommendedStreamConfigurationMap(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.params.RecommendedStreamConfigurationMap.USECASE_PREVIEW, android.hardware.camera2.params.RecommendedStreamConfigurationMap.USECASE_RECORD, android.hardware.camera2.params.RecommendedStreamConfigurationMap.USECASE_VIDEO_SNAPSHOT, android.hardware.camera2.params.RecommendedStreamConfigurationMap.USECASE_SNAPSHOT, android.hardware.camera2.params.RecommendedStreamConfigurationMap.USECASE_ZSL, android.hardware.camera2.params.RecommendedStreamConfigurationMap.USECASE_RAW, android.hardware.camera2.params.RecommendedStreamConfigurationMap.USECASE_LOW_LATENCY_SNAPSHOT, android.hardware.camera2.params.RecommendedStreamConfigurationMap.USECASE_10BIT_OUTPUT}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraDevice android.hardware.camera2.CaptureRequest.Builder createCaptureRequest(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraDevice.TEMPLATE_PREVIEW, android.hardware.camera2.CameraDevice.TEMPLATE_STILL_CAPTURE, android.hardware.camera2.CameraDevice.TEMPLATE_RECORD, android.hardware.camera2.CameraDevice.TEMPLATE_VIDEO_SNAPSHOT, android.hardware.camera2.CameraDevice.TEMPLATE_ZERO_SHUTTER_LAG, android.hardware.camera2.CameraDevice.TEMPLATE_MANUAL}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraDevice android.hardware.camera2.CaptureRequest.Builder createCaptureRequest(int, java.util.Set&lt;java.lang.String&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraDevice.TEMPLATE_PREVIEW, android.hardware.camera2.CameraDevice.TEMPLATE_STILL_CAPTURE, android.hardware.camera2.CameraDevice.TEMPLATE_RECORD, android.hardware.camera2.CameraDevice.TEMPLATE_VIDEO_SNAPSHOT, android.hardware.camera2.CameraDevice.TEMPLATE_ZERO_SHUTTER_LAG, android.hardware.camera2.CameraDevice.TEMPLATE_MANUAL}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraDevice void setCameraAudioRestriction(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraDevice.AUDIO_RESTRICTION_NONE, android.hardware.camera2.CameraDevice.AUDIO_RESTRICTION_VIBRATION, android.hardware.camera2.CameraDevice.AUDIO_RESTRICTION_VIBRATION_SOUND}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraDevice.CameraDeviceSetup android.hardware.camera2.CaptureRequest.Builder createCaptureRequest(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraDevice.TEMPLATE_PREVIEW, android.hardware.camera2.CameraDevice.TEMPLATE_STILL_CAPTURE, android.hardware.camera2.CameraDevice.TEMPLATE_RECORD, android.hardware.camera2.CameraDevice.TEMPLATE_VIDEO_SNAPSHOT, android.hardware.camera2.CameraDevice.TEMPLATE_ZERO_SHUTTER_LAG, android.hardware.camera2.CameraDevice.TEMPLATE_MANUAL}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraDevice.StateCallback void onError(android.hardware.camera2.CameraDevice, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraDevice.StateCallback.ERROR_CAMERA_IN_USE, android.hardware.camera2.CameraDevice.StateCallback.ERROR_MAX_CAMERAS_IN_USE, android.hardware.camera2.CameraDevice.StateCallback.ERROR_CAMERA_DISABLED, android.hardware.camera2.CameraDevice.StateCallback.ERROR_CAMERA_DEVICE, android.hardware.camera2.CameraDevice.StateCallback.ERROR_CAMERA_SERVICE}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraExtensionCharacteristics T get(int, android.hardware.camera2.CameraCharacteristics.Key&lt;T&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_AUTOMATIC, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_FACE_RETOUCH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_BOKEH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_HDR, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_NIGHT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraExtensionCharacteristics android.util.Range&lt;java.lang.Long&gt; getEstimatedCaptureLatencyRangeMillis(int, android.util.Size, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_AUTOMATIC, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_FACE_RETOUCH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_BOKEH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_HDR, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_NIGHT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraExtensionCharacteristics android.util.Range&lt;java.lang.Long&gt; getEstimatedCaptureLatencyRangeMillis(int, android.util.Size, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraExtensionCharacteristics boolean isCaptureProcessProgressAvailable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_AUTOMATIC, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_FACE_RETOUCH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_BOKEH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_HDR, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_NIGHT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraExtensionCharacteristics boolean isPostviewAvailable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_AUTOMATIC, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_FACE_RETOUCH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_BOKEH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_HDR, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_NIGHT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraExtensionCharacteristics java.util.List&lt;android.util.Size&gt; getExtensionSupportedSizes(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_AUTOMATIC, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_FACE_RETOUCH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_BOKEH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_HDR, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_NIGHT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraExtensionCharacteristics java.util.List&lt;android.util.Size&gt; getExtensionSupportedSizes(int, java.lang.Class&lt;T&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_AUTOMATIC, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_FACE_RETOUCH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_BOKEH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_HDR, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_NIGHT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraExtensionCharacteristics java.util.List&lt;android.util.Size&gt; getPostviewSupportedSizes(int, android.util.Size, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_AUTOMATIC, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_FACE_RETOUCH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_BOKEH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_HDR, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_NIGHT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraExtensionCharacteristics java.util.Set&lt;android.hardware.camera2.CameraCharacteristics.Key&gt; getKeys(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_AUTOMATIC, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_FACE_RETOUCH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_BOKEH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_HDR, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_NIGHT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraExtensionCharacteristics java.util.Set&lt;android.hardware.camera2.CaptureRequest.Key&gt; getAvailableCaptureRequestKeys(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_AUTOMATIC, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_FACE_RETOUCH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_BOKEH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_HDR, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_NIGHT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraExtensionCharacteristics java.util.Set&lt;android.hardware.camera2.CaptureResult.Key&gt; getAvailableCaptureResultKeys(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_AUTOMATIC, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_FACE_RETOUCH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_BOKEH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_HDR, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_NIGHT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.CameraOfflineSession.CameraOfflineSessionCallback void onError(android.hardware.camera2.CameraOfflineSession, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraOfflineSession.CameraOfflineSessionCallback.STATUS_INTERNAL_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.MultiResolutionImageReader MultiResolutionImageReader(java.util.Collection&lt;android.hardware.camera2.params.MultiResolutionStreamInfo&gt;, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.ColorSpaceProfiles java.util.Set&lt;android.graphics.ColorSpace.Named&gt; getSupportedColorSpaces(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.ColorSpaceProfiles java.util.Set&lt;android.graphics.ColorSpace.Named&gt; getSupportedColorSpacesForDynamicRange(int, long) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.ColorSpaceProfiles java.util.Set&lt;android.graphics.ColorSpace.Named&gt; getSupportedColorSpacesForDynamicRange(int, long) 1">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.camera2.params.DynamicRangeProfiles.STANDARD, android.hardware.camera2.params.DynamicRangeProfiles.HLG10, android.hardware.camera2.params.DynamicRangeProfiles.HDR10, android.hardware.camera2.params.DynamicRangeProfiles.HDR10_PLUS, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_REF, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_REF_PO, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_OEM, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_OEM_PO, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_REF, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_REF_PO, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_OEM, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_OEM_PO}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.ColorSpaceProfiles java.util.Set&lt;java.lang.Long&gt; getSupportedDynamicRangeProfiles(android.graphics.ColorSpace.Named, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.DeviceStateSensorOrientationMap int getSensorOrientation(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.camera2.params.DeviceStateSensorOrientationMap.NORMAL, android.hardware.camera2.params.DeviceStateSensorOrientationMap.FOLDED}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.DeviceStateSensorOrientationMap.Builder android.hardware.camera2.params.DeviceStateSensorOrientationMap.Builder addOrientationForState(long, long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.camera2.params.DeviceStateSensorOrientationMap.NORMAL, android.hardware.camera2.params.DeviceStateSensorOrientationMap.FOLDED}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.DynamicRangeProfiles boolean isExtraLatencyPresent(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.camera2.params.DynamicRangeProfiles.STANDARD, android.hardware.camera2.params.DynamicRangeProfiles.HLG10, android.hardware.camera2.params.DynamicRangeProfiles.HDR10, android.hardware.camera2.params.DynamicRangeProfiles.HDR10_PLUS, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_REF, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_REF_PO, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_OEM, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_OEM_PO, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_REF, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_REF_PO, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_OEM, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_OEM_PO}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.DynamicRangeProfiles java.util.Set&lt;java.lang.Long&gt; getProfileCaptureRequestConstraints(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.camera2.params.DynamicRangeProfiles.STANDARD, android.hardware.camera2.params.DynamicRangeProfiles.HLG10, android.hardware.camera2.params.DynamicRangeProfiles.HDR10, android.hardware.camera2.params.DynamicRangeProfiles.HDR10_PLUS, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_REF, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_REF_PO, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_OEM, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_OEM_PO, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_REF, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_REF_PO, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_OEM, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_OEM_PO}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.ExtensionSessionConfiguration ExtensionSessionConfiguration(int, java.util.List&lt;android.hardware.camera2.params.OutputConfiguration&gt;, java.util.concurrent.Executor, android.hardware.camera2.CameraExtensionSession.StateCallback) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_AUTOMATIC, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_FACE_RETOUCH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_BOKEH, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_HDR, android.hardware.camera2.CameraExtensionCharacteristics.EXTENSION_NIGHT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.InputConfiguration InputConfiguration(java.util.Collection&lt;android.hardware.camera2.params.MultiResolutionStreamInfo&gt;, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.MultiResolutionStreamConfigurationMap java.util.Collection&lt;android.hardware.camera2.params.MultiResolutionStreamInfo&gt; getInputInfo(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.MultiResolutionStreamConfigurationMap java.util.Collection&lt;android.hardware.camera2.params.MultiResolutionStreamInfo&gt; getOutputInfo(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration OutputConfiguration(int, android.util.Size) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration OutputConfiguration(int, android.util.Size, long) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration OutputConfiguration(int, android.util.Size, long) 2">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.HardwareBuffer.USAGE_CPU_READ_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_READ_OFTEN, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_OFTEN, android.hardware.HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE, android.hardware.HardwareBuffer.USAGE_GPU_COLOR_OUTPUT, android.hardware.HardwareBuffer.USAGE_COMPOSER_OVERLAY, android.hardware.HardwareBuffer.USAGE_PROTECTED_CONTENT, android.hardware.HardwareBuffer.USAGE_VIDEO_ENCODE, android.hardware.HardwareBuffer.USAGE_GPU_DATA_BUFFER, android.hardware.HardwareBuffer.USAGE_SENSOR_DIRECT_DATA, android.hardware.HardwareBuffer.USAGE_GPU_CUBE_MAP, android.hardware.HardwareBuffer.USAGE_GPU_MIPMAP_COMPLETE, android.hardware.HardwareBuffer.USAGE_FRONT_BUFFER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration OutputConfiguration(int, int, android.util.Size) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration OutputConfiguration(int, int, android.util.Size, long) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration OutputConfiguration(int, int, android.util.Size, long) 3">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.HardwareBuffer.USAGE_CPU_READ_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_READ_OFTEN, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_OFTEN, android.hardware.HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE, android.hardware.HardwareBuffer.USAGE_GPU_COLOR_OUTPUT, android.hardware.HardwareBuffer.USAGE_COMPOSER_OVERLAY, android.hardware.HardwareBuffer.USAGE_PROTECTED_CONTENT, android.hardware.HardwareBuffer.USAGE_VIDEO_ENCODE, android.hardware.HardwareBuffer.USAGE_GPU_DATA_BUFFER, android.hardware.HardwareBuffer.USAGE_SENSOR_DIRECT_DATA, android.hardware.HardwareBuffer.USAGE_GPU_CUBE_MAP, android.hardware.HardwareBuffer.USAGE_GPU_MIPMAP_COMPLETE, android.hardware.HardwareBuffer.USAGE_FRONT_BUFFER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration java.util.List&lt;android.hardware.camera2.params.OutputConfiguration&gt; createInstancesForMultiResolutionOutput(java.util.Collection&lt;android.hardware.camera2.params.MultiResolutionStreamInfo&gt;, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration void addSensorPixelModeUsed(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraMetadata.SENSOR_PIXEL_MODE_DEFAULT, android.hardware.camera2.CameraMetadata.SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTION}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration void removeSensorPixelModeUsed(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraMetadata.SENSOR_PIXEL_MODE_DEFAULT, android.hardware.camera2.CameraMetadata.SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTION}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration void setDynamicRangeProfile(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.camera2.params.DynamicRangeProfiles.STANDARD, android.hardware.camera2.params.DynamicRangeProfiles.HLG10, android.hardware.camera2.params.DynamicRangeProfiles.HDR10, android.hardware.camera2.params.DynamicRangeProfiles.HDR10_PLUS, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_REF, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_REF_PO, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_OEM, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_10B_HDR_OEM_PO, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_REF, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_REF_PO, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_OEM, android.hardware.camera2.params.DynamicRangeProfiles.DOLBY_VISION_8B_HDR_OEM_PO}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration void setMirrorMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.params.OutputConfiguration.MIRROR_MODE_AUTO, android.hardware.camera2.params.OutputConfiguration.MIRROR_MODE_NONE, android.hardware.camera2.params.OutputConfiguration.MIRROR_MODE_H, android.hardware.camera2.params.OutputConfiguration.MIRROR_MODE_V}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration void setStreamUseCase(long) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.CameraMetadata.SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULT, android.hardware.camera2.CameraMetadata.SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW, android.hardware.camera2.CameraMetadata.SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTURE, android.hardware.camera2.CameraMetadata.SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORD, android.hardware.camera2.CameraMetadata.SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILL, android.hardware.camera2.CameraMetadata.SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALL, android.hardware.camera2.CameraMetadata.SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAW}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.OutputConfiguration void setTimestampBase(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.params.OutputConfiguration.TIMESTAMP_BASE_DEFAULT, android.hardware.camera2.params.OutputConfiguration.TIMESTAMP_BASE_SENSOR, android.hardware.camera2.params.OutputConfiguration.TIMESTAMP_BASE_MONOTONIC, android.hardware.camera2.params.OutputConfiguration.TIMESTAMP_BASE_REALTIME, android.hardware.camera2.params.OutputConfiguration.TIMESTAMP_BASE_CHOREOGRAPHER_SYNCED}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.RecommendedStreamConfigurationMap boolean isOutputSupportedFor(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.RecommendedStreamConfigurationMap java.util.Set&lt;android.util.Size&gt; getHighResolutionOutputSizes(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.RecommendedStreamConfigurationMap java.util.Set&lt;android.util.Size&gt; getInputSizes(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.RecommendedStreamConfigurationMap java.util.Set&lt;android.util.Size&gt; getOutputSizes(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.RecommendedStreamConfigurationMap java.util.Set&lt;java.lang.Integer&gt; getValidOutputFormatsForInput(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.RecommendedStreamConfigurationMap long getOutputMinFrameDuration(int, android.util.Size) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.RecommendedStreamConfigurationMap long getOutputStallDuration(int, android.util.Size) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.SessionConfiguration SessionConfiguration(int, java.util.List&lt;android.hardware.camera2.params.OutputConfiguration&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.params.SessionConfiguration.SESSION_REGULAR, android.hardware.camera2.params.SessionConfiguration.SESSION_HIGH_SPEED}"></val>
        </annotation>
    </item>
    <item name="android.hardware.camera2.params.SessionConfiguration SessionConfiguration(int, java.util.List&lt;android.hardware.camera2.params.OutputConfiguration&gt;, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession.StateCallback) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.camera2.params.SessionConfiguration.SESSION_REGULAR, android.hardware.camera2.params.SessionConfiguration.SESSION_HIGH_SPEED}"></val>
        </annotation>
    </item>
    <item name="android.hardware.display.DeviceProductInfo DeviceProductInfo(java.lang.String, java.lang.String, java.lang.String, int, int) 4">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.display.DeviceProductInfo.CONNECTION_TO_SINK_UNKNOWN, android.hardware.display.DeviceProductInfo.CONNECTION_TO_SINK_BUILT_IN, android.hardware.display.DeviceProductInfo.CONNECTION_TO_SINK_DIRECT, android.hardware.display.DeviceProductInfo.CONNECTION_TO_SINK_TRANSITIVE}"></val>
        </annotation>
    </item>
    <item name="android.hardware.display.DisplayManager android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String, int, int, int, android.view.Surface, int) 5">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_PUBLIC, android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_PRESENTATION, android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_SECURE, android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY, android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.display.DisplayManager android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String, int, int, int, android.view.Surface, int, android.hardware.display.VirtualDisplay.Callback, android.os.Handler) 5">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_PUBLIC, android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_PRESENTATION, android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_SECURE, android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY, android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.hardware.display.HdrConversionMode HdrConversionMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.display.HdrConversionMode.HDR_CONVERSION_PASSTHROUGH, android.hardware.display.HdrConversionMode.HDR_CONVERSION_SYSTEM, android.hardware.display.HdrConversionMode.HDR_CONVERSION_FORCE}"></val>
        </annotation>
    </item>
    <item name="android.hardware.display.HdrConversionMode HdrConversionMode(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.display.HdrConversionMode.HDR_CONVERSION_PASSTHROUGH, android.hardware.display.HdrConversionMode.HDR_CONVERSION_SYSTEM, android.hardware.display.HdrConversionMode.HDR_CONVERSION_FORCE}"></val>
        </annotation>
    </item>
    <item name="android.hardware.display.HdrConversionMode HdrConversionMode(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.Display.HdrCapabilities.HDR_TYPE_INVALID, android.view.Display.HdrCapabilities.HDR_TYPE_DOLBY_VISION, android.view.Display.HdrCapabilities.HDR_TYPE_HDR10, android.view.Display.HdrCapabilities.HDR_TYPE_HLG, android.view.Display.HdrCapabilities.HDR_TYPE_HDR10_PLUS}"></val>
        </annotation>
    </item>
    <item name="android.hardware.display.VirtualDisplayConfig.Builder android.hardware.display.VirtualDisplayConfig.Builder setFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_PUBLIC, android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_PRESENTATION, android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_SECURE, android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY, android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.BasalBodyTemperatureRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int, android.health.connect.datatypes.units.Temperature) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_UNKNOWN, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_ARMPIT, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_FINGER, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_FOREHEAD, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_MOUTH, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_RECTUM, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_TEMPORAL_ARTERY, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_TOE, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_EAR, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_WRIST, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_VAGINA}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.BloodGlucoseRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int, android.health.connect.datatypes.units.BloodGlucose, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.BloodGlucoseRecord.SpecimenSource.SPECIMEN_SOURCE_UNKNOWN, android.health.connect.datatypes.BloodGlucoseRecord.SpecimenSource.SPECIMEN_SOURCE_INTERSTITIAL_FLUID, android.health.connect.datatypes.BloodGlucoseRecord.SpecimenSource.SPECIMEN_SOURCE_CAPILLARY_BLOOD, android.health.connect.datatypes.BloodGlucoseRecord.SpecimenSource.SPECIMEN_SOURCE_PLASMA, android.health.connect.datatypes.BloodGlucoseRecord.SpecimenSource.SPECIMEN_SOURCE_SERUM, android.health.connect.datatypes.BloodGlucoseRecord.SpecimenSource.SPECIMEN_SOURCE_TEARS, android.health.connect.datatypes.BloodGlucoseRecord.SpecimenSource.SPECIMEN_SOURCE_WHOLE_BLOOD}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.BloodGlucoseRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int, android.health.connect.datatypes.units.BloodGlucose, int, int) 4">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.BloodGlucoseRecord.RelationToMealType.RELATION_TO_MEAL_UNKNOWN, android.health.connect.datatypes.BloodGlucoseRecord.RelationToMealType.RELATION_TO_MEAL_GENERAL, android.health.connect.datatypes.BloodGlucoseRecord.RelationToMealType.RELATION_TO_MEAL_FASTING, android.health.connect.datatypes.BloodGlucoseRecord.RelationToMealType.RELATION_TO_MEAL_BEFORE_MEAL, android.health.connect.datatypes.BloodGlucoseRecord.RelationToMealType.RELATION_TO_MEAL_AFTER_MEAL}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.BloodGlucoseRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int, android.health.connect.datatypes.units.BloodGlucose, int, int) 5">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.MealType.MEAL_TYPE_UNKNOWN, android.health.connect.datatypes.MealType.MEAL_TYPE_BREAKFAST, android.health.connect.datatypes.MealType.MEAL_TYPE_LUNCH, android.health.connect.datatypes.MealType.MEAL_TYPE_DINNER, android.health.connect.datatypes.MealType.MEAL_TYPE_SNACK}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.BloodPressureRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int, android.health.connect.datatypes.units.Pressure, android.health.connect.datatypes.units.Pressure, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.BloodPressureRecord.BloodPressureMeasurementLocation.BLOOD_PRESSURE_MEASUREMENT_LOCATION_UNKNOWN, android.health.connect.datatypes.BloodPressureRecord.BloodPressureMeasurementLocation.BLOOD_PRESSURE_MEASUREMENT_LOCATION_LEFT_WRIST, android.health.connect.datatypes.BloodPressureRecord.BloodPressureMeasurementLocation.BLOOD_PRESSURE_MEASUREMENT_LOCATION_RIGHT_WRIST, android.health.connect.datatypes.BloodPressureRecord.BloodPressureMeasurementLocation.BLOOD_PRESSURE_MEASUREMENT_LOCATION_LEFT_UPPER_ARM, android.health.connect.datatypes.BloodPressureRecord.BloodPressureMeasurementLocation.BLOOD_PRESSURE_MEASUREMENT_LOCATION_RIGHT_UPPER_ARM}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.BloodPressureRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int, android.health.connect.datatypes.units.Pressure, android.health.connect.datatypes.units.Pressure, int) 5">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.BloodPressureRecord.BodyPosition.BODY_POSITION_UNKNOWN, android.health.connect.datatypes.BloodPressureRecord.BodyPosition.BODY_POSITION_STANDING_UP, android.health.connect.datatypes.BloodPressureRecord.BodyPosition.BODY_POSITION_SITTING_DOWN, android.health.connect.datatypes.BloodPressureRecord.BodyPosition.BODY_POSITION_LYING_DOWN, android.health.connect.datatypes.BloodPressureRecord.BodyPosition.BODY_POSITION_RECLINING}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.BodyTemperatureRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int, android.health.connect.datatypes.units.Temperature) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_UNKNOWN, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_ARMPIT, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_FINGER, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_FOREHEAD, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_MOUTH, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_RECTUM, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_TEMPORAL_ARTERY, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_TOE, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_EAR, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_WRIST, android.health.connect.datatypes.BodyTemperatureMeasurementLocation.MEASUREMENT_LOCATION_VAGINA}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.CervicalMucusRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.CervicalMucusRecord.CervicalMucusSensation.SENSATION_UNKNOWN, android.health.connect.datatypes.CervicalMucusRecord.CervicalMucusSensation.SENSATION_LIGHT, android.health.connect.datatypes.CervicalMucusRecord.CervicalMucusSensation.SENSATION_MEDIUM, android.health.connect.datatypes.CervicalMucusRecord.CervicalMucusSensation.SENSATION_HEAVY}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.CervicalMucusRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.CervicalMucusRecord.CervicalMucusAppearance.APPEARANCE_UNKNOWN, android.health.connect.datatypes.CervicalMucusRecord.CervicalMucusAppearance.APPEARANCE_DRY, android.health.connect.datatypes.CervicalMucusRecord.CervicalMucusAppearance.APPEARANCE_STICKY, android.health.connect.datatypes.CervicalMucusRecord.CervicalMucusAppearance.APPEARANCE_CREAMY, android.health.connect.datatypes.CervicalMucusRecord.CervicalMucusAppearance.APPEARANCE_WATERY, android.health.connect.datatypes.CervicalMucusRecord.CervicalMucusAppearance.APPEARANCE_EGG_WHITE, android.health.connect.datatypes.CervicalMucusRecord.CervicalMucusAppearance.APPEARANCE_UNUSUAL}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.Device.Builder android.health.connect.datatypes.Device.Builder setType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.Device.DEVICE_TYPE_UNKNOWN, android.health.connect.datatypes.Device.DEVICE_TYPE_WATCH, android.health.connect.datatypes.Device.DEVICE_TYPE_PHONE, android.health.connect.datatypes.Device.DEVICE_TYPE_SCALE, android.health.connect.datatypes.Device.DEVICE_TYPE_RING, android.health.connect.datatypes.Device.DEVICE_TYPE_HEAD_MOUNTED, android.health.connect.datatypes.Device.DEVICE_TYPE_FITNESS_BAND, android.health.connect.datatypes.Device.DEVICE_TYPE_CHEST_STRAP, android.health.connect.datatypes.Device.DEVICE_TYPE_SMART_DISPLAY}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.ExerciseSegment.Builder Builder(java.time.Instant, java.time.Instant, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_UNKNOWN, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BARBELL_SHOULDER_PRESS, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BENCH_SIT_UP, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BIKING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BIKING_STATIONARY, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_CURL_LEFT_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_CURL_RIGHT_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_FRONT_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_LATERAL_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_LEFT_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_RIGHT_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_TWO_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_FORWARD_TWIST, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_ELLIPTICAL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_HIGH_INTENSITY_INTERVAL_TRAINING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PILATES, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_ROWING_MACHINE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_RUNNING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_RUNNING_TREADMILL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_STAIR_CLIMBING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_STAIR_CLIMBING_MACHINE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_STRETCHING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_OPEN_WATER, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_POOL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_UPPER_TWIST, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_WALKING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_WEIGHTLIFTING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_WHEELCHAIR, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_OTHER_WORKOUT, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_YOGA, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_ARM_CURL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BACK_EXTENSION, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BALL_SLAM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BENCH_PRESS, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BURPEE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_CRUNCH, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DEADLIFT, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DOUBLE_ARM_TRICEPS_EXTENSION, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_ROW, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_FRONT_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_HIP_THRUST, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_HULA_HOOP, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_JUMPING_JACK, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_JUMP_ROPE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_KETTLEBELL_SWING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LATERAL_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LAT_PULL_DOWN, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LEG_CURL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LEG_EXTENSION, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LEG_PRESS, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LEG_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LUNGE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_MOUNTAIN_CLIMBER, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PLANK, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PULL_UP, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PUNCH, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SHOULDER_PRESS, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SINGLE_ARM_TRICEPS_EXTENSION, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SIT_UP, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SQUAT, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_FREESTYLE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_BACKSTROKE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_BREASTSTROKE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_BUTTERFLY, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_MIXED, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_OTHER, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_REST, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PAUSE}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.ExerciseSessionRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, java.time.Instant, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_UNKNOWN, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BADMINTON, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BASEBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BASKETBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BIKING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BIKING_STATIONARY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BOOT_CAMP, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BOXING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_CALISTHENICS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_CRICKET, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_DANCING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ELLIPTICAL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_EXERCISE_CLASS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FENCING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FOOTBALL_AMERICAN, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FOOTBALL_AUSTRALIAN, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FRISBEE_DISC, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_GOLF, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_GUIDED_BREATHING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_GYMNASTICS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_HANDBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_HIGH_INTENSITY_INTERVAL_TRAINING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_HIKING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ICE_HOCKEY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ICE_SKATING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_MARTIAL_ARTS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_PADDLING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_PARAGLIDING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_PILATES, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RACQUETBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROCK_CLIMBING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROLLER_HOCKEY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROWING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROWING_MACHINE, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RUGBY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RUNNING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RUNNING_TREADMILL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SAILING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SCUBA_DIVING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SKATING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SKIING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SNOWBOARDING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SNOWSHOEING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SOCCER, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SOFTBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SQUASH, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STAIR_CLIMBING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STAIR_CLIMBING_MACHINE, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STRENGTH_TRAINING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STRETCHING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SURFING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SWIMMING_OPEN_WATER, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SWIMMING_POOL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_TABLE_TENNIS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_TENNIS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_VOLLEYBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WALKING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WATER_POLO, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WEIGHTLIFTING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WHEELCHAIR, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_OTHER_WORKOUT, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_YOGA}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.MenstruationFlowRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.MenstruationFlowRecord.MenstruationFlowType.FLOW_UNKNOWN, android.health.connect.datatypes.MenstruationFlowRecord.MenstruationFlowType.FLOW_LIGHT, android.health.connect.datatypes.MenstruationFlowRecord.MenstruationFlowType.FLOW_MEDIUM, android.health.connect.datatypes.MenstruationFlowRecord.MenstruationFlowType.FLOW_HEAVY}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.Metadata.Builder android.health.connect.datatypes.Metadata.Builder setRecordingMethod(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.Metadata.RECORDING_METHOD_UNKNOWN, android.health.connect.datatypes.Metadata.RECORDING_METHOD_ACTIVELY_RECORDED, android.health.connect.datatypes.Metadata.RECORDING_METHOD_AUTOMATICALLY_RECORDED, android.health.connect.datatypes.Metadata.RECORDING_METHOD_MANUAL_ENTRY}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.NutritionRecord.Builder android.health.connect.datatypes.NutritionRecord.Builder setMealType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.MealType.MEAL_TYPE_UNKNOWN, android.health.connect.datatypes.MealType.MEAL_TYPE_BREAKFAST, android.health.connect.datatypes.MealType.MEAL_TYPE_LUNCH, android.health.connect.datatypes.MealType.MEAL_TYPE_DINNER, android.health.connect.datatypes.MealType.MEAL_TYPE_SNACK}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.OvulationTestRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.OvulationTestRecord.OvulationTestResult.RESULT_INCONCLUSIVE, android.health.connect.datatypes.OvulationTestRecord.OvulationTestResult.RESULT_POSITIVE, android.health.connect.datatypes.OvulationTestRecord.OvulationTestResult.RESULT_HIGH, android.health.connect.datatypes.OvulationTestRecord.OvulationTestResult.RESULT_NEGATIVE}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.PlannedExerciseSessionRecord.Builder Builder(android.health.connect.datatypes.Metadata, int, java.time.Instant, java.time.Instant) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_UNKNOWN, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BADMINTON, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BASEBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BASKETBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BIKING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BIKING_STATIONARY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BOOT_CAMP, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BOXING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_CALISTHENICS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_CRICKET, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_DANCING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ELLIPTICAL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_EXERCISE_CLASS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FENCING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FOOTBALL_AMERICAN, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FOOTBALL_AUSTRALIAN, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FRISBEE_DISC, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_GOLF, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_GUIDED_BREATHING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_GYMNASTICS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_HANDBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_HIGH_INTENSITY_INTERVAL_TRAINING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_HIKING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ICE_HOCKEY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ICE_SKATING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_MARTIAL_ARTS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_PADDLING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_PARAGLIDING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_PILATES, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RACQUETBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROCK_CLIMBING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROLLER_HOCKEY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROWING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROWING_MACHINE, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RUGBY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RUNNING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RUNNING_TREADMILL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SAILING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SCUBA_DIVING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SKATING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SKIING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SNOWBOARDING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SNOWSHOEING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SOCCER, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SOFTBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SQUASH, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STAIR_CLIMBING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STAIR_CLIMBING_MACHINE, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STRENGTH_TRAINING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STRETCHING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SURFING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SWIMMING_OPEN_WATER, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SWIMMING_POOL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_TABLE_TENNIS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_TENNIS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_VOLLEYBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WALKING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WATER_POLO, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WEIGHTLIFTING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WHEELCHAIR, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_OTHER_WORKOUT, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_YOGA}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.PlannedExerciseSessionRecord.Builder Builder(android.health.connect.datatypes.Metadata, int, java.time.LocalDate, java.time.Duration) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_UNKNOWN, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BADMINTON, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BASEBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BASKETBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BIKING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BIKING_STATIONARY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BOOT_CAMP, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BOXING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_CALISTHENICS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_CRICKET, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_DANCING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ELLIPTICAL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_EXERCISE_CLASS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FENCING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FOOTBALL_AMERICAN, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FOOTBALL_AUSTRALIAN, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FRISBEE_DISC, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_GOLF, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_GUIDED_BREATHING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_GYMNASTICS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_HANDBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_HIGH_INTENSITY_INTERVAL_TRAINING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_HIKING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ICE_HOCKEY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ICE_SKATING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_MARTIAL_ARTS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_PADDLING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_PARAGLIDING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_PILATES, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RACQUETBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROCK_CLIMBING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROLLER_HOCKEY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROWING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROWING_MACHINE, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RUGBY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RUNNING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RUNNING_TREADMILL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SAILING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SCUBA_DIVING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SKATING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SKIING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SNOWBOARDING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SNOWSHOEING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SOCCER, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SOFTBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SQUASH, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STAIR_CLIMBING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STAIR_CLIMBING_MACHINE, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STRENGTH_TRAINING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STRETCHING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SURFING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SWIMMING_OPEN_WATER, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SWIMMING_POOL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_TABLE_TENNIS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_TENNIS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_VOLLEYBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WALKING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WATER_POLO, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WEIGHTLIFTING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WHEELCHAIR, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_OTHER_WORKOUT, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_YOGA}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.PlannedExerciseSessionRecord.Builder android.health.connect.datatypes.PlannedExerciseSessionRecord.Builder setExerciseType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_UNKNOWN, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BADMINTON, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BASEBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BASKETBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BIKING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BIKING_STATIONARY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BOOT_CAMP, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_BOXING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_CALISTHENICS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_CRICKET, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_DANCING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ELLIPTICAL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_EXERCISE_CLASS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FENCING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FOOTBALL_AMERICAN, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FOOTBALL_AUSTRALIAN, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_FRISBEE_DISC, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_GOLF, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_GUIDED_BREATHING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_GYMNASTICS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_HANDBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_HIGH_INTENSITY_INTERVAL_TRAINING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_HIKING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ICE_HOCKEY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ICE_SKATING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_MARTIAL_ARTS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_PADDLING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_PARAGLIDING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_PILATES, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RACQUETBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROCK_CLIMBING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROLLER_HOCKEY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROWING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_ROWING_MACHINE, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RUGBY, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RUNNING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_RUNNING_TREADMILL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SAILING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SCUBA_DIVING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SKATING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SKIING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SNOWBOARDING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SNOWSHOEING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SOCCER, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SOFTBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SQUASH, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STAIR_CLIMBING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STAIR_CLIMBING_MACHINE, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STRENGTH_TRAINING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_STRETCHING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SURFING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SWIMMING_OPEN_WATER, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_SWIMMING_POOL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_TABLE_TENNIS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_TENNIS, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_VOLLEYBALL, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WALKING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WATER_POLO, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WEIGHTLIFTING, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_WHEELCHAIR, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_OTHER_WORKOUT, android.health.connect.datatypes.ExerciseSessionType.EXERCISE_SESSION_TYPE_YOGA}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.PlannedExerciseStep.Builder Builder(int, int, android.health.connect.datatypes.ExerciseCompletionGoal) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_UNKNOWN, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BARBELL_SHOULDER_PRESS, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BENCH_SIT_UP, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BIKING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BIKING_STATIONARY, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_CURL_LEFT_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_CURL_RIGHT_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_FRONT_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_LATERAL_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_LEFT_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_RIGHT_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_TWO_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_FORWARD_TWIST, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_ELLIPTICAL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_HIGH_INTENSITY_INTERVAL_TRAINING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PILATES, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_ROWING_MACHINE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_RUNNING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_RUNNING_TREADMILL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_STAIR_CLIMBING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_STAIR_CLIMBING_MACHINE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_STRETCHING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_OPEN_WATER, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_POOL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_UPPER_TWIST, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_WALKING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_WEIGHTLIFTING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_WHEELCHAIR, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_OTHER_WORKOUT, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_YOGA, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_ARM_CURL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BACK_EXTENSION, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BALL_SLAM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BENCH_PRESS, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BURPEE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_CRUNCH, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DEADLIFT, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DOUBLE_ARM_TRICEPS_EXTENSION, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_ROW, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_FRONT_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_HIP_THRUST, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_HULA_HOOP, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_JUMPING_JACK, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_JUMP_ROPE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_KETTLEBELL_SWING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LATERAL_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LAT_PULL_DOWN, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LEG_CURL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LEG_EXTENSION, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LEG_PRESS, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LEG_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LUNGE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_MOUNTAIN_CLIMBER, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PLANK, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PULL_UP, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PUNCH, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SHOULDER_PRESS, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SINGLE_ARM_TRICEPS_EXTENSION, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SIT_UP, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SQUAT, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_FREESTYLE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_BACKSTROKE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_BREASTSTROKE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_BUTTERFLY, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_MIXED, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_OTHER, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_REST, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PAUSE}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.PlannedExerciseStep.Builder Builder(int, int, android.health.connect.datatypes.ExerciseCompletionGoal) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.PlannedExerciseStep.EXERCISE_CATEGORY_UNKNOWN, android.health.connect.datatypes.PlannedExerciseStep.EXERCISE_CATEGORY_WARMUP, android.health.connect.datatypes.PlannedExerciseStep.EXERCISE_CATEGORY_REST, android.health.connect.datatypes.PlannedExerciseStep.EXERCISE_CATEGORY_ACTIVE, android.health.connect.datatypes.PlannedExerciseStep.EXERCISE_CATEGORY_COOLDOWN, android.health.connect.datatypes.PlannedExerciseStep.EXERCISE_CATEGORY_RECOVERY}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.PlannedExerciseStep.Builder android.health.connect.datatypes.PlannedExerciseStep.Builder setExerciseCategory(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.PlannedExerciseStep.EXERCISE_CATEGORY_UNKNOWN, android.health.connect.datatypes.PlannedExerciseStep.EXERCISE_CATEGORY_WARMUP, android.health.connect.datatypes.PlannedExerciseStep.EXERCISE_CATEGORY_REST, android.health.connect.datatypes.PlannedExerciseStep.EXERCISE_CATEGORY_ACTIVE, android.health.connect.datatypes.PlannedExerciseStep.EXERCISE_CATEGORY_COOLDOWN, android.health.connect.datatypes.PlannedExerciseStep.EXERCISE_CATEGORY_RECOVERY}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.PlannedExerciseStep.Builder android.health.connect.datatypes.PlannedExerciseStep.Builder setExerciseType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_UNKNOWN, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BARBELL_SHOULDER_PRESS, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BENCH_SIT_UP, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BIKING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BIKING_STATIONARY, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_CURL_LEFT_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_CURL_RIGHT_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_FRONT_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_LATERAL_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_LEFT_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_RIGHT_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_TWO_ARM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_FORWARD_TWIST, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_ELLIPTICAL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_HIGH_INTENSITY_INTERVAL_TRAINING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PILATES, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_ROWING_MACHINE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_RUNNING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_RUNNING_TREADMILL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_STAIR_CLIMBING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_STAIR_CLIMBING_MACHINE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_STRETCHING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_OPEN_WATER, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_POOL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_UPPER_TWIST, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_WALKING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_WEIGHTLIFTING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_WHEELCHAIR, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_OTHER_WORKOUT, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_YOGA, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_ARM_CURL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BACK_EXTENSION, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BALL_SLAM, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BENCH_PRESS, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_BURPEE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_CRUNCH, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DEADLIFT, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DOUBLE_ARM_TRICEPS_EXTENSION, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_DUMBBELL_ROW, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_FRONT_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_HIP_THRUST, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_HULA_HOOP, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_JUMPING_JACK, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_JUMP_ROPE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_KETTLEBELL_SWING, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LATERAL_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LAT_PULL_DOWN, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LEG_CURL, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LEG_EXTENSION, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LEG_PRESS, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LEG_RAISE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_LUNGE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_MOUNTAIN_CLIMBER, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PLANK, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PULL_UP, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PUNCH, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SHOULDER_PRESS, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SINGLE_ARM_TRICEPS_EXTENSION, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SIT_UP, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SQUAT, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_FREESTYLE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_BACKSTROKE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_BREASTSTROKE, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_BUTTERFLY, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_MIXED, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_SWIMMING_OTHER, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_REST, android.health.connect.datatypes.ExerciseSegmentType.EXERCISE_SEGMENT_TYPE_PAUSE}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.SexualActivityRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.SexualActivityRecord.SexualActivityProtectionUsed.PROTECTION_USED_UNKNOWN, android.health.connect.datatypes.SexualActivityRecord.SexualActivityProtectionUsed.PROTECTION_USED_PROTECTED, android.health.connect.datatypes.SexualActivityRecord.SexualActivityProtectionUsed.PROTECTION_USED_UNPROTECTED}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.SkinTemperatureRecord.Builder android.health.connect.datatypes.SkinTemperatureRecord.Builder setMeasurementLocation(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.SkinTemperatureRecord.MEASUREMENT_LOCATION_UNKNOWN, android.health.connect.datatypes.SkinTemperatureRecord.MEASUREMENT_LOCATION_FINGER, android.health.connect.datatypes.SkinTemperatureRecord.MEASUREMENT_LOCATION_TOE, android.health.connect.datatypes.SkinTemperatureRecord.MEASUREMENT_LOCATION_WRIST}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.SleepSessionRecord.Stage Stage(java.time.Instant, java.time.Instant, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.SleepSessionRecord.StageType.STAGE_TYPE_UNKNOWN, android.health.connect.datatypes.SleepSessionRecord.StageType.STAGE_TYPE_AWAKE, android.health.connect.datatypes.SleepSessionRecord.StageType.STAGE_TYPE_SLEEPING, android.health.connect.datatypes.SleepSessionRecord.StageType.STAGE_TYPE_AWAKE_OUT_OF_BED, android.health.connect.datatypes.SleepSessionRecord.StageType.STAGE_TYPE_SLEEPING_LIGHT, android.health.connect.datatypes.SleepSessionRecord.StageType.STAGE_TYPE_SLEEPING_DEEP, android.health.connect.datatypes.SleepSessionRecord.StageType.STAGE_TYPE_SLEEPING_REM, android.health.connect.datatypes.SleepSessionRecord.StageType.STAGE_TYPE_AWAKE_IN_BED}"></val>
        </annotation>
    </item>
    <item name="android.health.connect.datatypes.Vo2MaxRecord.Builder Builder(android.health.connect.datatypes.Metadata, java.time.Instant, int, double) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.health.connect.datatypes.Vo2MaxRecord.Vo2MaxMeasurementMethod.MEASUREMENT_METHOD_OTHER, android.health.connect.datatypes.Vo2MaxRecord.Vo2MaxMeasurementMethod.MEASUREMENT_METHOD_METABOLIC_CART, android.health.connect.datatypes.Vo2MaxRecord.Vo2MaxMeasurementMethod.MEASUREMENT_METHOD_HEART_RATE_RATIO, android.health.connect.datatypes.Vo2MaxRecord.Vo2MaxMeasurementMethod.MEASUREMENT_METHOD_COOPER_TEST, android.health.connect.datatypes.Vo2MaxRecord.Vo2MaxMeasurementMethod.MEASUREMENT_METHOD_MULTISTAGE_FITNESS_TEST, android.health.connect.datatypes.Vo2MaxRecord.Vo2MaxMeasurementMethod.MEASUREMENT_METHOD_ROCKPORT_FITNESS_TEST}"></val>
        </annotation>
    </item>
    <item name="android.inputmethodservice.InputMethodService boolean onShowInputRequested(int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethod.SHOW_EXPLICIT, android.view.inputmethod.InputMethod.SHOW_FORCED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.inputmethodservice.InputMethodService void onUpdateEditorToolType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.MotionEvent.TOOL_TYPE_UNKNOWN, android.view.MotionEvent.TOOL_TYPE_FINGER, android.view.MotionEvent.TOOL_TYPE_STYLUS, android.view.MotionEvent.TOOL_TYPE_MOUSE, android.view.MotionEvent.TOOL_TYPE_ERASER}"></val>
        </annotation>
    </item>
    <item name="android.inputmethodservice.InputMethodService void requestHideSelf(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.HIDE_IMPLICIT_ONLY, android.view.inputmethod.InputMethodManager.HIDE_NOT_ALWAYS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.inputmethodservice.InputMethodService void requestShowSelf(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT, android.view.inputmethod.InputMethodManager.SHOW_FORCED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.inputmethodservice.InputMethodService void setBackDisposition(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.inputmethodservice.InputMethodService.BACK_DISPOSITION_DEFAULT, android.inputmethodservice.InputMethodService.BACK_DISPOSITION_WILL_NOT_DISMISS, android.inputmethodservice.InputMethodService.BACK_DISPOSITION_WILL_DISMISS, android.inputmethodservice.InputMethodService.BACK_DISPOSITION_ADJUST_NOTHING}"></val>
        </annotation>
    </item>
    <item name="android.inputmethodservice.InputMethodService.InputMethodImpl void showSoftInput(int, android.os.ResultReceiver) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethod.SHOW_EXPLICIT, android.view.inputmethod.InputMethod.SHOW_FORCED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.inputmethodservice.InputMethodService.InputMethodSessionImpl void toggleSoftInput(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT, android.view.inputmethod.InputMethodManager.SHOW_FORCED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.inputmethodservice.InputMethodService.InputMethodSessionImpl void toggleSoftInput(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.HIDE_IMPLICIT_ONLY, android.view.inputmethod.InputMethodManager.HIDE_NOT_ALWAYS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.location.Criteria void setAccuracy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.Criteria.NO_REQUIREMENT, android.location.Criteria.ACCURACY_FINE, android.location.Criteria.ACCURACY_COARSE}"></val>
        </annotation>
    </item>
    <item name="android.location.Criteria void setBearingAccuracy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.Criteria.NO_REQUIREMENT, android.location.Criteria.ACCURACY_LOW, android.location.Criteria.ACCURACY_MEDIUM, android.location.Criteria.ACCURACY_HIGH}"></val>
        </annotation>
    </item>
    <item name="android.location.Criteria void setHorizontalAccuracy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.Criteria.NO_REQUIREMENT, android.location.Criteria.ACCURACY_LOW, android.location.Criteria.ACCURACY_MEDIUM, android.location.Criteria.ACCURACY_HIGH}"></val>
        </annotation>
    </item>
    <item name="android.location.Criteria void setPowerRequirement(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.Criteria.NO_REQUIREMENT, android.location.Criteria.POWER_LOW, android.location.Criteria.POWER_MEDIUM, android.location.Criteria.POWER_HIGH}"></val>
        </annotation>
    </item>
    <item name="android.location.Criteria void setSpeedAccuracy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.Criteria.NO_REQUIREMENT, android.location.Criteria.ACCURACY_LOW, android.location.Criteria.ACCURACY_MEDIUM, android.location.Criteria.ACCURACY_HIGH}"></val>
        </annotation>
    </item>
    <item name="android.location.Criteria void setVerticalAccuracy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.Criteria.NO_REQUIREMENT, android.location.Criteria.ACCURACY_LOW, android.location.Criteria.ACCURACY_MEDIUM, android.location.Criteria.ACCURACY_HIGH}"></val>
        </annotation>
    </item>
    <item name="android.location.GnssAutomaticGainControl.Builder android.location.GnssAutomaticGainControl.Builder setConstellationType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.GnssStatus.CONSTELLATION_UNKNOWN, android.location.GnssStatus.CONSTELLATION_GPS, android.location.GnssStatus.CONSTELLATION_SBAS, android.location.GnssStatus.CONSTELLATION_GLONASS, android.location.GnssStatus.CONSTELLATION_QZSS, android.location.GnssStatus.CONSTELLATION_BEIDOU, android.location.GnssStatus.CONSTELLATION_GALILEO, android.location.GnssStatus.CONSTELLATION_IRNSS}"></val>
        </annotation>
    </item>
    <item name="android.location.GnssCapabilities.Builder android.location.GnssCapabilities.Builder setHasAccumulatedDeltaRange(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.GnssCapabilities.CAPABILITY_UNKNOWN, android.location.GnssCapabilities.CAPABILITY_SUPPORTED, android.location.GnssCapabilities.CAPABILITY_UNSUPPORTED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.location.GnssMeasurementsEvent.Callback void onStatusChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.GnssMeasurementsEvent.Callback.STATUS_NOT_SUPPORTED, android.location.GnssMeasurementsEvent.Callback.STATUS_READY, android.location.GnssMeasurementsEvent.Callback.STATUS_LOCATION_DISABLED, android.location.GnssMeasurementsEvent.Callback.STATUS_NOT_ALLOWED}"></val>
        </annotation>
    </item>
    <item name="android.location.GnssNavigationMessage.Callback void onStatusChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.GnssNavigationMessage.Callback.STATUS_NOT_SUPPORTED, android.location.GnssNavigationMessage.Callback.STATUS_READY, android.location.GnssNavigationMessage.Callback.STATUS_LOCATION_DISABLED}"></val>
        </annotation>
    </item>
    <item name="android.location.GnssSignalType android.location.GnssSignalType create(int, double, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.GnssStatus.CONSTELLATION_UNKNOWN, android.location.GnssStatus.CONSTELLATION_GPS, android.location.GnssStatus.CONSTELLATION_SBAS, android.location.GnssStatus.CONSTELLATION_GLONASS, android.location.GnssStatus.CONSTELLATION_QZSS, android.location.GnssStatus.CONSTELLATION_BEIDOU, android.location.GnssStatus.CONSTELLATION_GALILEO, android.location.GnssStatus.CONSTELLATION_IRNSS}"></val>
        </annotation>
    </item>
    <item name="android.location.GnssStatus.Builder android.location.GnssStatus.Builder addSatellite(int, int, float, float, float, boolean, boolean, boolean, boolean, float, boolean, float) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.GnssStatus.CONSTELLATION_UNKNOWN, android.location.GnssStatus.CONSTELLATION_GPS, android.location.GnssStatus.CONSTELLATION_SBAS, android.location.GnssStatus.CONSTELLATION_GLONASS, android.location.GnssStatus.CONSTELLATION_QZSS, android.location.GnssStatus.CONSTELLATION_BEIDOU, android.location.GnssStatus.CONSTELLATION_GALILEO, android.location.GnssStatus.CONSTELLATION_IRNSS}"></val>
        </annotation>
    </item>
    <item name="android.location.Location java.lang.String convert(double, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.Location.FORMAT_DEGREES, android.location.Location.FORMAT_MINUTES, android.location.Location.FORMAT_SECONDS}"></val>
        </annotation>
    </item>
    <item name="android.location.LocationManager void addTestProvider(java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean, boolean, int, int) 8">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.provider.ProviderProperties.POWER_USAGE_LOW, android.location.provider.ProviderProperties.POWER_USAGE_MEDIUM, android.location.provider.ProviderProperties.POWER_USAGE_HIGH}"></val>
        </annotation>
    </item>
    <item name="android.location.LocationManager void addTestProvider(java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean, boolean, int, int) 9">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.provider.ProviderProperties.ACCURACY_FINE, android.location.provider.ProviderProperties.ACCURACY_COARSE}"></val>
        </annotation>
    </item>
    <item name="android.location.LocationRequest.Builder android.location.LocationRequest.Builder setQuality(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.LocationRequest.QUALITY_LOW_POWER, android.location.LocationRequest.QUALITY_BALANCED_POWER_ACCURACY, android.location.LocationRequest.QUALITY_HIGH_ACCURACY}"></val>
        </annotation>
    </item>
    <item name="android.location.provider.ProviderProperties.Builder android.location.provider.ProviderProperties.Builder setAccuracy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.provider.ProviderProperties.ACCURACY_FINE, android.location.provider.ProviderProperties.ACCURACY_COARSE}"></val>
        </annotation>
    </item>
    <item name="android.location.provider.ProviderProperties.Builder android.location.provider.ProviderProperties.Builder setPowerUsage(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.location.provider.ProviderProperties.POWER_USAGE_LOW, android.location.provider.ProviderProperties.POWER_USAGE_MEDIUM, android.location.provider.ProviderProperties.POWER_USAGE_HIGH}"></val>
        </annotation>
    </item>
    <item name="android.media.ApplicationMediaCapabilities boolean isHdrTypeSupported(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaFeature.HdrType.DOLBY_VISION, android.media.MediaFeature.HdrType.HDR10, android.media.MediaFeature.HdrType.HDR10_PLUS, android.media.MediaFeature.HdrType.HLG}"></val>
        </annotation>
    </item>
    <item name="android.media.ApplicationMediaCapabilities.Builder android.media.ApplicationMediaCapabilities.Builder addSupportedHdrType(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaFeature.HdrType.DOLBY_VISION, android.media.MediaFeature.HdrType.HDR10, android.media.MediaFeature.HdrType.HDR10_PLUS, android.media.MediaFeature.HdrType.HLG}"></val>
        </annotation>
    </item>
    <item name="android.media.ApplicationMediaCapabilities.Builder android.media.ApplicationMediaCapabilities.Builder addUnsupportedHdrType(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaFeature.HdrType.DOLBY_VISION, android.media.MediaFeature.HdrType.HDR10, android.media.MediaFeature.HdrType.HDR10_PLUS, android.media.MediaFeature.HdrType.HLG}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioAttributes.Builder android.media.AudioAttributes.Builder setAllowedCapturePolicy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioAttributes.ALLOW_CAPTURE_BY_ALL, android.media.AudioAttributes.ALLOW_CAPTURE_BY_SYSTEM, android.media.AudioAttributes.ALLOW_CAPTURE_BY_NONE}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioAttributes.Builder android.media.AudioAttributes.Builder setContentType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioAttributes.CONTENT_TYPE_UNKNOWN, android.media.AudioAttributes.CONTENT_TYPE_SPEECH, android.media.AudioAttributes.CONTENT_TYPE_MUSIC, android.media.AudioAttributes.CONTENT_TYPE_MOVIE, android.media.AudioAttributes.CONTENT_TYPE_SONIFICATION}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioAttributes.Builder android.media.AudioAttributes.Builder setSpatializationBehavior(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioAttributes.SPATIALIZATION_BEHAVIOR_AUTO, android.media.AudioAttributes.SPATIALIZATION_BEHAVIOR_NEVER}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.AudioAttributes.Builder android.media.AudioAttributes.Builder setUsage(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioAttributes.USAGE_UNKNOWN, android.media.AudioAttributes.USAGE_MEDIA, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION_SIGNALLING, android.media.AudioAttributes.USAGE_ALARM, android.media.AudioAttributes.USAGE_NOTIFICATION, android.media.AudioAttributes.USAGE_NOTIFICATION_RINGTONE, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_REQUEST, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_INSTANT, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_DELAYED, android.media.AudioAttributes.USAGE_NOTIFICATION_EVENT, android.media.AudioAttributes.USAGE_ASSISTANCE_ACCESSIBILITY, android.media.AudioAttributes.USAGE_ASSISTANCE_NAVIGATION_GUIDANCE, android.media.AudioAttributes.USAGE_ASSISTANCE_SONIFICATION, android.media.AudioAttributes.USAGE_GAME, android.media.AudioAttributes.USAGE_ASSISTANT}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioFormat.Builder android.media.AudioFormat.Builder setEncoding(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioFormat.ENCODING_DEFAULT, android.media.AudioFormat.ENCODING_PCM_16BIT, android.media.AudioFormat.ENCODING_PCM_8BIT, android.media.AudioFormat.ENCODING_PCM_FLOAT, android.media.AudioFormat.ENCODING_AC3, android.media.AudioFormat.ENCODING_E_AC3, android.media.AudioFormat.ENCODING_DTS, android.media.AudioFormat.ENCODING_DTS_HD, android.media.AudioFormat.ENCODING_MP3, android.media.AudioFormat.ENCODING_AAC_LC, android.media.AudioFormat.ENCODING_AAC_HE_V1, android.media.AudioFormat.ENCODING_AAC_HE_V2, android.media.AudioFormat.ENCODING_IEC61937, android.media.AudioFormat.ENCODING_DOLBY_TRUEHD, android.media.AudioFormat.ENCODING_AAC_ELD, android.media.AudioFormat.ENCODING_AAC_XHE, android.media.AudioFormat.ENCODING_AC4, android.media.AudioFormat.ENCODING_E_AC3_JOC, android.media.AudioFormat.ENCODING_DOLBY_MAT, android.media.AudioFormat.ENCODING_OPUS, android.media.AudioFormat.ENCODING_PCM_24BIT_PACKED, android.media.AudioFormat.ENCODING_PCM_32BIT, android.media.AudioFormat.ENCODING_MPEGH_BL_L3, android.media.AudioFormat.ENCODING_MPEGH_BL_L4, android.media.AudioFormat.ENCODING_MPEGH_LC_L3, android.media.AudioFormat.ENCODING_MPEGH_LC_L4, android.media.AudioFormat.ENCODING_DTS_UHD_P1, android.media.AudioFormat.ENCODING_DRA, android.media.AudioFormat.ENCODING_DTS_HD_MA, android.media.AudioFormat.ENCODING_DTS_UHD_P2, android.media.AudioFormat.ENCODING_DSD}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager android.media.AudioDeviceInfo[] getDevices(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.GET_DEVICES_INPUTS, android.media.AudioManager.GET_DEVICES_OUTPUTS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager boolean isSurroundFormatEnabled(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioFormat.ENCODING_AC3, android.media.AudioFormat.ENCODING_E_AC3, android.media.AudioFormat.ENCODING_DTS, android.media.AudioFormat.ENCODING_DTS_HD, android.media.AudioFormat.ENCODING_AAC_LC, android.media.AudioFormat.ENCODING_DOLBY_TRUEHD, android.media.AudioFormat.ENCODING_AC4, android.media.AudioFormat.ENCODING_E_AC3_JOC, android.media.AudioFormat.ENCODING_DOLBY_MAT, android.media.AudioFormat.ENCODING_MPEGH_BL_L3, android.media.AudioFormat.ENCODING_MPEGH_BL_L4, android.media.AudioFormat.ENCODING_MPEGH_LC_L3, android.media.AudioFormat.ENCODING_MPEGH_LC_L4, android.media.AudioFormat.ENCODING_DTS_UHD_P1, android.media.AudioFormat.ENCODING_DRA, android.media.AudioFormat.ENCODING_DTS_HD_MA, android.media.AudioFormat.ENCODING_DTS_UHD_P2}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager boolean setEncodedSurroundMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.ENCODED_SURROUND_OUTPUT_UNKNOWN, android.media.AudioManager.ENCODED_SURROUND_OUTPUT_AUTO, android.media.AudioManager.ENCODED_SURROUND_OUTPUT_NEVER, android.media.AudioManager.ENCODED_SURROUND_OUTPUT_ALWAYS, android.media.AudioManager.ENCODED_SURROUND_OUTPUT_MANUAL}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager boolean setSurroundFormatEnabled(int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioFormat.ENCODING_AC3, android.media.AudioFormat.ENCODING_E_AC3, android.media.AudioFormat.ENCODING_DTS, android.media.AudioFormat.ENCODING_DTS_HD, android.media.AudioFormat.ENCODING_AAC_LC, android.media.AudioFormat.ENCODING_DOLBY_TRUEHD, android.media.AudioFormat.ENCODING_AC4, android.media.AudioFormat.ENCODING_E_AC3_JOC, android.media.AudioFormat.ENCODING_DOLBY_MAT, android.media.AudioFormat.ENCODING_MPEGH_BL_L3, android.media.AudioFormat.ENCODING_MPEGH_BL_L4, android.media.AudioFormat.ENCODING_MPEGH_LC_L3, android.media.AudioFormat.ENCODING_MPEGH_LC_L4, android.media.AudioFormat.ENCODING_DTS_UHD_P1, android.media.AudioFormat.ENCODING_DRA, android.media.AudioFormat.ENCODING_DTS_HD_MA, android.media.AudioFormat.ENCODING_DTS_UHD_P2}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager float getStreamVolumeDb(int, int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.STREAM_VOICE_CALL, android.media.AudioManager.STREAM_SYSTEM, android.media.AudioManager.STREAM_RING, android.media.AudioManager.STREAM_MUSIC, android.media.AudioManager.STREAM_ALARM, android.media.AudioManager.STREAM_NOTIFICATION, android.media.AudioManager.STREAM_DTMF, android.media.AudioManager.STREAM_ACCESSIBILITY}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager float getStreamVolumeDb(int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioDeviceInfo.TYPE_BUILTIN_EARPIECE, android.media.AudioDeviceInfo.TYPE_BUILTIN_SPEAKER, android.media.AudioDeviceInfo.TYPE_WIRED_HEADSET, android.media.AudioDeviceInfo.TYPE_WIRED_HEADPHONES, android.media.AudioDeviceInfo.TYPE_BLUETOOTH_SCO, android.media.AudioDeviceInfo.TYPE_BLUETOOTH_A2DP, android.media.AudioDeviceInfo.TYPE_HDMI, android.media.AudioDeviceInfo.TYPE_DOCK, android.media.AudioDeviceInfo.TYPE_USB_ACCESSORY, android.media.AudioDeviceInfo.TYPE_USB_DEVICE, android.media.AudioDeviceInfo.TYPE_USB_HEADSET, android.media.AudioDeviceInfo.TYPE_TELEPHONY, android.media.AudioDeviceInfo.TYPE_LINE_ANALOG, android.media.AudioDeviceInfo.TYPE_HDMI_ARC, android.media.AudioDeviceInfo.TYPE_HDMI_EARC, android.media.AudioDeviceInfo.TYPE_LINE_DIGITAL, android.media.AudioDeviceInfo.TYPE_FM, android.media.AudioDeviceInfo.TYPE_AUX_LINE, android.media.AudioDeviceInfo.TYPE_IP, android.media.AudioDeviceInfo.TYPE_BUS, android.media.AudioDeviceInfo.TYPE_HEARING_AID, android.media.AudioDeviceInfo.TYPE_BUILTIN_SPEAKER_SAFE, android.media.AudioDeviceInfo.TYPE_BLE_HEADSET, android.media.AudioDeviceInfo.TYPE_BLE_SPEAKER, android.media.AudioDeviceInfo.TYPE_BLE_BROADCAST, android.media.AudioDeviceInfo.TYPE_DOCK_ANALOG}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager java.util.Set&lt;java.lang.Integer&gt; getSupportedDeviceTypes(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.GET_DEVICES_INPUTS, android.media.AudioManager.GET_DEVICES_OUTPUTS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager void adjustStreamVolume(int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager void adjustSuggestedStreamVolume(int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager void adjustVolume(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager void adjustVolumeGroupVolume(int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager void playSoundEffect(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FX_KEY_CLICK, android.media.AudioManager.FX_FOCUS_NAVIGATION_UP, android.media.AudioManager.FX_FOCUS_NAVIGATION_DOWN, android.media.AudioManager.FX_FOCUS_NAVIGATION_LEFT, android.media.AudioManager.FX_FOCUS_NAVIGATION_RIGHT, android.media.AudioManager.FX_KEYPRESS_STANDARD, android.media.AudioManager.FX_KEYPRESS_SPACEBAR, android.media.AudioManager.FX_KEYPRESS_DELETE, android.media.AudioManager.FX_KEYPRESS_RETURN, android.media.AudioManager.FX_KEYPRESS_INVALID, android.media.AudioManager.FX_BACK}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager void playSoundEffect(int, float) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FX_KEY_CLICK, android.media.AudioManager.FX_FOCUS_NAVIGATION_UP, android.media.AudioManager.FX_FOCUS_NAVIGATION_DOWN, android.media.AudioManager.FX_FOCUS_NAVIGATION_LEFT, android.media.AudioManager.FX_FOCUS_NAVIGATION_RIGHT, android.media.AudioManager.FX_KEYPRESS_STANDARD, android.media.AudioManager.FX_KEYPRESS_SPACEBAR, android.media.AudioManager.FX_KEYPRESS_DELETE, android.media.AudioManager.FX_KEYPRESS_RETURN, android.media.AudioManager.FX_KEYPRESS_INVALID, android.media.AudioManager.FX_BACK}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager void setAllowedCapturePolicy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioAttributes.ALLOW_CAPTURE_BY_ALL, android.media.AudioAttributes.ALLOW_CAPTURE_BY_SYSTEM, android.media.AudioAttributes.ALLOW_CAPTURE_BY_NONE}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager void setMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.MODE_NORMAL, android.media.AudioManager.MODE_RINGTONE, android.media.AudioManager.MODE_IN_CALL, android.media.AudioManager.MODE_IN_COMMUNICATION, android.media.AudioManager.MODE_CALL_SCREENING, android.media.AudioManager.MODE_CALL_REDIRECT, android.media.AudioManager.MODE_COMMUNICATION_REDIRECT}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager void setStreamVolume(int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.AudioManager.OnModeChangedListener void onModeChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioManager.MODE_NORMAL, android.media.AudioManager.MODE_RINGTONE, android.media.AudioManager.MODE_IN_CALL, android.media.AudioManager.MODE_IN_COMMUNICATION, android.media.AudioManager.MODE_CALL_SCREENING, android.media.AudioManager.MODE_CALL_REDIRECT, android.media.AudioManager.MODE_COMMUNICATION_REDIRECT}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.AudioMixerAttributes.Builder android.media.AudioMixerAttributes.Builder setMixerBehavior(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioMixerAttributes.MIXER_BEHAVIOR_DEFAULT, android.media.AudioMixerAttributes.MIXER_BEHAVIOR_BIT_PERFECT}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.AudioPlaybackCaptureConfiguration.Builder android.media.AudioPlaybackCaptureConfiguration.Builder addMatchingUsage(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioAttributes.USAGE_UNKNOWN, android.media.AudioAttributes.USAGE_MEDIA, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION_SIGNALLING, android.media.AudioAttributes.USAGE_ALARM, android.media.AudioAttributes.USAGE_NOTIFICATION, android.media.AudioAttributes.USAGE_NOTIFICATION_RINGTONE, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_REQUEST, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_INSTANT, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_DELAYED, android.media.AudioAttributes.USAGE_NOTIFICATION_EVENT, android.media.AudioAttributes.USAGE_ASSISTANCE_ACCESSIBILITY, android.media.AudioAttributes.USAGE_ASSISTANCE_NAVIGATION_GUIDANCE, android.media.AudioAttributes.USAGE_ASSISTANCE_SONIFICATION, android.media.AudioAttributes.USAGE_GAME, android.media.AudioAttributes.USAGE_ASSISTANT}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioPlaybackCaptureConfiguration.Builder android.media.AudioPlaybackCaptureConfiguration.Builder excludeUsage(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioAttributes.USAGE_UNKNOWN, android.media.AudioAttributes.USAGE_MEDIA, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION_SIGNALLING, android.media.AudioAttributes.USAGE_ALARM, android.media.AudioAttributes.USAGE_NOTIFICATION, android.media.AudioAttributes.USAGE_NOTIFICATION_RINGTONE, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_REQUEST, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_INSTANT, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_DELAYED, android.media.AudioAttributes.USAGE_NOTIFICATION_EVENT, android.media.AudioAttributes.USAGE_ASSISTANCE_ACCESSIBILITY, android.media.AudioAttributes.USAGE_ASSISTANCE_NAVIGATION_GUIDANCE, android.media.AudioAttributes.USAGE_ASSISTANCE_SONIFICATION, android.media.AudioAttributes.USAGE_GAME, android.media.AudioAttributes.USAGE_ASSISTANT}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioPresentation.Builder android.media.AudioPresentation.Builder setMasteringIndication(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioPresentation.MASTERING_NOT_INDICATED, android.media.AudioPresentation.MASTERED_FOR_STEREO, android.media.AudioPresentation.MASTERED_FOR_SURROUND, android.media.AudioPresentation.MASTERED_FOR_3D, android.media.AudioPresentation.MASTERED_FOR_HEADPHONE}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioRecord boolean setPreferredMicrophoneDirection(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MicrophoneDirection.MIC_DIRECTION_UNSPECIFIED, android.media.MicrophoneDirection.MIC_DIRECTION_TOWARDS_USER, android.media.MicrophoneDirection.MIC_DIRECTION_AWAY_FROM_USER, android.media.MicrophoneDirection.MIC_DIRECTION_EXTERNAL}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioRecord int getTimestamp(android.media.AudioTimestamp, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioTimestamp.TIMEBASE_MONOTONIC, android.media.AudioTimestamp.TIMEBASE_BOOTTIME}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioRecord int read(byte[], int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioRecord.READ_BLOCKING, android.media.AudioRecord.READ_NON_BLOCKING}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioRecord int read(float[], int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioRecord.READ_BLOCKING, android.media.AudioRecord.READ_NON_BLOCKING}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioRecord int read(java.nio.ByteBuffer, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioRecord.READ_BLOCKING, android.media.AudioRecord.READ_NON_BLOCKING}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioRecord int read(short[], int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioRecord.READ_BLOCKING, android.media.AudioRecord.READ_NON_BLOCKING}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioRecord.Builder android.media.AudioRecord.Builder setAudioSource(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRecorder.AudioSource.DEFAULT, android.media.MediaRecorder.AudioSource.MIC, android.media.MediaRecorder.AudioSource.VOICE_UPLINK, android.media.MediaRecorder.AudioSource.VOICE_DOWNLINK, android.media.MediaRecorder.AudioSource.VOICE_CALL, android.media.MediaRecorder.AudioSource.CAMCORDER, android.media.MediaRecorder.AudioSource.VOICE_RECOGNITION, android.media.MediaRecorder.AudioSource.VOICE_COMMUNICATION, android.media.MediaRecorder.AudioSource.UNPROCESSED, android.media.MediaRecorder.AudioSource.VOICE_PERFORMANCE}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioTrack boolean setDualMonoMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioTrack.DUAL_MONO_MODE_OFF, android.media.AudioTrack.DUAL_MONO_MODE_LR, android.media.AudioTrack.DUAL_MONO_MODE_LL, android.media.AudioTrack.DUAL_MONO_MODE_RR}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioTrack int write(byte[], int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioTrack int write(float[], int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioTrack int write(java.nio.ByteBuffer, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioTrack int write(java.nio.ByteBuffer, int, int, long) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioTrack int write(short[], int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setEncapsulationMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioTrack.ENCAPSULATION_MODE_NONE, android.media.AudioTrack.ENCAPSULATION_MODE_ELEMENTARY_STREAM}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setPerformanceMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioTrack.PERFORMANCE_MODE_NONE, android.media.AudioTrack.PERFORMANCE_MODE_LOW_LATENCY, android.media.AudioTrack.PERFORMANCE_MODE_POWER_SAVING}"></val>
        </annotation>
    </item>
    <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setTransferMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioTrack.MODE_STATIC, android.media.AudioTrack.MODE_STREAM}"></val>
        </annotation>
    </item>
    <item name="android.media.CamcorderProfile android.media.EncoderProfiles getAll(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.CamcorderProfile.QUALITY_LOW, android.media.CamcorderProfile.QUALITY_HIGH, android.media.CamcorderProfile.QUALITY_QCIF, android.media.CamcorderProfile.QUALITY_CIF, android.media.CamcorderProfile.QUALITY_480P, android.media.CamcorderProfile.QUALITY_720P, android.media.CamcorderProfile.QUALITY_1080P, android.media.CamcorderProfile.QUALITY_QVGA, android.media.CamcorderProfile.QUALITY_2160P, android.media.CamcorderProfile.QUALITY_VGA, android.media.CamcorderProfile.QUALITY_4KDCI, android.media.CamcorderProfile.QUALITY_QHD, android.media.CamcorderProfile.QUALITY_2K, android.media.CamcorderProfile.QUALITY_8KUHD, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_LOW, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_HIGH, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_QCIF, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_CIF, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_480P, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_720P, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_1080P, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_QVGA, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_2160P, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_VGA, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_4KDCI, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_QHD, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_2K, android.media.CamcorderProfile.QUALITY_TIME_LAPSE_8KUHD, android.media.CamcorderProfile.QUALITY_HIGH_SPEED_LOW, android.media.CamcorderProfile.QUALITY_HIGH_SPEED_HIGH, android.media.CamcorderProfile.QUALITY_HIGH_SPEED_480P, android.media.CamcorderProfile.QUALITY_HIGH_SPEED_720P, android.media.CamcorderProfile.QUALITY_HIGH_SPEED_1080P, android.media.CamcorderProfile.QUALITY_HIGH_SPEED_2160P, android.media.CamcorderProfile.QUALITY_HIGH_SPEED_CIF, android.media.CamcorderProfile.QUALITY_HIGH_SPEED_VGA, android.media.CamcorderProfile.QUALITY_HIGH_SPEED_4KDCI}"></val>
        </annotation>
    </item>
    <item name="android.media.ExifInterface ExifInterface(java.io.InputStream, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.ExifInterface.STREAM_TYPE_FULL_IMAGE_DATA, android.media.ExifInterface.STREAM_TYPE_EXIF_DATA_ONLY}"></val>
        </annotation>
    </item>
    <item name="android.media.Image void setDataSpace(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.DataSpace.DATASPACE_DEPTH, android.hardware.DataSpace.DATASPACE_DYNAMIC_DEPTH, android.hardware.DataSpace.DATASPACE_HEIF, android.hardware.DataSpace.DATASPACE_JPEG_R, android.hardware.DataSpace.DATASPACE_UNKNOWN, android.hardware.DataSpace.DATASPACE_SCRGB_LINEAR, android.hardware.DataSpace.DATASPACE_SRGB, android.hardware.DataSpace.DATASPACE_SCRGB, android.hardware.DataSpace.DATASPACE_DISPLAY_P3, android.hardware.DataSpace.DATASPACE_BT2020_HLG, android.hardware.DataSpace.DATASPACE_BT2020_PQ, android.hardware.DataSpace.DATASPACE_ADOBE_RGB, android.hardware.DataSpace.DATASPACE_JFIF, android.hardware.DataSpace.DATASPACE_BT601_625, android.hardware.DataSpace.DATASPACE_BT601_525, android.hardware.DataSpace.DATASPACE_BT2020, android.hardware.DataSpace.DATASPACE_BT709, android.hardware.DataSpace.DATASPACE_DCI_P3, android.hardware.DataSpace.DATASPACE_SRGB_LINEAR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.ImageReader android.media.ImageReader newInstance(int, int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.media.ImageReader android.media.ImageReader newInstance(int, int, int, int, long) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.media.ImageReader android.media.ImageReader newInstance(int, int, int, int, long) 4">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.HardwareBuffer.USAGE_CPU_READ_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_READ_OFTEN, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_OFTEN, android.hardware.HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE, android.hardware.HardwareBuffer.USAGE_GPU_COLOR_OUTPUT, android.hardware.HardwareBuffer.USAGE_COMPOSER_OVERLAY, android.hardware.HardwareBuffer.USAGE_PROTECTED_CONTENT, android.hardware.HardwareBuffer.USAGE_VIDEO_ENCODE, android.hardware.HardwareBuffer.USAGE_GPU_DATA_BUFFER, android.hardware.HardwareBuffer.USAGE_SENSOR_DIRECT_DATA, android.hardware.HardwareBuffer.USAGE_GPU_CUBE_MAP, android.hardware.HardwareBuffer.USAGE_GPU_MIPMAP_COMPLETE, android.hardware.HardwareBuffer.USAGE_FRONT_BUFFER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.ImageReader.Builder android.media.ImageReader.Builder setDefaultDataSpace(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.DataSpace.DATASPACE_DEPTH, android.hardware.DataSpace.DATASPACE_DYNAMIC_DEPTH, android.hardware.DataSpace.DATASPACE_HEIF, android.hardware.DataSpace.DATASPACE_JPEG_R, android.hardware.DataSpace.DATASPACE_UNKNOWN, android.hardware.DataSpace.DATASPACE_SCRGB_LINEAR, android.hardware.DataSpace.DATASPACE_SRGB, android.hardware.DataSpace.DATASPACE_SCRGB, android.hardware.DataSpace.DATASPACE_DISPLAY_P3, android.hardware.DataSpace.DATASPACE_BT2020_HLG, android.hardware.DataSpace.DATASPACE_BT2020_PQ, android.hardware.DataSpace.DATASPACE_ADOBE_RGB, android.hardware.DataSpace.DATASPACE_JFIF, android.hardware.DataSpace.DATASPACE_BT601_625, android.hardware.DataSpace.DATASPACE_BT601_525, android.hardware.DataSpace.DATASPACE_BT2020, android.hardware.DataSpace.DATASPACE_BT709, android.hardware.DataSpace.DATASPACE_DCI_P3, android.hardware.DataSpace.DATASPACE_SRGB_LINEAR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.ImageReader.Builder android.media.ImageReader.Builder setDefaultHardwareBufferFormat(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.HardwareBuffer.RGBA_8888, android.hardware.HardwareBuffer.RGBA_FP16, android.hardware.HardwareBuffer.RGBA_1010102, android.hardware.HardwareBuffer.RGBX_8888, android.hardware.HardwareBuffer.RGB_888, android.hardware.HardwareBuffer.RGB_565, android.hardware.HardwareBuffer.BLOB, android.hardware.HardwareBuffer.YCBCR_420_888, android.hardware.HardwareBuffer.D_16, android.hardware.HardwareBuffer.D_24, android.hardware.HardwareBuffer.DS_24UI8, android.hardware.HardwareBuffer.D_FP32, android.hardware.HardwareBuffer.DS_FP32UI8, android.hardware.HardwareBuffer.S_UI8, android.hardware.HardwareBuffer.YCBCR_P010, android.hardware.HardwareBuffer.R_8, android.hardware.HardwareBuffer.R_16, android.hardware.HardwareBuffer.RG_1616, android.hardware.HardwareBuffer.RGBA_10101010}"></val>
        </annotation>
    </item>
    <item name="android.media.ImageReader.Builder android.media.ImageReader.Builder setImageFormat(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.media.ImageReader.Builder android.media.ImageReader.Builder setUsage(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.HardwareBuffer.USAGE_CPU_READ_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_READ_OFTEN, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_OFTEN, android.hardware.HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE, android.hardware.HardwareBuffer.USAGE_GPU_COLOR_OUTPUT, android.hardware.HardwareBuffer.USAGE_COMPOSER_OVERLAY, android.hardware.HardwareBuffer.USAGE_PROTECTED_CONTENT, android.hardware.HardwareBuffer.USAGE_VIDEO_ENCODE, android.hardware.HardwareBuffer.USAGE_GPU_DATA_BUFFER, android.hardware.HardwareBuffer.USAGE_SENSOR_DIRECT_DATA, android.hardware.HardwareBuffer.USAGE_GPU_CUBE_MAP, android.hardware.HardwareBuffer.USAGE_GPU_MIPMAP_COMPLETE, android.hardware.HardwareBuffer.USAGE_FRONT_BUFFER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.ImageWriter android.media.ImageWriter newInstance(android.view.Surface, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.media.ImageWriter.Builder android.media.ImageWriter.Builder setDataSpace(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.DataSpace.DATASPACE_DEPTH, android.hardware.DataSpace.DATASPACE_DYNAMIC_DEPTH, android.hardware.DataSpace.DATASPACE_HEIF, android.hardware.DataSpace.DATASPACE_JPEG_R, android.hardware.DataSpace.DATASPACE_UNKNOWN, android.hardware.DataSpace.DATASPACE_SCRGB_LINEAR, android.hardware.DataSpace.DATASPACE_SRGB, android.hardware.DataSpace.DATASPACE_SCRGB, android.hardware.DataSpace.DATASPACE_DISPLAY_P3, android.hardware.DataSpace.DATASPACE_BT2020_HLG, android.hardware.DataSpace.DATASPACE_BT2020_PQ, android.hardware.DataSpace.DATASPACE_ADOBE_RGB, android.hardware.DataSpace.DATASPACE_JFIF, android.hardware.DataSpace.DATASPACE_BT601_625, android.hardware.DataSpace.DATASPACE_BT601_525, android.hardware.DataSpace.DATASPACE_BT2020, android.hardware.DataSpace.DATASPACE_BT709, android.hardware.DataSpace.DATASPACE_DCI_P3, android.hardware.DataSpace.DATASPACE_SRGB_LINEAR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.ImageWriter.Builder android.media.ImageWriter.Builder setHardwareBufferFormat(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.HardwareBuffer.RGBA_8888, android.hardware.HardwareBuffer.RGBA_FP16, android.hardware.HardwareBuffer.RGBA_1010102, android.hardware.HardwareBuffer.RGBX_8888, android.hardware.HardwareBuffer.RGB_888, android.hardware.HardwareBuffer.RGB_565, android.hardware.HardwareBuffer.BLOB, android.hardware.HardwareBuffer.YCBCR_420_888, android.hardware.HardwareBuffer.D_16, android.hardware.HardwareBuffer.D_24, android.hardware.HardwareBuffer.DS_24UI8, android.hardware.HardwareBuffer.D_FP32, android.hardware.HardwareBuffer.DS_FP32UI8, android.hardware.HardwareBuffer.S_UI8, android.hardware.HardwareBuffer.YCBCR_P010, android.hardware.HardwareBuffer.R_8, android.hardware.HardwareBuffer.R_16, android.hardware.HardwareBuffer.RG_1616, android.hardware.HardwareBuffer.RGBA_10101010}"></val>
        </annotation>
    </item>
    <item name="android.media.ImageWriter.Builder android.media.ImageWriter.Builder setImageFormat(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGB_888, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.YCBCR_P010, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC, android.graphics.ImageFormat.JPEG_R}"></val>
        </annotation>
    </item>
    <item name="android.media.ImageWriter.Builder android.media.ImageWriter.Builder setUsage(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.hardware.HardwareBuffer.USAGE_CPU_READ_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_READ_OFTEN, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_OFTEN, android.hardware.HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE, android.hardware.HardwareBuffer.USAGE_GPU_COLOR_OUTPUT, android.hardware.HardwareBuffer.USAGE_COMPOSER_OVERLAY, android.hardware.HardwareBuffer.USAGE_PROTECTED_CONTENT, android.hardware.HardwareBuffer.USAGE_VIDEO_ENCODE, android.hardware.HardwareBuffer.USAGE_GPU_DATA_BUFFER, android.hardware.HardwareBuffer.USAGE_SENSOR_DIRECT_DATA, android.hardware.HardwareBuffer.USAGE_GPU_CUBE_MAP, android.hardware.HardwareBuffer.USAGE_GPU_MIPMAP_COMPLETE, android.hardware.HardwareBuffer.USAGE_FRONT_BUFFER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.MediaCas MediaCas(android.content.Context, int, java.lang.String, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_BACKGROUND, android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_SCAN, android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_PLAYBACK, android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_LIVE, android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_RECORD}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaCas MediaCas(android.content.Context, int, java.lang.String, int, android.os.Handler, android.media.MediaCas.EventListener) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_BACKGROUND, android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_SCAN, android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_PLAYBACK, android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_LIVE, android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_RECORD}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaCas android.media.MediaCas.Session openSession(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaCas.SESSION_USAGE_LIVE, android.media.MediaCas.SESSION_USAGE_PLAYBACK, android.media.MediaCas.SESSION_USAGE_RECORD, android.media.MediaCas.SESSION_USAGE_TIMESHIFT}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaCas android.media.MediaCas.Session openSession(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaCas.SCRAMBLING_MODE_RESERVED, android.media.MediaCas.SCRAMBLING_MODE_DVB_CSA1, android.media.MediaCas.SCRAMBLING_MODE_DVB_CSA2, android.media.MediaCas.SCRAMBLING_MODE_DVB_CSA3_STANDARD, android.media.MediaCas.SCRAMBLING_MODE_DVB_CSA3_MINIMAL, android.media.MediaCas.SCRAMBLING_MODE_DVB_CSA3_ENHANCE, android.media.MediaCas.SCRAMBLING_MODE_DVB_CISSA_V1, android.media.MediaCas.SCRAMBLING_MODE_DVB_IDSA, android.media.MediaCas.SCRAMBLING_MODE_MULTI2, android.media.MediaCas.SCRAMBLING_MODE_AES128, android.media.MediaCas.SCRAMBLING_MODE_AES_CBC, android.media.MediaCas.SCRAMBLING_MODE_AES_ECB, android.media.MediaCas.SCRAMBLING_MODE_AES_SCTE52, android.media.MediaCas.SCRAMBLING_MODE_TDES_ECB, android.media.MediaCas.SCRAMBLING_MODE_TDES_SCTE52}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaCas.EventListener void onPluginStatusUpdate(android.media.MediaCas, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaCas.PLUGIN_STATUS_PHYSICAL_MODULE_CHANGED, android.media.MediaCas.PLUGIN_STATUS_SESSION_NUMBER_CHANGED}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaCodec void configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaCodec.CONFIGURE_FLAG_ENCODE, android.media.MediaCodec.CONFIGURE_FLAG_USE_BLOCK_MODEL, android.media.MediaCodec.CONFIGURE_FLAG_USE_CRYPTO_ASYNC}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.MediaCodec void configure(android.media.MediaFormat, android.view.Surface, int, android.media.MediaDescrambler) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaCodec.CONFIGURE_FLAG_ENCODE, android.media.MediaCodec.CONFIGURE_FLAG_USE_BLOCK_MODEL, android.media.MediaCodec.CONFIGURE_FLAG_USE_CRYPTO_ASYNC}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.MediaCodec void setVideoScalingMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT, android.media.MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaCodec.BufferInfo void set(int, int, long, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaCodec.BUFFER_FLAG_SYNC_FRAME, android.media.MediaCodec.BUFFER_FLAG_KEY_FRAME, android.media.MediaCodec.BUFFER_FLAG_CODEC_CONFIG, android.media.MediaCodec.BUFFER_FLAG_END_OF_STREAM, android.media.MediaCodec.BUFFER_FLAG_PARTIAL_FRAME, android.media.MediaCodec.BUFFER_FLAG_DECODE_ONLY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.MediaCodec.QueueRequest android.media.MediaCodec.QueueRequest setFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaCodec.BUFFER_FLAG_SYNC_FRAME, android.media.MediaCodec.BUFFER_FLAG_KEY_FRAME, android.media.MediaCodec.BUFFER_FLAG_CODEC_CONFIG, android.media.MediaCodec.BUFFER_FLAG_END_OF_STREAM, android.media.MediaCodec.BUFFER_FLAG_PARTIAL_FRAME, android.media.MediaCodec.BUFFER_FLAG_DECODE_ONLY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.MediaDrm android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaDrm.KEY_TYPE_STREAMING, android.media.MediaDrm.KEY_TYPE_OFFLINE, android.media.MediaDrm.KEY_TYPE_RELEASE}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaDrm boolean isCryptoSchemeSupported(java.util.UUID, java.lang.String, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaDrm.SECURITY_LEVEL_UNKNOWN, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_ALL}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaDrm boolean requiresSecureDecoder(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaDrm.SECURITY_LEVEL_UNKNOWN, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_ALL}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaDrm byte[] openSession(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaDrm.SECURITY_LEVEL_UNKNOWN, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_ALL}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaDrm.OnEventListener void onEvent(android.media.MediaDrm, byte[], int, int, byte[]) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaDrm.EVENT_PROVISION_REQUIRED, android.media.MediaDrm.EVENT_KEY_REQUIRED, android.media.MediaDrm.EVENT_KEY_EXPIRED, android.media.MediaDrm.EVENT_VENDOR_DEFINED, android.media.MediaDrm.EVENT_SESSION_RECLAIMED}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaExtractor void seekTo(long, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaExtractor.SEEK_TO_PREVIOUS_SYNC, android.media.MediaExtractor.SEEK_TO_NEXT_SYNC, android.media.MediaExtractor.SEEK_TO_CLOSEST_SYNC}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadata android.graphics.Bitmap getBitmap(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_ART, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadata android.media.Rating getRating(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_USER_RATING, android.media.MediaMetadata.METADATA_KEY_RATING}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadata java.lang.CharSequence getText(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_TITLE, android.media.MediaMetadata.METADATA_KEY_ARTIST, android.media.MediaMetadata.METADATA_KEY_ALBUM, android.media.MediaMetadata.METADATA_KEY_AUTHOR, android.media.MediaMetadata.METADATA_KEY_WRITER, android.media.MediaMetadata.METADATA_KEY_COMPOSER, android.media.MediaMetadata.METADATA_KEY_COMPILATION, android.media.MediaMetadata.METADATA_KEY_DATE, android.media.MediaMetadata.METADATA_KEY_GENRE, android.media.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata.METADATA_KEY_ART_URI, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata.METADATA_KEY_MEDIA_ID, android.media.MediaMetadata.METADATA_KEY_MEDIA_URI}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadata java.lang.String getString(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_TITLE, android.media.MediaMetadata.METADATA_KEY_ARTIST, android.media.MediaMetadata.METADATA_KEY_ALBUM, android.media.MediaMetadata.METADATA_KEY_AUTHOR, android.media.MediaMetadata.METADATA_KEY_WRITER, android.media.MediaMetadata.METADATA_KEY_COMPOSER, android.media.MediaMetadata.METADATA_KEY_COMPILATION, android.media.MediaMetadata.METADATA_KEY_DATE, android.media.MediaMetadata.METADATA_KEY_GENRE, android.media.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata.METADATA_KEY_ART_URI, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata.METADATA_KEY_MEDIA_ID, android.media.MediaMetadata.METADATA_KEY_MEDIA_URI}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadata long getLong(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_DURATION, android.media.MediaMetadata.METADATA_KEY_YEAR, android.media.MediaMetadata.METADATA_KEY_TRACK_NUMBER, android.media.MediaMetadata.METADATA_KEY_NUM_TRACKS, android.media.MediaMetadata.METADATA_KEY_DISC_NUMBER, android.media.MediaMetadata.METADATA_KEY_BT_FOLDER_TYPE}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putBitmap(java.lang.String, android.graphics.Bitmap) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_ART, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putLong(java.lang.String, long) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_DURATION, android.media.MediaMetadata.METADATA_KEY_YEAR, android.media.MediaMetadata.METADATA_KEY_TRACK_NUMBER, android.media.MediaMetadata.METADATA_KEY_NUM_TRACKS, android.media.MediaMetadata.METADATA_KEY_DISC_NUMBER, android.media.MediaMetadata.METADATA_KEY_BT_FOLDER_TYPE}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putRating(java.lang.String, android.media.Rating) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_USER_RATING, android.media.MediaMetadata.METADATA_KEY_RATING}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putString(java.lang.String, java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_TITLE, android.media.MediaMetadata.METADATA_KEY_ARTIST, android.media.MediaMetadata.METADATA_KEY_ALBUM, android.media.MediaMetadata.METADATA_KEY_AUTHOR, android.media.MediaMetadata.METADATA_KEY_WRITER, android.media.MediaMetadata.METADATA_KEY_COMPOSER, android.media.MediaMetadata.METADATA_KEY_COMPILATION, android.media.MediaMetadata.METADATA_KEY_DATE, android.media.MediaMetadata.METADATA_KEY_GENRE, android.media.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata.METADATA_KEY_ART_URI, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata.METADATA_KEY_MEDIA_ID, android.media.MediaMetadata.METADATA_KEY_MEDIA_URI}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putText(java.lang.String, java.lang.CharSequence) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_TITLE, android.media.MediaMetadata.METADATA_KEY_ARTIST, android.media.MediaMetadata.METADATA_KEY_ALBUM, android.media.MediaMetadata.METADATA_KEY_AUTHOR, android.media.MediaMetadata.METADATA_KEY_WRITER, android.media.MediaMetadata.METADATA_KEY_COMPOSER, android.media.MediaMetadata.METADATA_KEY_COMPILATION, android.media.MediaMetadata.METADATA_KEY_DATE, android.media.MediaMetadata.METADATA_KEY_GENRE, android.media.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata.METADATA_KEY_ART_URI, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata.METADATA_KEY_MEDIA_ID, android.media.MediaMetadata.METADATA_KEY_MEDIA_URI}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getFrameAtTime(long, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaMetadataRetriever.OPTION_PREVIOUS_SYNC, android.media.MediaMetadataRetriever.OPTION_NEXT_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getFrameAtTime(long, int, android.media.MediaMetadataRetriever.BitmapParams) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaMetadataRetriever.OPTION_PREVIOUS_SYNC, android.media.MediaMetadataRetriever.OPTION_NEXT_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getScaledFrameAtTime(long, int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaMetadataRetriever.OPTION_PREVIOUS_SYNC, android.media.MediaMetadataRetriever.OPTION_NEXT_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getScaledFrameAtTime(long, int, int, int, android.media.MediaMetadataRetriever.BitmapParams) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaMetadataRetriever.OPTION_PREVIOUS_SYNC, android.media.MediaMetadataRetriever.OPTION_NEXT_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMuxer MediaMuxer(java.io.FileDescriptor, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_WEBM, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_3GPP, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_HEIF, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_OGG}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaMuxer MediaMuxer(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_WEBM, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_3GPP, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_HEIF, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_OGG}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaParser android.media.MediaParser create(android.media.MediaParser.OutputConsumer, java.lang.String...) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaParser.PARSER_NAME_UNKNOWN, android.media.MediaParser.PARSER_NAME_MATROSKA, android.media.MediaParser.PARSER_NAME_FMP4, android.media.MediaParser.PARSER_NAME_MP4, android.media.MediaParser.PARSER_NAME_MP3, android.media.MediaParser.PARSER_NAME_ADTS, android.media.MediaParser.PARSER_NAME_AC3, android.media.MediaParser.PARSER_NAME_TS, android.media.MediaParser.PARSER_NAME_FLV, android.media.MediaParser.PARSER_NAME_OGG, android.media.MediaParser.PARSER_NAME_PS, android.media.MediaParser.PARSER_NAME_WAV, android.media.MediaParser.PARSER_NAME_AMR, android.media.MediaParser.PARSER_NAME_AC4, android.media.MediaParser.PARSER_NAME_FLAC}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaParser android.media.MediaParser createByName(java.lang.String, android.media.MediaParser.OutputConsumer) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaParser.PARSER_NAME_UNKNOWN, android.media.MediaParser.PARSER_NAME_MATROSKA, android.media.MediaParser.PARSER_NAME_FMP4, android.media.MediaParser.PARSER_NAME_MP4, android.media.MediaParser.PARSER_NAME_MP3, android.media.MediaParser.PARSER_NAME_ADTS, android.media.MediaParser.PARSER_NAME_AC3, android.media.MediaParser.PARSER_NAME_TS, android.media.MediaParser.PARSER_NAME_FLV, android.media.MediaParser.PARSER_NAME_OGG, android.media.MediaParser.PARSER_NAME_PS, android.media.MediaParser.PARSER_NAME_WAV, android.media.MediaParser.PARSER_NAME_AMR, android.media.MediaParser.PARSER_NAME_AC4, android.media.MediaParser.PARSER_NAME_FLAC}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaParser android.media.MediaParser setParameter(java.lang.String, java.lang.Object) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaParser.PARAMETER_ADTS_ENABLE_CBR_SEEKING, android.media.MediaParser.PARAMETER_AMR_ENABLE_CBR_SEEKING, android.media.MediaParser.PARAMETER_FLAC_DISABLE_ID3, android.media.MediaParser.PARAMETER_MP4_IGNORE_EDIT_LISTS, android.media.MediaParser.PARAMETER_MP4_IGNORE_TFDT_BOX, android.media.MediaParser.PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMES, android.media.MediaParser.PARAMETER_MATROSKA_DISABLE_CUES_SEEKING, android.media.MediaParser.PARAMETER_MP3_DISABLE_ID3, android.media.MediaParser.PARAMETER_MP3_ENABLE_CBR_SEEKING, android.media.MediaParser.PARAMETER_MP3_ENABLE_INDEX_SEEKING, android.media.MediaParser.PARAMETER_TS_MODE, android.media.MediaParser.PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMES, android.media.MediaParser.PARAMETER_TS_IGNORE_AAC_STREAM, android.media.MediaParser.PARAMETER_TS_IGNORE_AVC_STREAM, android.media.MediaParser.PARAMETER_TS_IGNORE_SPLICE_INFO_STREAM, android.media.MediaParser.PARAMETER_TS_DETECT_ACCESS_UNITS, android.media.MediaParser.PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMS}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaParser boolean supportsParameter(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaParser.PARAMETER_ADTS_ENABLE_CBR_SEEKING, android.media.MediaParser.PARAMETER_AMR_ENABLE_CBR_SEEKING, android.media.MediaParser.PARAMETER_FLAC_DISABLE_ID3, android.media.MediaParser.PARAMETER_MP4_IGNORE_EDIT_LISTS, android.media.MediaParser.PARAMETER_MP4_IGNORE_TFDT_BOX, android.media.MediaParser.PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMES, android.media.MediaParser.PARAMETER_MATROSKA_DISABLE_CUES_SEEKING, android.media.MediaParser.PARAMETER_MP3_DISABLE_ID3, android.media.MediaParser.PARAMETER_MP3_ENABLE_CBR_SEEKING, android.media.MediaParser.PARAMETER_MP3_ENABLE_INDEX_SEEKING, android.media.MediaParser.PARAMETER_TS_MODE, android.media.MediaParser.PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMES, android.media.MediaParser.PARAMETER_TS_IGNORE_AAC_STREAM, android.media.MediaParser.PARAMETER_TS_IGNORE_AVC_STREAM, android.media.MediaParser.PARAMETER_TS_IGNORE_SPLICE_INFO_STREAM, android.media.MediaParser.PARAMETER_TS_DETECT_ACCESS_UNITS, android.media.MediaParser.PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMS}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaParser.OutputConsumer void onSampleCompleted(int, long, int, int, int, android.media.MediaCodec.CryptoInfo) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaParser.SAMPLE_FLAG_KEY_FRAME, android.media.MediaParser.SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATA, android.media.MediaParser.SAMPLE_FLAG_LAST_SAMPLE, android.media.MediaParser.SAMPLE_FLAG_ENCRYPTED, android.media.MediaParser.SAMPLE_FLAG_DECODE_ONLY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.MediaPlayer android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaDrm.KEY_TYPE_STREAMING, android.media.MediaDrm.KEY_TYPE_OFFLINE, android.media.MediaDrm.KEY_TYPE_RELEASE}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaPlayer java.lang.String getDrmPropertyString(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaDrm.PROPERTY_VENDOR, android.media.MediaDrm.PROPERTY_VERSION, android.media.MediaDrm.PROPERTY_DESCRIPTION, android.media.MediaDrm.PROPERTY_ALGORITHMS}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaPlayer void seekTo(long, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaPlayer.SEEK_PREVIOUS_SYNC, android.media.MediaPlayer.SEEK_NEXT_SYNC, android.media.MediaPlayer.SEEK_CLOSEST_SYNC, android.media.MediaPlayer.SEEK_CLOSEST}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaPlayer void setDrmPropertyString(java.lang.String, java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.MediaDrm.PROPERTY_VENDOR, android.media.MediaDrm.PROPERTY_VERSION, android.media.MediaDrm.PROPERTY_DESCRIPTION, android.media.MediaDrm.PROPERTY_ALGORITHMS}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaPlayer.OnDrmPreparedListener void onDrmPrepared(android.media.MediaPlayer, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaPlayer.PREPARE_DRM_STATUS_SUCCESS, android.media.MediaPlayer.PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR, android.media.MediaPlayer.PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR, android.media.MediaPlayer.PREPARE_DRM_STATUS_PREPARATION_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaRecorder boolean setPreferredMicrophoneDirection(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MicrophoneDirection.MIC_DIRECTION_UNSPECIFIED, android.media.MicrophoneDirection.MIC_DIRECTION_TOWARDS_USER, android.media.MicrophoneDirection.MIC_DIRECTION_AWAY_FROM_USER, android.media.MicrophoneDirection.MIC_DIRECTION_EXTERNAL}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaRecorder void setAudioEncoder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRecorder.AudioEncoder.DEFAULT, android.media.MediaRecorder.AudioEncoder.AMR_NB, android.media.MediaRecorder.AudioEncoder.AMR_WB, android.media.MediaRecorder.AudioEncoder.AAC, android.media.MediaRecorder.AudioEncoder.HE_AAC, android.media.MediaRecorder.AudioEncoder.AAC_ELD, android.media.MediaRecorder.AudioEncoder.VORBIS, android.media.MediaRecorder.AudioEncoder.OPUS}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaRecorder void setAudioSource(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRecorder.AudioSource.DEFAULT, android.media.MediaRecorder.AudioSource.MIC, android.media.MediaRecorder.AudioSource.VOICE_UPLINK, android.media.MediaRecorder.AudioSource.VOICE_DOWNLINK, android.media.MediaRecorder.AudioSource.VOICE_CALL, android.media.MediaRecorder.AudioSource.CAMCORDER, android.media.MediaRecorder.AudioSource.VOICE_RECOGNITION, android.media.MediaRecorder.AudioSource.VOICE_COMMUNICATION, android.media.MediaRecorder.AudioSource.UNPROCESSED, android.media.MediaRecorder.AudioSource.VOICE_PERFORMANCE}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaRecorder void setOutputFormat(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRecorder.OutputFormat.DEFAULT, android.media.MediaRecorder.OutputFormat.THREE_GPP, android.media.MediaRecorder.OutputFormat.MPEG_4, android.media.MediaRecorder.OutputFormat.AMR_NB, android.media.MediaRecorder.OutputFormat.AMR_WB, android.media.MediaRecorder.OutputFormat.AAC_ADTS, android.media.MediaRecorder.OutputFormat.MPEG_2_TS, android.media.MediaRecorder.OutputFormat.WEBM, android.media.MediaRecorder.OutputFormat.OGG}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaRecorder void setVideoEncoder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRecorder.VideoEncoder.DEFAULT, android.media.MediaRecorder.VideoEncoder.H263, android.media.MediaRecorder.VideoEncoder.H264, android.media.MediaRecorder.VideoEncoder.MPEG_4_SP, android.media.MediaRecorder.VideoEncoder.VP8, android.media.MediaRecorder.VideoEncoder.HEVC, android.media.MediaRecorder.VideoEncoder.VP9, android.media.MediaRecorder.VideoEncoder.DOLBY_VISION, android.media.MediaRecorder.VideoEncoder.AV1}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaRoute2Info.Builder android.media.MediaRoute2Info.Builder setConnectionState(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRoute2Info.CONNECTION_STATE_DISCONNECTED, android.media.MediaRoute2Info.CONNECTION_STATE_CONNECTING, android.media.MediaRoute2Info.CONNECTION_STATE_CONNECTED}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaRoute2Info.Builder android.media.MediaRoute2Info.Builder setSuitabilityStatus(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRoute2Info.SUITABILITY_STATUS_SUITABLE_FOR_DEFAULT_TRANSFER, android.media.MediaRoute2Info.SUITABILITY_STATUS_SUITABLE_FOR_MANUAL_TRANSFER, android.media.MediaRoute2Info.SUITABILITY_STATUS_NOT_SUITABLE_FOR_TRANSFER}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaRoute2Info.Builder android.media.MediaRoute2Info.Builder setType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRoute2Info.TYPE_UNKNOWN, android.media.MediaRoute2Info.TYPE_BUILTIN_SPEAKER, android.media.MediaRoute2Info.TYPE_WIRED_HEADSET, android.media.MediaRoute2Info.TYPE_WIRED_HEADPHONES, android.media.MediaRoute2Info.TYPE_BLUETOOTH_A2DP, android.media.MediaRoute2Info.TYPE_HDMI, android.media.MediaRoute2Info.TYPE_HDMI_ARC, android.media.MediaRoute2Info.TYPE_HDMI_EARC, android.media.MediaRoute2Info.TYPE_USB_DEVICE, android.media.MediaRoute2Info.TYPE_USB_ACCESSORY, android.media.MediaRoute2Info.TYPE_DOCK, android.media.MediaRoute2Info.TYPE_USB_HEADSET, android.media.MediaRoute2Info.TYPE_HEARING_AID, android.media.MediaRoute2Info.TYPE_BLE_HEADSET, android.media.MediaRoute2Info.TYPE_REMOTE_TV, android.media.MediaRoute2Info.TYPE_REMOTE_SPEAKER, android.media.MediaRoute2Info.TYPE_REMOTE_AUDIO_VIDEO_RECEIVER, android.media.MediaRoute2Info.TYPE_REMOTE_TABLET, android.media.MediaRoute2Info.TYPE_REMOTE_TABLET_DOCKED, android.media.MediaRoute2Info.TYPE_REMOTE_COMPUTER, android.media.MediaRoute2Info.TYPE_REMOTE_GAME_CONSOLE, android.media.MediaRoute2Info.TYPE_REMOTE_CAR, android.media.MediaRoute2Info.TYPE_REMOTE_SMARTWATCH, android.media.MediaRoute2Info.TYPE_REMOTE_SMARTPHONE, android.media.MediaRoute2Info.TYPE_GROUP}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaRoute2Info.Builder android.media.MediaRoute2Info.Builder setVolumeHandling(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRoute2Info.PLAYBACK_VOLUME_FIXED, android.media.MediaRoute2Info.PLAYBACK_VOLUME_VARIABLE}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaRoute2ProviderService void notifyRequestFailed(long, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRoute2ProviderService.REASON_UNKNOWN_ERROR, android.media.MediaRoute2ProviderService.REASON_REJECTED, android.media.MediaRoute2ProviderService.REASON_NETWORK_ERROR, android.media.MediaRoute2ProviderService.REASON_ROUTE_NOT_AVAILABLE, android.media.MediaRoute2ProviderService.REASON_INVALID_COMMAND}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaRouter.UserRouteInfo void setPlaybackType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRouter.RouteInfo.PLAYBACK_TYPE_LOCAL, android.media.MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE}"></val>
        </annotation>
    </item>
    <item name="android.media.MediaRouter.UserRouteInfo void setVolumeHandling(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRouter.RouteInfo.PLAYBACK_VOLUME_FIXED, android.media.MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE}"></val>
        </annotation>
    </item>
    <item name="android.media.MicrophoneDirection boolean setPreferredMicrophoneDirection(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MicrophoneDirection.MIC_DIRECTION_UNSPECIFIED, android.media.MicrophoneDirection.MIC_DIRECTION_TOWARDS_USER, android.media.MicrophoneDirection.MIC_DIRECTION_AWAY_FROM_USER, android.media.MicrophoneDirection.MIC_DIRECTION_EXTERNAL}"></val>
        </annotation>
    </item>
    <item name="android.media.PlaybackParams android.media.PlaybackParams setAudioFallbackMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.PlaybackParams.AUDIO_FALLBACK_MODE_DEFAULT, android.media.PlaybackParams.AUDIO_FALLBACK_MODE_MUTE, android.media.PlaybackParams.AUDIO_FALLBACK_MODE_FAIL}"></val>
        </annotation>
    </item>
    <item name="android.media.Rating android.media.Rating newStarRating(int, float) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.Rating.RATING_3_STARS, android.media.Rating.RATING_4_STARS, android.media.Rating.RATING_5_STARS}"></val>
        </annotation>
    </item>
    <item name="android.media.Rating android.media.Rating newUnratedRating(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.Rating.RATING_NONE, android.media.Rating.RATING_HEART, android.media.Rating.RATING_THUMB_UP_DOWN, android.media.Rating.RATING_3_STARS, android.media.Rating.RATING_4_STARS, android.media.Rating.RATING_5_STARS, android.media.Rating.RATING_PERCENTAGE}"></val>
        </annotation>
    </item>
    <item name="android.media.RoutingSessionInfo.Builder android.media.RoutingSessionInfo.Builder setTransferReason(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.RoutingSessionInfo.TRANSFER_REASON_FALLBACK, android.media.RoutingSessionInfo.TRANSFER_REASON_SYSTEM_REQUEST, android.media.RoutingSessionInfo.TRANSFER_REASON_APP}"></val>
        </annotation>
    </item>
    <item name="android.media.RoutingSessionInfo.Builder android.media.RoutingSessionInfo.Builder setVolumeHandling(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaRoute2Info.PLAYBACK_VOLUME_FIXED, android.media.MediaRoute2Info.PLAYBACK_VOLUME_VARIABLE}"></val>
        </annotation>
    </item>
    <item name="android.media.SyncParams android.media.SyncParams setAudioAdjustMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.SyncParams.AUDIO_ADJUST_MODE_DEFAULT, android.media.SyncParams.AUDIO_ADJUST_MODE_STRETCH, android.media.SyncParams.AUDIO_ADJUST_MODE_RESAMPLE}"></val>
        </annotation>
    </item>
    <item name="android.media.SyncParams android.media.SyncParams setSyncSource(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.SyncParams.SYNC_SOURCE_DEFAULT, android.media.SyncParams.SYNC_SOURCE_SYSTEM_CLOCK, android.media.SyncParams.SYNC_SOURCE_AUDIO, android.media.SyncParams.SYNC_SOURCE_VSYNC}"></val>
        </annotation>
    </item>
    <item name="android.media.VolumeProvider VolumeProvider(int, int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.VolumeProvider.VOLUME_CONTROL_FIXED, android.media.VolumeProvider.VOLUME_CONTROL_RELATIVE, android.media.VolumeProvider.VOLUME_CONTROL_ABSOLUTE}"></val>
        </annotation>
    </item>
    <item name="android.media.VolumeProvider VolumeProvider(int, int, int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.VolumeProvider.VOLUME_CONTROL_FIXED, android.media.VolumeProvider.VOLUME_CONTROL_RELATIVE, android.media.VolumeProvider.VOLUME_CONTROL_ABSOLUTE}"></val>
        </annotation>
    </item>
    <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration.Builder setInterpolatorType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_STEP, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_LINEAR, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_CUBIC, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_CUBIC_MONOTONIC}"></val>
        </annotation>
    </item>
    <item name="android.media.audiofx.Virtualizer boolean canVirtualize(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.audiofx.Virtualizer.VIRTUALIZATION_MODE_BINAURAL, android.media.audiofx.Virtualizer.VIRTUALIZATION_MODE_TRANSAURAL}"></val>
        </annotation>
    </item>
    <item name="android.media.audiofx.Virtualizer boolean forceVirtualizationMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.audiofx.Virtualizer.VIRTUALIZATION_MODE_AUTO, android.media.audiofx.Virtualizer.VIRTUALIZATION_MODE_BINAURAL, android.media.audiofx.Virtualizer.VIRTUALIZATION_MODE_TRANSAURAL}"></val>
        </annotation>
    </item>
    <item name="android.media.audiofx.Virtualizer boolean getSpeakerAngles(int, int, int[]) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.audiofx.Virtualizer.VIRTUALIZATION_MODE_BINAURAL, android.media.audiofx.Virtualizer.VIRTUALIZATION_MODE_TRANSAURAL}"></val>
        </annotation>
    </item>
    <item name="android.media.browse.MediaBrowser.MediaItem MediaItem(android.media.MediaDescription, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.browse.MediaBrowser.MediaItem.FLAG_BROWSABLE, android.media.browse.MediaBrowser.MediaItem.FLAG_PLAYABLE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.EditingEndedEvent.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.EditingEndedEvent.FINAL_STATE_SUCCEEDED, android.media.metrics.EditingEndedEvent.FINAL_STATE_CANCELED, android.media.metrics.EditingEndedEvent.FINAL_STATE_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.EditingEndedEvent.Builder android.media.metrics.EditingEndedEvent.Builder addOperationType(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.media.metrics.EditingEndedEvent.OPERATION_TYPE_VIDEO_TRANSCODE, android.media.metrics.EditingEndedEvent.OPERATION_TYPE_AUDIO_TRANSCODE, android.media.metrics.EditingEndedEvent.OPERATION_TYPE_VIDEO_EDIT, android.media.metrics.EditingEndedEvent.OPERATION_TYPE_AUDIO_EDIT, android.media.metrics.EditingEndedEvent.OPERATION_TYPE_VIDEO_TRANSMUX, android.media.metrics.EditingEndedEvent.OPERATION_TYPE_AUDIO_TRANSMUX, android.media.metrics.EditingEndedEvent.OPERATION_TYPE_PAUSED, android.media.metrics.EditingEndedEvent.OPERATION_TYPE_RESUMED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.EditingEndedEvent.Builder android.media.metrics.EditingEndedEvent.Builder setErrorCode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.EditingEndedEvent.ERROR_CODE_NONE, android.media.metrics.EditingEndedEvent.ERROR_CODE_FAILED_RUNTIME_CHECK, android.media.metrics.EditingEndedEvent.ERROR_CODE_IO_UNSPECIFIED, android.media.metrics.EditingEndedEvent.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED, android.media.metrics.EditingEndedEvent.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT, android.media.metrics.EditingEndedEvent.ERROR_CODE_IO_BAD_HTTP_STATUS, android.media.metrics.EditingEndedEvent.ERROR_CODE_IO_FILE_NOT_FOUND, android.media.metrics.EditingEndedEvent.ERROR_CODE_IO_NO_PERMISSION, android.media.metrics.EditingEndedEvent.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED, android.media.metrics.EditingEndedEvent.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE, android.media.metrics.EditingEndedEvent.ERROR_CODE_DECODER_INIT_FAILED, android.media.metrics.EditingEndedEvent.ERROR_CODE_DECODING_FAILED, android.media.metrics.EditingEndedEvent.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED, android.media.metrics.EditingEndedEvent.ERROR_CODE_ENCODER_INIT_FAILED, android.media.metrics.EditingEndedEvent.ERROR_CODE_ENCODING_FAILED, android.media.metrics.EditingEndedEvent.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED, android.media.metrics.EditingEndedEvent.ERROR_CODE_VIDEO_FRAME_PROCESSING_FAILED, android.media.metrics.EditingEndedEvent.ERROR_CODE_AUDIO_PROCESSING_FAILED, android.media.metrics.EditingEndedEvent.ERROR_CODE_MUXING_FAILED}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.MediaItemInfo.Builder android.media.metrics.MediaItemInfo.Builder addDataType(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.media.metrics.MediaItemInfo.DATA_TYPE_IMAGE, android.media.metrics.MediaItemInfo.DATA_TYPE_VIDEO, android.media.metrics.MediaItemInfo.DATA_TYPE_AUDIO, android.media.metrics.MediaItemInfo.DATA_TYPE_METADATA, android.media.metrics.MediaItemInfo.DATA_TYPE_DEPTH, android.media.metrics.MediaItemInfo.DATA_TYPE_GAIN_MAP, android.media.metrics.MediaItemInfo.DATA_TYPE_HIGH_FRAME_RATE, android.media.metrics.MediaItemInfo.DATA_TYPE_SPEED_SETTING_CUE_POINTS, android.media.metrics.MediaItemInfo.DATA_TYPE_GAPLESS, android.media.metrics.MediaItemInfo.DATA_TYPE_SPATIAL_AUDIO, android.media.metrics.MediaItemInfo.DATA_TYPE_HIGH_DYNAMIC_RANGE_VIDEO}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.MediaItemInfo.Builder android.media.metrics.MediaItemInfo.Builder setSourceType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.MediaItemInfo.SOURCE_TYPE_UNSPECIFIED, android.media.metrics.MediaItemInfo.SOURCE_TYPE_GALLERY, android.media.metrics.MediaItemInfo.SOURCE_TYPE_CAMERA, android.media.metrics.MediaItemInfo.SOURCE_TYPE_EDITING_SESSION, android.media.metrics.MediaItemInfo.SOURCE_TYPE_LOCAL_FILE, android.media.metrics.MediaItemInfo.SOURCE_TYPE_REMOTE_FILE, android.media.metrics.MediaItemInfo.SOURCE_TYPE_REMOTE_LIVE_STREAM, android.media.metrics.MediaItemInfo.SOURCE_TYPE_GENERATED}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.NetworkEvent.Builder android.media.metrics.NetworkEvent.Builder setNetworkType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.NetworkEvent.NETWORK_TYPE_UNKNOWN, android.media.metrics.NetworkEvent.NETWORK_TYPE_OTHER, android.media.metrics.NetworkEvent.NETWORK_TYPE_WIFI, android.media.metrics.NetworkEvent.NETWORK_TYPE_ETHERNET, android.media.metrics.NetworkEvent.NETWORK_TYPE_2G, android.media.metrics.NetworkEvent.NETWORK_TYPE_3G, android.media.metrics.NetworkEvent.NETWORK_TYPE_4G, android.media.metrics.NetworkEvent.NETWORK_TYPE_5G_NSA, android.media.metrics.NetworkEvent.NETWORK_TYPE_5G_SA, android.media.metrics.NetworkEvent.NETWORK_TYPE_OFFLINE}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.PlaybackErrorEvent.Builder android.media.metrics.PlaybackErrorEvent.Builder setErrorCode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.PlaybackErrorEvent.ERROR_UNKNOWN, android.media.metrics.PlaybackErrorEvent.ERROR_OTHER, android.media.metrics.PlaybackErrorEvent.ERROR_RUNTIME, android.media.metrics.PlaybackErrorEvent.ERROR_IO_NETWORK_UNAVAILABLE, android.media.metrics.PlaybackErrorEvent.ERROR_IO_NETWORK_CONNECTION_FAILED, android.media.metrics.PlaybackErrorEvent.ERROR_IO_BAD_HTTP_STATUS, android.media.metrics.PlaybackErrorEvent.ERROR_IO_DNS_FAILED, android.media.metrics.PlaybackErrorEvent.ERROR_IO_CONNECTION_TIMEOUT, android.media.metrics.PlaybackErrorEvent.ERROR_IO_CONNECTION_CLOSED, android.media.metrics.PlaybackErrorEvent.ERROR_IO_OTHER, android.media.metrics.PlaybackErrorEvent.ERROR_PARSING_MANIFEST_MALFORMED, android.media.metrics.PlaybackErrorEvent.ERROR_PARSING_CONTAINER_MALFORMED, android.media.metrics.PlaybackErrorEvent.ERROR_PARSING_OTHER, android.media.metrics.PlaybackErrorEvent.ERROR_DECODER_INIT_FAILED, android.media.metrics.PlaybackErrorEvent.ERROR_DECODING_FAILED, android.media.metrics.PlaybackErrorEvent.ERROR_DECODING_FORMAT_EXCEEDS_CAPABILITIES, android.media.metrics.PlaybackErrorEvent.ERROR_DECODING_OTHER, android.media.metrics.PlaybackErrorEvent.ERROR_AUDIO_TRACK_INIT_FAILED, android.media.metrics.PlaybackErrorEvent.ERROR_AUDIO_TRACK_WRITE_FAILED, android.media.metrics.PlaybackErrorEvent.ERROR_AUDIO_TRACK_OTHER, android.media.metrics.PlaybackErrorEvent.ERROR_PLAYER_REMOTE, android.media.metrics.PlaybackErrorEvent.ERROR_PLAYER_BEHIND_LIVE_WINDOW, android.media.metrics.PlaybackErrorEvent.ERROR_PLAYER_OTHER, android.media.metrics.PlaybackErrorEvent.ERROR_DRM_SCHEME_UNSUPPORTED, android.media.metrics.PlaybackErrorEvent.ERROR_DRM_PROVISIONING_FAILED, android.media.metrics.PlaybackErrorEvent.ERROR_DRM_LICENSE_ACQUISITION_FAILED, android.media.metrics.PlaybackErrorEvent.ERROR_DRM_DISALLOWED_OPERATION, android.media.metrics.PlaybackErrorEvent.ERROR_DRM_SYSTEM_ERROR, android.media.metrics.PlaybackErrorEvent.ERROR_DRM_CONTENT_ERROR, android.media.metrics.PlaybackErrorEvent.ERROR_DRM_DEVICE_REVOKED, android.media.metrics.PlaybackErrorEvent.ERROR_DRM_OTHER, android.media.metrics.PlaybackErrorEvent.ERROR_IO_FILE_NOT_FOUND, android.media.metrics.PlaybackErrorEvent.ERROR_IO_NO_PERMISSION, android.media.metrics.PlaybackErrorEvent.ERROR_PARSING_MANIFEST_UNSUPPORTED, android.media.metrics.PlaybackErrorEvent.ERROR_PARSING_CONTAINER_UNSUPPORTED, android.media.metrics.PlaybackErrorEvent.ERROR_DECODING_FORMAT_UNSUPPORTED}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.PlaybackMetrics.Builder android.media.metrics.PlaybackMetrics.Builder setContentType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.PlaybackMetrics.CONTENT_TYPE_UNKNOWN, android.media.metrics.PlaybackMetrics.CONTENT_TYPE_MAIN, android.media.metrics.PlaybackMetrics.CONTENT_TYPE_AD, android.media.metrics.PlaybackMetrics.CONTENT_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.PlaybackMetrics.Builder android.media.metrics.PlaybackMetrics.Builder setDrmType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.PlaybackMetrics.DRM_TYPE_NONE, android.media.metrics.PlaybackMetrics.DRM_TYPE_OTHER, android.media.metrics.PlaybackMetrics.DRM_TYPE_PLAY_READY, android.media.metrics.PlaybackMetrics.DRM_TYPE_WIDEVINE_L1, android.media.metrics.PlaybackMetrics.DRM_TYPE_WIDEVINE_L3, android.media.metrics.PlaybackMetrics.DRM_TYPE_WV_L3_FALLBACK, android.media.metrics.PlaybackMetrics.DRM_TYPE_CLEARKEY}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.PlaybackMetrics.Builder android.media.metrics.PlaybackMetrics.Builder setPlaybackType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.PlaybackMetrics.PLAYBACK_TYPE_UNKNOWN, android.media.metrics.PlaybackMetrics.PLAYBACK_TYPE_VOD, android.media.metrics.PlaybackMetrics.PLAYBACK_TYPE_LIVE, android.media.metrics.PlaybackMetrics.PLAYBACK_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.PlaybackMetrics.Builder android.media.metrics.PlaybackMetrics.Builder setStreamSource(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.PlaybackMetrics.STREAM_SOURCE_UNKNOWN, android.media.metrics.PlaybackMetrics.STREAM_SOURCE_NETWORK, android.media.metrics.PlaybackMetrics.STREAM_SOURCE_DEVICE, android.media.metrics.PlaybackMetrics.STREAM_SOURCE_MIXED}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.PlaybackMetrics.Builder android.media.metrics.PlaybackMetrics.Builder setStreamType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.PlaybackMetrics.STREAM_TYPE_UNKNOWN, android.media.metrics.PlaybackMetrics.STREAM_TYPE_OTHER, android.media.metrics.PlaybackMetrics.STREAM_TYPE_PROGRESSIVE, android.media.metrics.PlaybackMetrics.STREAM_TYPE_DASH, android.media.metrics.PlaybackMetrics.STREAM_TYPE_HLS, android.media.metrics.PlaybackMetrics.STREAM_TYPE_SS}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.PlaybackStateEvent.Builder android.media.metrics.PlaybackStateEvent.Builder setState(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.PlaybackStateEvent.STATE_NOT_STARTED, android.media.metrics.PlaybackStateEvent.STATE_JOINING_BACKGROUND, android.media.metrics.PlaybackStateEvent.STATE_JOINING_FOREGROUND, android.media.metrics.PlaybackStateEvent.STATE_PLAYING, android.media.metrics.PlaybackStateEvent.STATE_PAUSED, android.media.metrics.PlaybackStateEvent.STATE_SEEKING, android.media.metrics.PlaybackStateEvent.STATE_BUFFERING, android.media.metrics.PlaybackStateEvent.STATE_PAUSED_BUFFERING, android.media.metrics.PlaybackStateEvent.STATE_SUPPRESSED, android.media.metrics.PlaybackStateEvent.STATE_SUPPRESSED_BUFFERING, android.media.metrics.PlaybackStateEvent.STATE_ENDED, android.media.metrics.PlaybackStateEvent.STATE_STOPPED, android.media.metrics.PlaybackStateEvent.STATE_FAILED, android.media.metrics.PlaybackStateEvent.STATE_INTERRUPTED_BY_AD, android.media.metrics.PlaybackStateEvent.STATE_ABANDONED}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.TrackChangeEvent.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.TrackChangeEvent.TRACK_TYPE_AUDIO, android.media.metrics.TrackChangeEvent.TRACK_TYPE_VIDEO, android.media.metrics.TrackChangeEvent.TRACK_TYPE_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.TrackChangeEvent.Builder android.media.metrics.TrackChangeEvent.Builder setTrackChangeReason(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.TrackChangeEvent.TRACK_CHANGE_REASON_UNKNOWN, android.media.metrics.TrackChangeEvent.TRACK_CHANGE_REASON_OTHER, android.media.metrics.TrackChangeEvent.TRACK_CHANGE_REASON_INITIAL, android.media.metrics.TrackChangeEvent.TRACK_CHANGE_REASON_MANUAL, android.media.metrics.TrackChangeEvent.TRACK_CHANGE_REASON_ADAPTIVE}"></val>
        </annotation>
    </item>
    <item name="android.media.metrics.TrackChangeEvent.Builder android.media.metrics.TrackChangeEvent.Builder setTrackState(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.metrics.TrackChangeEvent.TRACK_STATE_OFF, android.media.metrics.TrackChangeEvent.TRACK_STATE_ON}"></val>
        </annotation>
    </item>
    <item name="android.media.midi.MidiManager java.util.Set&lt;android.media.midi.MidiDeviceInfo&gt; getDevicesForTransport(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.midi.MidiManager.TRANSPORT_MIDI_BYTE_STREAM, android.media.midi.MidiManager.TRANSPORT_UNIVERSAL_MIDI_PACKETS}"></val>
        </annotation>
    </item>
    <item name="android.media.midi.MidiManager void registerDeviceCallback(int, java.util.concurrent.Executor, android.media.midi.MidiManager.DeviceCallback) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.midi.MidiManager.TRANSPORT_MIDI_BYTE_STREAM, android.media.midi.MidiManager.TRANSPORT_UNIVERSAL_MIDI_PACKETS}"></val>
        </annotation>
    </item>
    <item name="android.media.session.MediaSession void setFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.session.MediaSession.FLAG_HANDLES_MEDIA_BUTTONS, android.media.session.MediaSession.FLAG_HANDLES_TRANSPORT_CONTROLS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.session.MediaSession void setRatingType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.Rating.RATING_NONE, android.media.Rating.RATING_HEART, android.media.Rating.RATING_THUMB_UP_DOWN, android.media.Rating.RATING_3_STARS, android.media.Rating.RATING_4_STARS, android.media.Rating.RATING_5_STARS, android.media.Rating.RATING_PERCENTAGE}"></val>
        </annotation>
    </item>
    <item name="android.media.session.PlaybackState.Builder android.media.session.PlaybackState.Builder setActions(long) 0">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.media.session.PlaybackState.ACTION_STOP, android.media.session.PlaybackState.ACTION_PAUSE, android.media.session.PlaybackState.ACTION_PLAY, android.media.session.PlaybackState.ACTION_REWIND, android.media.session.PlaybackState.ACTION_SKIP_TO_PREVIOUS, android.media.session.PlaybackState.ACTION_SKIP_TO_NEXT, android.media.session.PlaybackState.ACTION_FAST_FORWARD, android.media.session.PlaybackState.ACTION_SET_RATING, android.media.session.PlaybackState.ACTION_SEEK_TO, android.media.session.PlaybackState.ACTION_PLAY_PAUSE, android.media.session.PlaybackState.ACTION_PLAY_FROM_MEDIA_ID, android.media.session.PlaybackState.ACTION_PLAY_FROM_SEARCH, android.media.session.PlaybackState.ACTION_SKIP_TO_QUEUE_ITEM, android.media.session.PlaybackState.ACTION_PLAY_FROM_URI, android.media.session.PlaybackState.ACTION_PREPARE, android.media.session.PlaybackState.ACTION_PREPARE_FROM_MEDIA_ID, android.media.session.PlaybackState.ACTION_PREPARE_FROM_SEARCH, android.media.session.PlaybackState.ACTION_PREPARE_FROM_URI, android.media.session.PlaybackState.ACTION_SET_PLAYBACK_SPEED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.session.PlaybackState.Builder android.media.session.PlaybackState.Builder setState(int, long, float) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.session.PlaybackState.STATE_NONE, android.media.session.PlaybackState.STATE_STOPPED, android.media.session.PlaybackState.STATE_PAUSED, android.media.session.PlaybackState.STATE_PLAYING, android.media.session.PlaybackState.STATE_FAST_FORWARDING, android.media.session.PlaybackState.STATE_REWINDING, android.media.session.PlaybackState.STATE_BUFFERING, android.media.session.PlaybackState.STATE_ERROR, android.media.session.PlaybackState.STATE_CONNECTING, android.media.session.PlaybackState.STATE_SKIPPING_TO_PREVIOUS, android.media.session.PlaybackState.STATE_SKIPPING_TO_NEXT, android.media.session.PlaybackState.STATE_SKIPPING_TO_QUEUE_ITEM}"></val>
        </annotation>
    </item>
    <item name="android.media.session.PlaybackState.Builder android.media.session.PlaybackState.Builder setState(int, long, float, long) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.session.PlaybackState.STATE_NONE, android.media.session.PlaybackState.STATE_STOPPED, android.media.session.PlaybackState.STATE_PAUSED, android.media.session.PlaybackState.STATE_PLAYING, android.media.session.PlaybackState.STATE_FAST_FORWARDING, android.media.session.PlaybackState.STATE_REWINDING, android.media.session.PlaybackState.STATE_BUFFERING, android.media.session.PlaybackState.STATE_ERROR, android.media.session.PlaybackState.STATE_CONNECTING, android.media.session.PlaybackState.STATE_SKIPPING_TO_PREVIOUS, android.media.session.PlaybackState.STATE_SKIPPING_TO_NEXT, android.media.session.PlaybackState.STATE_SKIPPING_TO_QUEUE_ITEM}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.AdBuffer AdBuffer(int, java.lang.String, android.os.SharedMemory, int, int, long, int) 6">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.MediaCodec.BUFFER_FLAG_SYNC_FRAME, android.media.MediaCodec.BUFFER_FLAG_KEY_FRAME, android.media.MediaCodec.BUFFER_FLAG_CODEC_CONFIG, android.media.MediaCodec.BUFFER_FLAG_END_OF_STREAM, android.media.MediaCodec.BUFFER_FLAG_PARTIAL_FRAME, android.media.MediaCodec.BUFFER_FLAG_DECODE_ONLY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.media.tv.AdRequest AdRequest(int, int, android.net.Uri, long, long, long, android.os.Bundle) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.AdRequest.REQUEST_TYPE_START, android.media.tv.AdRequest.REQUEST_TYPE_STOP}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.AdRequest AdRequest(int, int, android.os.ParcelFileDescriptor, long, long, long, java.lang.String, android.os.Bundle) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.AdRequest.REQUEST_TYPE_START, android.media.tv.AdRequest.REQUEST_TYPE_STOP}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.AdResponse AdResponse(int, int, long) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.AdResponse.RESPONSE_TYPE_PLAYING, android.media.tv.AdResponse.RESPONSE_TYPE_FINISHED, android.media.tv.AdResponse.RESPONSE_TYPE_STOPPED, android.media.tv.AdResponse.RESPONSE_TYPE_ERROR, android.media.tv.AdResponse.RESPONSE_TYPE_BUFFERING}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.AitInfo AitInfo(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_HBBTV, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_ATSC, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_GINGA, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_TARGETED_AD, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.CommandRequest CommandRequest(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_REPEAT, android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_AUTO_UPDATE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.CommandResponse CommandResponse(int, int, int, java.lang.String, java.lang.String) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_ERROR, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_OK, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_CANCEL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.DsmccRequest DsmccRequest(int, int, android.net.Uri) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_REPEAT, android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_AUTO_UPDATE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.DsmccResponse DsmccResponse(int, int, int, android.os.ParcelFileDescriptor) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_ERROR, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_OK, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_CANCEL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.DsmccResponse DsmccResponse(int, int, int, boolean, java.util.List&lt;java.lang.String&gt;) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_ERROR, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_OK, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_CANCEL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.DsmccResponse DsmccResponse(int, int, int, int[], java.lang.String[]) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_ERROR, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_OK, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_CANCEL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.PesRequest PesRequest(int, int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_REPEAT, android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_AUTO_UPDATE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.PesResponse PesResponse(int, int, int, java.lang.String) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_ERROR, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_OK, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_CANCEL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.SectionRequest SectionRequest(int, int, int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_REPEAT, android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_AUTO_UPDATE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.SectionResponse SectionResponse(int, int, int, int, int, android.os.Bundle) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_ERROR, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_OK, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_CANCEL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.StreamEventRequest StreamEventRequest(int, int, android.net.Uri, java.lang.String) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_REPEAT, android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_AUTO_UPDATE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.StreamEventResponse StreamEventResponse(int, int, int, int, long, byte[]) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_ERROR, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_OK, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_CANCEL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TableRequest TableRequest(int, int, int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_REPEAT, android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_AUTO_UPDATE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TableRequest TableRequest(int, int, int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TableRequest.TABLE_NAME_PAT, android.media.tv.TableRequest.TABLE_NAME_PMT, android.media.tv.TableRequest.TABLE_NAME_CAT, android.media.tv.TableRequest.TABLE_NAME_NIT, android.media.tv.TableRequest.TABLE_NAME_BAT, android.media.tv.TableRequest.TABLE_NAME_SDT, android.media.tv.TableRequest.TABLE_NAME_EIT, android.media.tv.TableRequest.TABLE_NAME_TDT, android.media.tv.TableRequest.TABLE_NAME_TOT, android.media.tv.TableRequest.TABLE_NAME_SIT}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TableResponse TableResponse(int, int, int, android.net.Uri, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_ERROR, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_OK, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_CANCEL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TableResponse.Builder Builder(int, int, int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_ERROR, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_OK, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_CANCEL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TimelineRequest TimelineRequest(int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_REPEAT, android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_AUTO_UPDATE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TimelineRequest TimelineRequest(int, int, int, java.lang.String) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_REPEAT, android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_AUTO_UPDATE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TimelineResponse TimelineResponse(int, int, int, java.lang.String, int, int, long, long) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_ERROR, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_OK, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_CANCEL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TsRequest TsRequest(int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_REPEAT, android.media.tv.BroadcastInfoRequest.REQUEST_OPTION_AUTO_UPDATE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TsResponse TsResponse(int, int, int, java.lang.String) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_ERROR, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_OK, android.media.tv.BroadcastInfoResponse.RESPONSE_RESULT_CANCEL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvContract.Channels java.lang.String getVideoResolution(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.tv.TvContract.Channels.VIDEO_FORMAT_240P, android.media.tv.TvContract.Channels.VIDEO_FORMAT_360P, android.media.tv.TvContract.Channels.VIDEO_FORMAT_480I, android.media.tv.TvContract.Channels.VIDEO_FORMAT_576I, android.media.tv.TvContract.Channels.VIDEO_FORMAT_576P, android.media.tv.TvContract.Channels.VIDEO_FORMAT_720P, android.media.tv.TvContract.Channels.VIDEO_FORMAT_1080I, android.media.tv.TvContract.Channels.VIDEO_FORMAT_1080P, android.media.tv.TvContract.Channels.VIDEO_FORMAT_2160P, android.media.tv.TvContract.Channels.VIDEO_FORMAT_4320P}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvContract.Programs.Genres java.lang.String encode(java.lang.String...) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.tv.TvContract.Programs.Genres.FAMILY_KIDS, android.media.tv.TvContract.Programs.Genres.SPORTS, android.media.tv.TvContract.Programs.Genres.SHOPPING, android.media.tv.TvContract.Programs.Genres.MOVIES, android.media.tv.TvContract.Programs.Genres.COMEDY, android.media.tv.TvContract.Programs.Genres.TRAVEL, android.media.tv.TvContract.Programs.Genres.DRAMA, android.media.tv.TvContract.Programs.Genres.EDUCATION, android.media.tv.TvContract.Programs.Genres.ANIMAL_WILDLIFE, android.media.tv.TvContract.Programs.Genres.NEWS, android.media.tv.TvContract.Programs.Genres.GAMING, android.media.tv.TvContract.Programs.Genres.ARTS, android.media.tv.TvContract.Programs.Genres.ENTERTAINMENT, android.media.tv.TvContract.Programs.Genres.LIFE_STYLE, android.media.tv.TvContract.Programs.Genres.MUSIC, android.media.tv.TvContract.Programs.Genres.PREMIER, android.media.tv.TvContract.Programs.Genres.TECH_SCIENCE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvInputManager.TvInputCallback void onInputStateChanged(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.INPUT_STATE_CONNECTED, android.media.tv.TvInputManager.INPUT_STATE_CONNECTED_STANDBY, android.media.tv.TvInputManager.INPUT_STATE_DISCONNECTED}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvInputService.RecordingSession void notifyError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.RECORDING_ERROR_UNKNOWN, android.media.tv.TvInputManager.RECORDING_ERROR_INSUFFICIENT_SPACE, android.media.tv.TvInputManager.RECORDING_ERROR_RESOURCE_BUSY}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvInputService.Session void notifySignalStrength(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.SIGNAL_STRENGTH_LOST, android.media.tv.TvInputManager.SIGNAL_STRENGTH_WEAK, android.media.tv.TvInputManager.SIGNAL_STRENGTH_STRONG}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvInputService.Session void notifyTimeShiftMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TIME_SHIFT_MODE_OFF, android.media.tv.TvInputManager.TIME_SHIFT_MODE_LOCAL, android.media.tv.TvInputManager.TIME_SHIFT_MODE_NETWORK, android.media.tv.TvInputManager.TIME_SHIFT_MODE_AUTO}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvInputService.Session void notifyTimeShiftStatusChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TIME_SHIFT_STATUS_UNKNOWN, android.media.tv.TvInputManager.TIME_SHIFT_STATUS_UNSUPPORTED, android.media.tv.TvInputManager.TIME_SHIFT_STATUS_UNAVAILABLE, android.media.tv.TvInputManager.TIME_SHIFT_STATUS_AVAILABLE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvInputService.Session void notifyTvMessage(int, android.os.Bundle) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TV_MESSAGE_TYPE_WATERMARK, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_CLOSED_CAPTION, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvInputService.Session void notifyVideoUnavailable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_UNKNOWN, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_TUNING, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_BUFFERING, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_NOT_CONNECTED, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCE, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTION, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWED, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIRED, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATION, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRING, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_NO_CARD, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTE, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALID, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUT, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_REBOOTING, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWN}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvInputService.Session void onSetTvMessageEnabled(int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TV_MESSAGE_TYPE_WATERMARK, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_CLOSED_CAPTION, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvInputService.Session void onTimeShiftSetMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TIME_SHIFT_MODE_OFF, android.media.tv.TvInputManager.TIME_SHIFT_MODE_LOCAL, android.media.tv.TvInputManager.TIME_SHIFT_MODE_NETWORK, android.media.tv.TvInputManager.TIME_SHIFT_MODE_AUTO}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvInputService.Session void onTvMessage(int, android.os.Bundle) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TV_MESSAGE_TYPE_WATERMARK, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_CLOSED_CAPTION, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvRecordingClient.RecordingCallback void onError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.RECORDING_ERROR_UNKNOWN, android.media.tv.TvInputManager.RECORDING_ERROR_INSUFFICIENT_SPACE, android.media.tv.TvInputManager.RECORDING_ERROR_RESOURCE_BUSY}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvTrackInfo.Builder Builder(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvTrackInfo.TYPE_AUDIO, android.media.tv.TvTrackInfo.TYPE_VIDEO, android.media.tv.TvTrackInfo.TYPE_SUBTITLE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvView void setTvMessageEnabled(int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TV_MESSAGE_TYPE_WATERMARK, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_CLOSED_CAPTION, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvView void timeShiftSetMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TIME_SHIFT_MODE_OFF, android.media.tv.TvInputManager.TIME_SHIFT_MODE_LOCAL, android.media.tv.TvInputManager.TIME_SHIFT_MODE_NETWORK, android.media.tv.TvInputManager.TIME_SHIFT_MODE_AUTO}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvView.TvInputCallback void onSignalStrengthUpdated(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.SIGNAL_STRENGTH_LOST, android.media.tv.TvInputManager.SIGNAL_STRENGTH_WEAK, android.media.tv.TvInputManager.SIGNAL_STRENGTH_STRONG}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvView.TvInputCallback void onTimeShiftMode(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TIME_SHIFT_MODE_OFF, android.media.tv.TvInputManager.TIME_SHIFT_MODE_LOCAL, android.media.tv.TvInputManager.TIME_SHIFT_MODE_NETWORK, android.media.tv.TvInputManager.TIME_SHIFT_MODE_AUTO}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvView.TvInputCallback void onTimeShiftStatusChanged(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TIME_SHIFT_STATUS_UNKNOWN, android.media.tv.TvInputManager.TIME_SHIFT_STATUS_UNSUPPORTED, android.media.tv.TvInputManager.TIME_SHIFT_STATUS_UNAVAILABLE, android.media.tv.TvInputManager.TIME_SHIFT_STATUS_AVAILABLE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvView.TvInputCallback void onTvMessage(java.lang.String, int, android.os.Bundle) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TV_MESSAGE_TYPE_WATERMARK, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_CLOSED_CAPTION, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.TvView.TvInputCallback void onVideoUnavailable(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_UNKNOWN, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_TUNING, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_BUFFERING, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_NOT_CONNECTED, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCE, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTION, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWED, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIRED, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATION, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRING, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_NO_CARD, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTE, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALID, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUT, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_REBOOTING, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWN}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppManager.TvInteractiveAppCallback void onTvInteractiveAppServiceStateChanged(java.lang.String, int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_HBBTV, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_ATSC, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_GINGA, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_TARGETED_AD, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppManager.TvInteractiveAppCallback void onTvInteractiveAppServiceStateChanged(java.lang.String, int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppManager.SERVICE_STATE_UNREALIZED, android.media.tv.interactive.TvInteractiveAppManager.SERVICE_STATE_PREPARING, android.media.tv.interactive.TvInteractiveAppManager.SERVICE_STATE_READY, android.media.tv.interactive.TvInteractiveAppManager.SERVICE_STATE_ERROR}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppManager.TvInteractiveAppCallback void onTvInteractiveAppServiceStateChanged(java.lang.String, int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppManager.ERROR_NONE, android.media.tv.interactive.TvInteractiveAppManager.ERROR_UNKNOWN, android.media.tv.interactive.TvInteractiveAppManager.ERROR_NOT_SUPPORTED, android.media.tv.interactive.TvInteractiveAppManager.ERROR_WEAK_SIGNAL, android.media.tv.interactive.TvInteractiveAppManager.ERROR_RESOURCE_UNAVAILABLE, android.media.tv.interactive.TvInteractiveAppManager.ERROR_BLOCKED, android.media.tv.interactive.TvInteractiveAppManager.ERROR_ENCRYPTED, android.media.tv.interactive.TvInteractiveAppManager.ERROR_UNKNOWN_CHANNEL}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService android.media.tv.interactive.TvInteractiveAppService.Session onCreateSession(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_HBBTV, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_ATSC, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_GINGA, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_TARGETED_AD, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService void notifyStateChanged(int, int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_HBBTV, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_ATSC, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_GINGA, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_TARGETED_AD, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService void notifyStateChanged(int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppManager.SERVICE_STATE_UNREALIZED, android.media.tv.interactive.TvInteractiveAppManager.SERVICE_STATE_PREPARING, android.media.tv.interactive.TvInteractiveAppManager.SERVICE_STATE_READY, android.media.tv.interactive.TvInteractiveAppManager.SERVICE_STATE_ERROR}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService void notifyStateChanged(int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppManager.ERROR_NONE, android.media.tv.interactive.TvInteractiveAppManager.ERROR_UNKNOWN, android.media.tv.interactive.TvInteractiveAppManager.ERROR_NOT_SUPPORTED, android.media.tv.interactive.TvInteractiveAppManager.ERROR_WEAK_SIGNAL, android.media.tv.interactive.TvInteractiveAppManager.ERROR_RESOURCE_UNAVAILABLE, android.media.tv.interactive.TvInteractiveAppManager.ERROR_BLOCKED, android.media.tv.interactive.TvInteractiveAppManager.ERROR_ENCRYPTED, android.media.tv.interactive.TvInteractiveAppManager.ERROR_UNKNOWN_CHANNEL}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void notifySessionStateChanged(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppManager.INTERACTIVE_APP_STATE_STOPPED, android.media.tv.interactive.TvInteractiveAppManager.INTERACTIVE_APP_STATE_RUNNING, android.media.tv.interactive.TvInteractiveAppManager.INTERACTIVE_APP_STATE_ERROR}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void notifySessionStateChanged(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppManager.ERROR_NONE, android.media.tv.interactive.TvInteractiveAppManager.ERROR_UNKNOWN, android.media.tv.interactive.TvInteractiveAppManager.ERROR_NOT_SUPPORTED, android.media.tv.interactive.TvInteractiveAppManager.ERROR_WEAK_SIGNAL, android.media.tv.interactive.TvInteractiveAppManager.ERROR_RESOURCE_UNAVAILABLE, android.media.tv.interactive.TvInteractiveAppManager.ERROR_BLOCKED, android.media.tv.interactive.TvInteractiveAppManager.ERROR_ENCRYPTED, android.media.tv.interactive.TvInteractiveAppManager.ERROR_UNKNOWN_CHANNEL}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void notifyTeletextAppStateChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppManager.TELETEXT_APP_STATE_SHOW, android.media.tv.interactive.TvInteractiveAppManager.TELETEXT_APP_STATE_HIDE, android.media.tv.interactive.TvInteractiveAppManager.TELETEXT_APP_STATE_ERROR}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void onRecordingError(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.RECORDING_ERROR_UNKNOWN, android.media.tv.TvInputManager.RECORDING_ERROR_INSUFFICIENT_SPACE, android.media.tv.TvInputManager.RECORDING_ERROR_RESOURCE_BUSY}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void onSignalStrength(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.SIGNAL_STRENGTH_LOST, android.media.tv.TvInputManager.SIGNAL_STRENGTH_WEAK, android.media.tv.TvInputManager.SIGNAL_STRENGTH_STRONG}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void onSurfaceChanged(int, int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGBA_F16, android.graphics.PixelFormat.RGBA_1010102, android.graphics.PixelFormat.RGB_888, android.graphics.PixelFormat.RGB_565}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void onTimeShiftMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TIME_SHIFT_MODE_OFF, android.media.tv.TvInputManager.TIME_SHIFT_MODE_LOCAL, android.media.tv.TvInputManager.TIME_SHIFT_MODE_NETWORK, android.media.tv.TvInputManager.TIME_SHIFT_MODE_AUTO}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void onTimeShiftStatusChanged(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TIME_SHIFT_STATUS_UNKNOWN, android.media.tv.TvInputManager.TIME_SHIFT_STATUS_UNSUPPORTED, android.media.tv.TvInputManager.TIME_SHIFT_STATUS_UNAVAILABLE, android.media.tv.TvInputManager.TIME_SHIFT_STATUS_AVAILABLE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void onTrackSelected(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvTrackInfo.TYPE_AUDIO, android.media.tv.TvTrackInfo.TYPE_VIDEO, android.media.tv.TvTrackInfo.TYPE_SUBTITLE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void onTvMessage(int, android.os.Bundle) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TV_MESSAGE_TYPE_WATERMARK, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_CLOSED_CAPTION, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void onVideoUnavailable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_UNKNOWN, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_TUNING, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_BUFFERING, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_NOT_CONNECTED, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCE, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTION, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWED, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIRED, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATION, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRING, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_NO_CARD, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTE, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALID, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUT, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_REBOOTING, android.media.tv.TvInputManager.VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWN}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void requestTvRecordingInfoList(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvRecordingInfo.RECORDING_SCHEDULED, android.media.tv.TvRecordingInfo.RECORDING_IN_PROGRESS, android.media.tv.TvRecordingInfo.RECORDING_ALL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void sendPlaybackCommandRequest(java.lang.String, android.os.Bundle) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppService.PLAYBACK_COMMAND_TYPE_TUNE, android.media.tv.interactive.TvInteractiveAppService.PLAYBACK_COMMAND_TYPE_TUNE_NEXT, android.media.tv.interactive.TvInteractiveAppService.PLAYBACK_COMMAND_TYPE_TUNE_PREV, android.media.tv.interactive.TvInteractiveAppService.PLAYBACK_COMMAND_TYPE_STOP, android.media.tv.interactive.TvInteractiveAppService.PLAYBACK_COMMAND_TYPE_SET_STREAM_VOLUME, android.media.tv.interactive.TvInteractiveAppService.PLAYBACK_COMMAND_TYPE_SELECT_TRACK}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppService.Session void sendTimeShiftCommandRequest(java.lang.String, android.os.Bundle) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppService.TIME_SHIFT_COMMAND_TYPE_PLAY, android.media.tv.interactive.TvInteractiveAppService.TIME_SHIFT_COMMAND_TYPE_PAUSE, android.media.tv.interactive.TvInteractiveAppService.TIME_SHIFT_COMMAND_TYPE_RESUME, android.media.tv.interactive.TvInteractiveAppService.TIME_SHIFT_COMMAND_TYPE_SEEK_TO, android.media.tv.interactive.TvInteractiveAppService.TIME_SHIFT_COMMAND_TYPE_SET_PLAYBACK_PARAMS, android.media.tv.interactive.TvInteractiveAppService.TIME_SHIFT_COMMAND_TYPE_SET_MODE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppView void notifyTimeShiftStatusChanged(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TIME_SHIFT_STATUS_UNKNOWN, android.media.tv.TvInputManager.TIME_SHIFT_STATUS_UNSUPPORTED, android.media.tv.TvInputManager.TIME_SHIFT_STATUS_UNAVAILABLE, android.media.tv.TvInputManager.TIME_SHIFT_STATUS_AVAILABLE}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppView void notifyTvMessage(int, android.os.Bundle) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TV_MESSAGE_TYPE_WATERMARK, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_CLOSED_CAPTION, android.media.tv.TvInputManager.TV_MESSAGE_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppView void prepareInteractiveApp(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_HBBTV, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_ATSC, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_GINGA, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_TARGETED_AD, android.media.tv.interactive.TvInteractiveAppServiceInfo.INTERACTIVE_APP_TYPE_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppView void sendTimeShiftMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvInputManager.TIME_SHIFT_MODE_OFF, android.media.tv.TvInputManager.TIME_SHIFT_MODE_LOCAL, android.media.tv.TvInputManager.TIME_SHIFT_MODE_NETWORK, android.media.tv.TvInputManager.TIME_SHIFT_MODE_AUTO}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppView.TvInteractiveAppCallback void onPlaybackCommandRequest(java.lang.String, java.lang.String, android.os.Bundle) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppService.PLAYBACK_COMMAND_TYPE_TUNE, android.media.tv.interactive.TvInteractiveAppService.PLAYBACK_COMMAND_TYPE_TUNE_NEXT, android.media.tv.interactive.TvInteractiveAppService.PLAYBACK_COMMAND_TYPE_TUNE_PREV, android.media.tv.interactive.TvInteractiveAppService.PLAYBACK_COMMAND_TYPE_STOP, android.media.tv.interactive.TvInteractiveAppService.PLAYBACK_COMMAND_TYPE_SET_STREAM_VOLUME, android.media.tv.interactive.TvInteractiveAppService.PLAYBACK_COMMAND_TYPE_SELECT_TRACK}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppView.TvInteractiveAppCallback void onRequestTvRecordingInfoList(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.TvRecordingInfo.RECORDING_SCHEDULED, android.media.tv.TvRecordingInfo.RECORDING_IN_PROGRESS, android.media.tv.TvRecordingInfo.RECORDING_ALL}"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppView.TvInteractiveAppCallback void onStateChanged(java.lang.String, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppManager.INTERACTIVE_APP_STATE_STOPPED, android.media.tv.interactive.TvInteractiveAppManager.INTERACTIVE_APP_STATE_RUNNING, android.media.tv.interactive.TvInteractiveAppManager.INTERACTIVE_APP_STATE_ERROR}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppView.TvInteractiveAppCallback void onStateChanged(java.lang.String, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppManager.ERROR_NONE, android.media.tv.interactive.TvInteractiveAppManager.ERROR_UNKNOWN, android.media.tv.interactive.TvInteractiveAppManager.ERROR_NOT_SUPPORTED, android.media.tv.interactive.TvInteractiveAppManager.ERROR_WEAK_SIGNAL, android.media.tv.interactive.TvInteractiveAppManager.ERROR_RESOURCE_UNAVAILABLE, android.media.tv.interactive.TvInteractiveAppManager.ERROR_BLOCKED, android.media.tv.interactive.TvInteractiveAppManager.ERROR_ENCRYPTED, android.media.tv.interactive.TvInteractiveAppManager.ERROR_UNKNOWN_CHANNEL}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppView.TvInteractiveAppCallback void onTeletextAppStateChanged(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppManager.TELETEXT_APP_STATE_SHOW, android.media.tv.interactive.TvInteractiveAppManager.TELETEXT_APP_STATE_HIDE, android.media.tv.interactive.TvInteractiveAppManager.TELETEXT_APP_STATE_ERROR}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.media.tv.interactive.TvInteractiveAppView.TvInteractiveAppCallback void onTimeShiftCommandRequest(java.lang.String, java.lang.String, android.os.Bundle) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.media.tv.interactive.TvInteractiveAppService.TIME_SHIFT_COMMAND_TYPE_PLAY, android.media.tv.interactive.TvInteractiveAppService.TIME_SHIFT_COMMAND_TYPE_PAUSE, android.media.tv.interactive.TvInteractiveAppService.TIME_SHIFT_COMMAND_TYPE_RESUME, android.media.tv.interactive.TvInteractiveAppService.TIME_SHIFT_COMMAND_TYPE_SEEK_TO, android.media.tv.interactive.TvInteractiveAppService.TIME_SHIFT_COMMAND_TYPE_SET_PLAYBACK_PARAMS, android.media.tv.interactive.TvInteractiveAppService.TIME_SHIFT_COMMAND_TYPE_SET_MODE}"></val>
        </annotation>
    </item>
    <item name="android.net.ConnectivityDiagnosticsManager.DataStallReport DataStallReport(android.net.Network, long, int, android.net.LinkProperties, android.net.NetworkCapabilities, android.os.PersistableBundle) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ConnectivityDiagnosticsManager.DataStallReport.DETECTION_METHOD_DNS_EVENTS, android.net.ConnectivityDiagnosticsManager.DataStallReport.DETECTION_METHOD_TCP_METRICS}"></val>
        </annotation>
    </item>
    <item name="android.net.ConnectivityManager.NetworkCallback NetworkCallback(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ConnectivityManager.NetworkCallback.FLAG_INCLUDE_LOCATION_INFO}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.net.DnsResolver void query(android.net.Network, java.lang.String, int, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super java.util.List&lt;java.net.InetAddress&gt;&gt;) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.DnsResolver.TYPE_A, android.net.DnsResolver.TYPE_AAAA}"></val>
        </annotation>
    </item>
    <item name="android.net.DnsResolver void query(android.net.Network, java.lang.String, int, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super java.util.List&lt;java.net.InetAddress&gt;&gt;) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.DnsResolver.FLAG_EMPTY, android.net.DnsResolver.FLAG_NO_RETRY, android.net.DnsResolver.FLAG_NO_CACHE_STORE, android.net.DnsResolver.FLAG_NO_CACHE_LOOKUP}"></val>
        </annotation>
    </item>
    <item name="android.net.DnsResolver void query(android.net.Network, java.lang.String, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super java.util.List&lt;java.net.InetAddress&gt;&gt;) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.DnsResolver.FLAG_EMPTY, android.net.DnsResolver.FLAG_NO_RETRY, android.net.DnsResolver.FLAG_NO_CACHE_STORE, android.net.DnsResolver.FLAG_NO_CACHE_LOOKUP}"></val>
        </annotation>
    </item>
    <item name="android.net.DnsResolver void rawQuery(android.net.Network, byte[], int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super byte[]&gt;) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.DnsResolver.FLAG_EMPTY, android.net.DnsResolver.FLAG_NO_RETRY, android.net.DnsResolver.FLAG_NO_CACHE_STORE, android.net.DnsResolver.FLAG_NO_CACHE_LOOKUP}"></val>
        </annotation>
    </item>
    <item name="android.net.DnsResolver void rawQuery(android.net.Network, java.lang.String, int, int, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super byte[]&gt;) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.DnsResolver.CLASS_IN}"></val>
        </annotation>
    </item>
    <item name="android.net.DnsResolver void rawQuery(android.net.Network, java.lang.String, int, int, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super byte[]&gt;) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.DnsResolver.TYPE_A, android.net.DnsResolver.TYPE_AAAA}"></val>
        </annotation>
    </item>
    <item name="android.net.DnsResolver void rawQuery(android.net.Network, java.lang.String, int, int, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super byte[]&gt;) 4">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.DnsResolver.FLAG_EMPTY, android.net.DnsResolver.FLAG_NO_RETRY, android.net.DnsResolver.FLAG_NO_CACHE_STORE, android.net.DnsResolver.FLAG_NO_CACHE_LOOKUP}"></val>
        </annotation>
    </item>
    <item name="android.net.DnsResolver.DnsException DnsException(int, java.lang.Throwable) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.DnsResolver.ERROR_PARSE, android.net.DnsResolver.ERROR_SYSTEM}"></val>
        </annotation>
    </item>
    <item name="android.net.IpSecAlgorithm IpSecAlgorithm(java.lang.String, byte[]) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.IpSecAlgorithm.CRYPT_AES_CTR, android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.IpSecAlgorithm.AUTH_AES_XCBC, android.net.IpSecAlgorithm.AUTH_AES_CMAC, android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.IpSecAlgorithm.AUTH_CRYPT_CHACHA20_POLY1305}"></val>
        </annotation>
    </item>
    <item name="android.net.IpSecAlgorithm IpSecAlgorithm(java.lang.String, byte[], int) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.IpSecAlgorithm.CRYPT_AES_CTR, android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.IpSecAlgorithm.AUTH_AES_XCBC, android.net.IpSecAlgorithm.AUTH_AES_CMAC, android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.IpSecAlgorithm.AUTH_CRYPT_CHACHA20_POLY1305}"></val>
        </annotation>
    </item>
    <item name="android.net.IpSecManager void applyTransportModeTransform(java.io.FileDescriptor, int, android.net.IpSecTransform) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.IpSecManager.DIRECTION_IN, android.net.IpSecManager.DIRECTION_OUT}"></val>
        </annotation>
    </item>
    <item name="android.net.IpSecManager void applyTransportModeTransform(java.net.DatagramSocket, int, android.net.IpSecTransform) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.IpSecManager.DIRECTION_IN, android.net.IpSecManager.DIRECTION_OUT}"></val>
        </annotation>
    </item>
    <item name="android.net.IpSecManager void applyTransportModeTransform(java.net.Socket, int, android.net.IpSecTransform) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.IpSecManager.DIRECTION_IN, android.net.IpSecManager.DIRECTION_OUT}"></val>
        </annotation>
    </item>
    <item name="android.net.NetworkCapabilities boolean hasCapability(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.NetworkCapabilities.NET_CAPABILITY_MMS, android.net.NetworkCapabilities.NET_CAPABILITY_SUPL, android.net.NetworkCapabilities.NET_CAPABILITY_DUN, android.net.NetworkCapabilities.NET_CAPABILITY_FOTA, android.net.NetworkCapabilities.NET_CAPABILITY_IMS, android.net.NetworkCapabilities.NET_CAPABILITY_CBS, android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_IA, android.net.NetworkCapabilities.NET_CAPABILITY_RCS, android.net.NetworkCapabilities.NET_CAPABILITY_XCAP, android.net.NetworkCapabilities.NET_CAPABILITY_EIMS, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED, android.net.NetworkCapabilities.NET_CAPABILITY_TRUSTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_VPN, android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED, android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_SUSPENDED, android.net.NetworkCapabilities.NET_CAPABILITY_MCX, android.net.NetworkCapabilities.NET_CAPABILITY_TEMPORARILY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_ENTERPRISE, android.net.NetworkCapabilities.NET_CAPABILITY_HEAD_UNIT, android.net.NetworkCapabilities.NET_CAPABILITY_MMTEL, android.net.NetworkCapabilities.NET_CAPABILITY_PRIORITIZE_LATENCY, android.net.NetworkCapabilities.NET_CAPABILITY_PRIORITIZE_BANDWIDTH, android.net.NetworkCapabilities.NET_CAPABILITY_LOCAL_NETWORK}"></val>
        </annotation>
    </item>
    <item name="android.net.NetworkCapabilities boolean hasEnterpriseId(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.NetworkCapabilities.NET_ENTERPRISE_ID_1, android.net.NetworkCapabilities.NET_ENTERPRISE_ID_2, android.net.NetworkCapabilities.NET_ENTERPRISE_ID_3, android.net.NetworkCapabilities.NET_ENTERPRISE_ID_4, android.net.NetworkCapabilities.NET_ENTERPRISE_ID_5}"></val>
        </annotation>
    </item>
    <item name="android.net.NetworkCapabilities boolean hasTransport(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.NetworkCapabilities.TRANSPORT_CELLULAR, android.net.NetworkCapabilities.TRANSPORT_WIFI, android.net.NetworkCapabilities.TRANSPORT_BLUETOOTH, android.net.NetworkCapabilities.TRANSPORT_ETHERNET, android.net.NetworkCapabilities.TRANSPORT_VPN, android.net.NetworkCapabilities.TRANSPORT_WIFI_AWARE, android.net.NetworkCapabilities.TRANSPORT_LOWPAN, android.net.NetworkCapabilities.TRANSPORT_USB, android.net.NetworkCapabilities.TRANSPORT_THREAD, android.net.NetworkCapabilities.TRANSPORT_SATELLITE}"></val>
        </annotation>
    </item>
    <item name="android.net.NetworkRequest boolean hasCapability(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.NetworkCapabilities.NET_CAPABILITY_MMS, android.net.NetworkCapabilities.NET_CAPABILITY_SUPL, android.net.NetworkCapabilities.NET_CAPABILITY_DUN, android.net.NetworkCapabilities.NET_CAPABILITY_FOTA, android.net.NetworkCapabilities.NET_CAPABILITY_IMS, android.net.NetworkCapabilities.NET_CAPABILITY_CBS, android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_IA, android.net.NetworkCapabilities.NET_CAPABILITY_RCS, android.net.NetworkCapabilities.NET_CAPABILITY_XCAP, android.net.NetworkCapabilities.NET_CAPABILITY_EIMS, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED, android.net.NetworkCapabilities.NET_CAPABILITY_TRUSTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_VPN, android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED, android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_SUSPENDED, android.net.NetworkCapabilities.NET_CAPABILITY_MCX, android.net.NetworkCapabilities.NET_CAPABILITY_TEMPORARILY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_ENTERPRISE, android.net.NetworkCapabilities.NET_CAPABILITY_HEAD_UNIT, android.net.NetworkCapabilities.NET_CAPABILITY_MMTEL, android.net.NetworkCapabilities.NET_CAPABILITY_PRIORITIZE_LATENCY, android.net.NetworkCapabilities.NET_CAPABILITY_PRIORITIZE_BANDWIDTH, android.net.NetworkCapabilities.NET_CAPABILITY_LOCAL_NETWORK}"></val>
        </annotation>
    </item>
    <item name="android.net.NetworkRequest boolean hasTransport(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.NetworkCapabilities.TRANSPORT_CELLULAR, android.net.NetworkCapabilities.TRANSPORT_WIFI, android.net.NetworkCapabilities.TRANSPORT_BLUETOOTH, android.net.NetworkCapabilities.TRANSPORT_ETHERNET, android.net.NetworkCapabilities.TRANSPORT_VPN, android.net.NetworkCapabilities.TRANSPORT_WIFI_AWARE, android.net.NetworkCapabilities.TRANSPORT_LOWPAN, android.net.NetworkCapabilities.TRANSPORT_USB, android.net.NetworkCapabilities.TRANSPORT_THREAD, android.net.NetworkCapabilities.TRANSPORT_SATELLITE}"></val>
        </annotation>
    </item>
    <item name="android.net.NetworkRequest.Builder android.net.NetworkRequest.Builder addCapability(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.NetworkCapabilities.NET_CAPABILITY_MMS, android.net.NetworkCapabilities.NET_CAPABILITY_SUPL, android.net.NetworkCapabilities.NET_CAPABILITY_DUN, android.net.NetworkCapabilities.NET_CAPABILITY_FOTA, android.net.NetworkCapabilities.NET_CAPABILITY_IMS, android.net.NetworkCapabilities.NET_CAPABILITY_CBS, android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_IA, android.net.NetworkCapabilities.NET_CAPABILITY_RCS, android.net.NetworkCapabilities.NET_CAPABILITY_XCAP, android.net.NetworkCapabilities.NET_CAPABILITY_EIMS, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED, android.net.NetworkCapabilities.NET_CAPABILITY_TRUSTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_VPN, android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED, android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_SUSPENDED, android.net.NetworkCapabilities.NET_CAPABILITY_MCX, android.net.NetworkCapabilities.NET_CAPABILITY_TEMPORARILY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_ENTERPRISE, android.net.NetworkCapabilities.NET_CAPABILITY_HEAD_UNIT, android.net.NetworkCapabilities.NET_CAPABILITY_MMTEL, android.net.NetworkCapabilities.NET_CAPABILITY_PRIORITIZE_LATENCY, android.net.NetworkCapabilities.NET_CAPABILITY_PRIORITIZE_BANDWIDTH, android.net.NetworkCapabilities.NET_CAPABILITY_LOCAL_NETWORK}"></val>
        </annotation>
    </item>
    <item name="android.net.NetworkRequest.Builder android.net.NetworkRequest.Builder addTransportType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.NetworkCapabilities.TRANSPORT_CELLULAR, android.net.NetworkCapabilities.TRANSPORT_WIFI, android.net.NetworkCapabilities.TRANSPORT_BLUETOOTH, android.net.NetworkCapabilities.TRANSPORT_ETHERNET, android.net.NetworkCapabilities.TRANSPORT_VPN, android.net.NetworkCapabilities.TRANSPORT_WIFI_AWARE, android.net.NetworkCapabilities.TRANSPORT_LOWPAN, android.net.NetworkCapabilities.TRANSPORT_USB, android.net.NetworkCapabilities.TRANSPORT_THREAD, android.net.NetworkCapabilities.TRANSPORT_SATELLITE}"></val>
        </annotation>
    </item>
    <item name="android.net.NetworkRequest.Builder android.net.NetworkRequest.Builder removeCapability(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.NetworkCapabilities.NET_CAPABILITY_MMS, android.net.NetworkCapabilities.NET_CAPABILITY_SUPL, android.net.NetworkCapabilities.NET_CAPABILITY_DUN, android.net.NetworkCapabilities.NET_CAPABILITY_FOTA, android.net.NetworkCapabilities.NET_CAPABILITY_IMS, android.net.NetworkCapabilities.NET_CAPABILITY_CBS, android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_IA, android.net.NetworkCapabilities.NET_CAPABILITY_RCS, android.net.NetworkCapabilities.NET_CAPABILITY_XCAP, android.net.NetworkCapabilities.NET_CAPABILITY_EIMS, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED, android.net.NetworkCapabilities.NET_CAPABILITY_TRUSTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_VPN, android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED, android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_SUSPENDED, android.net.NetworkCapabilities.NET_CAPABILITY_MCX, android.net.NetworkCapabilities.NET_CAPABILITY_TEMPORARILY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_ENTERPRISE, android.net.NetworkCapabilities.NET_CAPABILITY_HEAD_UNIT, android.net.NetworkCapabilities.NET_CAPABILITY_MMTEL, android.net.NetworkCapabilities.NET_CAPABILITY_PRIORITIZE_LATENCY, android.net.NetworkCapabilities.NET_CAPABILITY_PRIORITIZE_BANDWIDTH, android.net.NetworkCapabilities.NET_CAPABILITY_LOCAL_NETWORK}"></val>
        </annotation>
    </item>
    <item name="android.net.NetworkRequest.Builder android.net.NetworkRequest.Builder removeTransportType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.NetworkCapabilities.TRANSPORT_CELLULAR, android.net.NetworkCapabilities.TRANSPORT_WIFI, android.net.NetworkCapabilities.TRANSPORT_BLUETOOTH, android.net.NetworkCapabilities.TRANSPORT_ETHERNET, android.net.NetworkCapabilities.TRANSPORT_VPN, android.net.NetworkCapabilities.TRANSPORT_WIFI_AWARE, android.net.NetworkCapabilities.TRANSPORT_LOWPAN, android.net.NetworkCapabilities.TRANSPORT_USB, android.net.NetworkCapabilities.TRANSPORT_THREAD, android.net.NetworkCapabilities.TRANSPORT_SATELLITE}"></val>
        </annotation>
    </item>
    <item name="android.net.SocketKeepalive.Callback void onError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.SocketKeepalive.ERROR_INVALID_NETWORK, android.net.SocketKeepalive.ERROR_INVALID_IP_ADDRESS, android.net.SocketKeepalive.ERROR_INVALID_PORT, android.net.SocketKeepalive.ERROR_INVALID_LENGTH, android.net.SocketKeepalive.ERROR_INVALID_INTERVAL, android.net.SocketKeepalive.ERROR_INVALID_SOCKET, android.net.SocketKeepalive.ERROR_SOCKET_NOT_IDLE}"></val>
        </annotation>
    </item>
    <item name="android.net.VpnProfileState VpnProfileState(int, java.lang.String, boolean, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.VpnProfileState.STATE_CONNECTED, android.net.VpnProfileState.STATE_CONNECTING, android.net.VpnProfileState.STATE_DISCONNECTED, android.net.VpnProfileState.STATE_FAILED}"></val>
        </annotation>
    </item>
    <item name="android.net.eap.EapSessionConfig.Builder android.net.eap.EapSessionConfig.Builder setEapAkaConfig(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.APPTYPE_SIM, android.telephony.TelephonyManager.APPTYPE_USIM, android.telephony.TelephonyManager.APPTYPE_RUIM, android.telephony.TelephonyManager.APPTYPE_CSIM, android.telephony.TelephonyManager.APPTYPE_ISIM}"></val>
        </annotation>
    </item>
    <item name="android.net.eap.EapSessionConfig.Builder android.net.eap.EapSessionConfig.Builder setEapAkaConfig(int, int, android.net.eap.EapSessionConfig.EapAkaOption) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.APPTYPE_SIM, android.telephony.TelephonyManager.APPTYPE_USIM, android.telephony.TelephonyManager.APPTYPE_RUIM, android.telephony.TelephonyManager.APPTYPE_CSIM, android.telephony.TelephonyManager.APPTYPE_ISIM}"></val>
        </annotation>
    </item>
    <item name="android.net.eap.EapSessionConfig.Builder android.net.eap.EapSessionConfig.Builder setEapAkaPrimeConfig(int, int, java.lang.String, boolean) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.APPTYPE_SIM, android.telephony.TelephonyManager.APPTYPE_USIM, android.telephony.TelephonyManager.APPTYPE_RUIM, android.telephony.TelephonyManager.APPTYPE_CSIM, android.telephony.TelephonyManager.APPTYPE_ISIM}"></val>
        </annotation>
    </item>
    <item name="android.net.eap.EapSessionConfig.Builder android.net.eap.EapSessionConfig.Builder setEapSimConfig(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.APPTYPE_SIM, android.telephony.TelephonyManager.APPTYPE_USIM, android.telephony.TelephonyManager.APPTYPE_RUIM, android.telephony.TelephonyManager.APPTYPE_CSIM, android.telephony.TelephonyManager.APPTYPE_ISIM}"></val>
        </annotation>
    </item>
    <item name="android.net.http.BidirectionalStream.Builder android.net.http.BidirectionalStream.Builder setPriority(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.http.BidirectionalStream.STREAM_PRIORITY_IDLE, android.net.http.BidirectionalStream.STREAM_PRIORITY_LOWEST, android.net.http.BidirectionalStream.STREAM_PRIORITY_LOW, android.net.http.BidirectionalStream.STREAM_PRIORITY_MEDIUM, android.net.http.BidirectionalStream.STREAM_PRIORITY_HIGHEST}"></val>
        </annotation>
    </item>
    <item name="android.net.http.ConnectionMigrationOptions.Builder android.net.http.ConnectionMigrationOptions.Builder setAllowNonDefaultNetworkUsage(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.http.ConnectionMigrationOptions.MIGRATION_OPTION_UNSPECIFIED, android.net.http.ConnectionMigrationOptions.MIGRATION_OPTION_ENABLED, android.net.http.ConnectionMigrationOptions.MIGRATION_OPTION_DISABLED}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.net.http.ConnectionMigrationOptions.Builder android.net.http.ConnectionMigrationOptions.Builder setDefaultNetworkMigration(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.http.ConnectionMigrationOptions.MIGRATION_OPTION_UNSPECIFIED, android.net.http.ConnectionMigrationOptions.MIGRATION_OPTION_ENABLED, android.net.http.ConnectionMigrationOptions.MIGRATION_OPTION_DISABLED}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.net.http.ConnectionMigrationOptions.Builder android.net.http.ConnectionMigrationOptions.Builder setPathDegradationMigration(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.http.ConnectionMigrationOptions.MIGRATION_OPTION_UNSPECIFIED, android.net.http.ConnectionMigrationOptions.MIGRATION_OPTION_ENABLED, android.net.http.ConnectionMigrationOptions.MIGRATION_OPTION_DISABLED}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.net.http.DnsOptions.Builder android.net.http.DnsOptions.Builder setPersistHostCache(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.http.DnsOptions.DNS_OPTION_UNSPECIFIED, android.net.http.DnsOptions.DNS_OPTION_ENABLED, android.net.http.DnsOptions.DNS_OPTION_DISABLED}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.net.http.DnsOptions.Builder android.net.http.DnsOptions.Builder setPreestablishConnectionsToStaleDnsResults(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.http.DnsOptions.DNS_OPTION_UNSPECIFIED, android.net.http.DnsOptions.DNS_OPTION_ENABLED, android.net.http.DnsOptions.DNS_OPTION_DISABLED}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.net.http.DnsOptions.Builder android.net.http.DnsOptions.Builder setStaleDns(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.http.DnsOptions.DNS_OPTION_UNSPECIFIED, android.net.http.DnsOptions.DNS_OPTION_ENABLED, android.net.http.DnsOptions.DNS_OPTION_DISABLED}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.net.http.DnsOptions.Builder android.net.http.DnsOptions.Builder setUseHttpStackDnsResolver(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.http.DnsOptions.DNS_OPTION_UNSPECIFIED, android.net.http.DnsOptions.DNS_OPTION_ENABLED, android.net.http.DnsOptions.DNS_OPTION_DISABLED}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.net.http.DnsOptions.StaleDnsOptions.Builder android.net.http.DnsOptions.StaleDnsOptions.Builder setAllowCrossNetworkUsage(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.http.DnsOptions.DNS_OPTION_UNSPECIFIED, android.net.http.DnsOptions.DNS_OPTION_ENABLED, android.net.http.DnsOptions.DNS_OPTION_DISABLED}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.net.http.DnsOptions.StaleDnsOptions.Builder android.net.http.DnsOptions.StaleDnsOptions.Builder setUseStaleOnNameNotResolved(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.http.DnsOptions.DNS_OPTION_UNSPECIFIED, android.net.http.DnsOptions.DNS_OPTION_ENABLED, android.net.http.DnsOptions.DNS_OPTION_DISABLED}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.net.http.UrlRequest.StatusListener void onStatus(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.http.UrlRequest.Status.INVALID, android.net.http.UrlRequest.Status.IDLE, android.net.http.UrlRequest.Status.WAITING_FOR_STALLED_SOCKET_POOL, android.net.http.UrlRequest.Status.WAITING_FOR_AVAILABLE_SOCKET, android.net.http.UrlRequest.Status.WAITING_FOR_DELEGATE, android.net.http.UrlRequest.Status.WAITING_FOR_CACHE, android.net.http.UrlRequest.Status.DOWNLOADING_PAC_FILE, android.net.http.UrlRequest.Status.RESOLVING_PROXY_FOR_URL, android.net.http.UrlRequest.Status.RESOLVING_PROXY_FOR_URL, android.net.http.UrlRequest.Status.RESOLVING_HOST_IN_PAC_FILE, android.net.http.UrlRequest.Status.ESTABLISHING_PROXY_TUNNEL, android.net.http.UrlRequest.Status.RESOLVING_HOST, android.net.http.UrlRequest.Status.CONNECTING, android.net.http.UrlRequest.Status.SSL_HANDSHAKE, android.net.http.UrlRequest.Status.SENDING_REQUEST, android.net.http.UrlRequest.Status.WAITING_FOR_RESPONSE, android.net.http.UrlRequest.Status.READING_RESPONSE}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.ChildSaProposal.Builder android.net.ipsec.ike.ChildSaProposal.Builder addDhGroup(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ipsec.ike.SaProposal.DH_GROUP_NONE, android.net.ipsec.ike.SaProposal.DH_GROUP_1024_BIT_MODP, android.net.ipsec.ike.SaProposal.DH_GROUP_1536_BIT_MODP, android.net.ipsec.ike.SaProposal.DH_GROUP_2048_BIT_MODP, android.net.ipsec.ike.SaProposal.DH_GROUP_3072_BIT_MODP, android.net.ipsec.ike.SaProposal.DH_GROUP_4096_BIT_MODP, android.net.ipsec.ike.SaProposal.DH_GROUP_CURVE_25519}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.ChildSaProposal.Builder android.net.ipsec.ike.ChildSaProposal.Builder addEncryptionAlgorithm(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_3DES, android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_AES_CBC, android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_AES_CTR, android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_AES_GCM_8, android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_AES_GCM_12, android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_AES_GCM_16, android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_CHACHA20_POLY1305}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.ChildSaProposal.Builder android.net.ipsec.ike.ChildSaProposal.Builder addIntegrityAlgorithm(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_NONE, android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_HMAC_SHA1_96, android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_AES_XCBC_96, android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_AES_CMAC_96, android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_HMAC_SHA2_256_128, android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_HMAC_SHA2_384_192, android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_HMAC_SHA2_512_256}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.ChildSessionCallback void onIpSecTransformCreated(android.net.IpSecTransform, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.IpSecManager.DIRECTION_IN, android.net.IpSecManager.DIRECTION_OUT}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.ChildSessionCallback void onIpSecTransformDeleted(android.net.IpSecTransform, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.IpSecManager.DIRECTION_IN, android.net.IpSecManager.DIRECTION_OUT}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.IkeSaProposal.Builder android.net.ipsec.ike.IkeSaProposal.Builder addDhGroup(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ipsec.ike.SaProposal.DH_GROUP_NONE, android.net.ipsec.ike.SaProposal.DH_GROUP_1024_BIT_MODP, android.net.ipsec.ike.SaProposal.DH_GROUP_1536_BIT_MODP, android.net.ipsec.ike.SaProposal.DH_GROUP_2048_BIT_MODP, android.net.ipsec.ike.SaProposal.DH_GROUP_3072_BIT_MODP, android.net.ipsec.ike.SaProposal.DH_GROUP_4096_BIT_MODP, android.net.ipsec.ike.SaProposal.DH_GROUP_CURVE_25519}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.IkeSaProposal.Builder android.net.ipsec.ike.IkeSaProposal.Builder addEncryptionAlgorithm(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_3DES, android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_AES_CBC, android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_AES_CTR, android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_AES_GCM_8, android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_AES_GCM_12, android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_AES_GCM_16, android.net.ipsec.ike.SaProposal.ENCRYPTION_ALGORITHM_CHACHA20_POLY1305}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.IkeSaProposal.Builder android.net.ipsec.ike.IkeSaProposal.Builder addIntegrityAlgorithm(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_NONE, android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_HMAC_SHA1_96, android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_AES_XCBC_96, android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_AES_CMAC_96, android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_HMAC_SHA2_256_128, android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_HMAC_SHA2_384_192, android.net.ipsec.ike.SaProposal.INTEGRITY_ALGORITHM_HMAC_SHA2_512_256}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.IkeSaProposal.Builder android.net.ipsec.ike.IkeSaProposal.Builder addPseudorandomFunction(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ipsec.ike.SaProposal.PSEUDORANDOM_FUNCTION_HMAC_SHA1, android.net.ipsec.ike.SaProposal.PSEUDORANDOM_FUNCTION_AES128_XCBC, android.net.ipsec.ike.SaProposal.PSEUDORANDOM_FUNCTION_SHA2_256, android.net.ipsec.ike.SaProposal.PSEUDORANDOM_FUNCTION_SHA2_384, android.net.ipsec.ike.SaProposal.PSEUDORANDOM_FUNCTION_SHA2_512, android.net.ipsec.ike.SaProposal.PSEUDORANDOM_FUNCTION_AES128_CMAC}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.IkeSessionConfiguration boolean isIkeExtensionEnabled(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ipsec.ike.IkeSessionConfiguration.EXTENSION_TYPE_FRAGMENTATION, android.net.ipsec.ike.IkeSessionConfiguration.EXTENSION_TYPE_MOBIKE}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.IkeSessionConfiguration.Builder android.net.ipsec.ike.IkeSessionConfiguration.Builder addIkeExtension(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ipsec.ike.IkeSessionConfiguration.EXTENSION_TYPE_FRAGMENTATION, android.net.ipsec.ike.IkeSessionConfiguration.EXTENSION_TYPE_MOBIKE}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.IkeSessionParams boolean hasIkeOption(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_ACCEPT_ANY_REMOTE_ID, android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_EAP_ONLY_AUTH, android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_MOBIKE, android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_FORCE_PORT_4500, android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_INITIAL_CONTACT}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.IkeSessionParams.Builder android.net.ipsec.ike.IkeSessionParams.Builder addIkeOption(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_ACCEPT_ANY_REMOTE_ID, android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_EAP_ONLY_AUTH, android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_MOBIKE, android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_FORCE_PORT_4500, android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_INITIAL_CONTACT}"></val>
        </annotation>
    </item>
    <item name="android.net.ipsec.ike.IkeSessionParams.Builder android.net.ipsec.ike.IkeSessionParams.Builder removeIkeOption(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_ACCEPT_ANY_REMOTE_ID, android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_EAP_ONLY_AUTH, android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_MOBIKE, android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_FORCE_PORT_4500, android.net.ipsec.ike.IkeSessionParams.IKE_OPTION_INITIAL_CONTACT}"></val>
        </annotation>
    </item>
    <item name="android.net.nsd.NsdManager.ResolveListener void onStopResolutionFailed(android.net.nsd.NsdServiceInfo, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.nsd.NsdManager.FAILURE_OPERATION_NOT_RUNNING}"></val>
        </annotation>
    </item>
    <item name="android.net.nsd.NsdManager.ServiceInfoCallback void onServiceInfoCallbackRegistrationFailed(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.nsd.NsdManager.FAILURE_ALREADY_ACTIVE, android.net.nsd.NsdManager.FAILURE_BAD_PARAMETERS}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder setCbs(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_ANY, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_REQUIRED, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_FORBIDDEN}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder setDun(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_ANY, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_REQUIRED, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_FORBIDDEN}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder setIms(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_ANY, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_REQUIRED, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_FORBIDDEN}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder setInternet(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_ANY, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_REQUIRED, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_FORBIDDEN}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder setMetered(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_ANY, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_REQUIRED, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_FORBIDDEN}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder setMms(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_ANY, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_REQUIRED, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_FORBIDDEN}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder setOpportunistic(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_ANY, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_REQUIRED, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_FORBIDDEN}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder setRcs(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_ANY, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_REQUIRED, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_FORBIDDEN}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder android.net.vcn.VcnCellUnderlyingNetworkTemplate.Builder setRoaming(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_ANY, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_REQUIRED, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_FORBIDDEN}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnGatewayConnectionConfig boolean hasGatewayOption(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnGatewayConnectionConfig.VCN_GATEWAY_OPTION_ENABLE_DATA_STALL_RECOVERY_WITH_MOBILITY}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnGatewayConnectionConfig.Builder android.net.vcn.VcnGatewayConnectionConfig.Builder addExposedCapability(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.NetworkCapabilities.NET_CAPABILITY_MMS, android.net.NetworkCapabilities.NET_CAPABILITY_SUPL, android.net.NetworkCapabilities.NET_CAPABILITY_DUN, android.net.NetworkCapabilities.NET_CAPABILITY_FOTA, android.net.NetworkCapabilities.NET_CAPABILITY_IMS, android.net.NetworkCapabilities.NET_CAPABILITY_CBS, android.net.NetworkCapabilities.NET_CAPABILITY_IA, android.net.NetworkCapabilities.NET_CAPABILITY_RCS, android.net.NetworkCapabilities.NET_CAPABILITY_XCAP, android.net.NetworkCapabilities.NET_CAPABILITY_EIMS, android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET, android.net.NetworkCapabilities.NET_CAPABILITY_MCX}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnGatewayConnectionConfig.Builder android.net.vcn.VcnGatewayConnectionConfig.Builder addGatewayOption(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnGatewayConnectionConfig.VCN_GATEWAY_OPTION_ENABLE_DATA_STALL_RECOVERY_WITH_MOBILITY}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnGatewayConnectionConfig.Builder android.net.vcn.VcnGatewayConnectionConfig.Builder removeExposedCapability(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.NetworkCapabilities.NET_CAPABILITY_MMS, android.net.NetworkCapabilities.NET_CAPABILITY_SUPL, android.net.NetworkCapabilities.NET_CAPABILITY_DUN, android.net.NetworkCapabilities.NET_CAPABILITY_FOTA, android.net.NetworkCapabilities.NET_CAPABILITY_IMS, android.net.NetworkCapabilities.NET_CAPABILITY_CBS, android.net.NetworkCapabilities.NET_CAPABILITY_IA, android.net.NetworkCapabilities.NET_CAPABILITY_RCS, android.net.NetworkCapabilities.NET_CAPABILITY_XCAP, android.net.NetworkCapabilities.NET_CAPABILITY_EIMS, android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET, android.net.NetworkCapabilities.NET_CAPABILITY_MCX}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnGatewayConnectionConfig.Builder android.net.vcn.VcnGatewayConnectionConfig.Builder removeGatewayOption(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnGatewayConnectionConfig.VCN_GATEWAY_OPTION_ENABLE_DATA_STALL_RECOVERY_WITH_MOBILITY}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnManager.VcnStatusCallback void onGatewayConnectionError(java.lang.String, int, java.lang.Throwable) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnManager.VCN_ERROR_CODE_INTERNAL_ERROR, android.net.vcn.VcnManager.VCN_ERROR_CODE_CONFIG_ERROR, android.net.vcn.VcnManager.VCN_ERROR_CODE_NETWORK_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnManager.VcnStatusCallback void onStatusChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnManager.VCN_STATUS_CODE_NOT_CONFIGURED, android.net.vcn.VcnManager.VCN_STATUS_CODE_INACTIVE, android.net.vcn.VcnManager.VCN_STATUS_CODE_ACTIVE, android.net.vcn.VcnManager.VCN_STATUS_CODE_SAFE_MODE}"></val>
        </annotation>
    </item>
    <item name="android.net.vcn.VcnWifiUnderlyingNetworkTemplate.Builder android.net.vcn.VcnWifiUnderlyingNetworkTemplate.Builder setMetered(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_ANY, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_REQUIRED, android.net.vcn.VcnUnderlyingNetworkTemplate.MATCH_FORBIDDEN}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.ScanResult int convertChannelToFrequencyMhzIfSupported(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.ScanResult.UNSPECIFIED, android.net.wifi.ScanResult.WIFI_BAND_24_GHZ, android.net.wifi.ScanResult.WIFI_BAND_5_GHZ, android.net.wifi.ScanResult.WIFI_BAND_6_GHZ, android.net.wifi.ScanResult.WIFI_BAND_60_GHZ}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiAvailableChannel WifiAvailableChannel(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiAvailableChannel.OP_MODE_STA, android.net.wifi.WifiAvailableChannel.OP_MODE_SAP, android.net.wifi.WifiAvailableChannel.OP_MODE_WIFI_DIRECT_CLI, android.net.wifi.WifiAvailableChannel.OP_MODE_WIFI_DIRECT_GO, android.net.wifi.WifiAvailableChannel.OP_MODE_WIFI_AWARE, android.net.wifi.WifiAvailableChannel.OP_MODE_TDLS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiConfiguration void setMacRandomizationSetting(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiConfiguration.RANDOMIZATION_NONE, android.net.wifi.WifiConfiguration.RANDOMIZATION_PERSISTENT, android.net.wifi.WifiConfiguration.RANDOMIZATION_NON_PERSISTENT, android.net.wifi.WifiConfiguration.RANDOMIZATION_AUTO}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiConfiguration void setSecurityParams(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiConfiguration.SECURITY_TYPE_OPEN, android.net.wifi.WifiConfiguration.SECURITY_TYPE_WEP, android.net.wifi.WifiConfiguration.SECURITY_TYPE_PSK, android.net.wifi.WifiConfiguration.SECURITY_TYPE_EAP, android.net.wifi.WifiConfiguration.SECURITY_TYPE_SAE, android.net.wifi.WifiConfiguration.SECURITY_TYPE_EAP_SUITE_B, android.net.wifi.WifiConfiguration.SECURITY_TYPE_OWE, android.net.wifi.WifiConfiguration.SECURITY_TYPE_WAPI_PSK, android.net.wifi.WifiConfiguration.SECURITY_TYPE_WAPI_CERT, android.net.wifi.WifiConfiguration.SECURITY_TYPE_EAP_WPA3_ENTERPRISE, android.net.wifi.WifiConfiguration.SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT, android.net.wifi.WifiConfiguration.SECURITY_TYPE_DPP}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiEnterpriseConfig void setMinimumTlsVersion(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiEnterpriseConfig.TLS_V1_0, android.net.wifi.WifiEnterpriseConfig.TLS_V1_1, android.net.wifi.WifiEnterpriseConfig.TLS_V1_2, android.net.wifi.WifiEnterpriseConfig.TLS_V1_3}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiInfo.Builder android.net.wifi.WifiInfo.Builder setCurrentSecurityType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiConfiguration.SECURITY_TYPE_OPEN, android.net.wifi.WifiConfiguration.SECURITY_TYPE_WEP, android.net.wifi.WifiConfiguration.SECURITY_TYPE_PSK, android.net.wifi.WifiConfiguration.SECURITY_TYPE_EAP, android.net.wifi.WifiConfiguration.SECURITY_TYPE_SAE, android.net.wifi.WifiConfiguration.SECURITY_TYPE_EAP_SUITE_B, android.net.wifi.WifiConfiguration.SECURITY_TYPE_OWE, android.net.wifi.WifiConfiguration.SECURITY_TYPE_WAPI_PSK, android.net.wifi.WifiConfiguration.SECURITY_TYPE_WAPI_CERT, android.net.wifi.WifiConfiguration.SECURITY_TYPE_EAP_WPA3_ENTERPRISE, android.net.wifi.WifiConfiguration.SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT, android.net.wifi.WifiConfiguration.SECURITY_TYPE_DPP}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiManager boolean isWifiStandardSupported(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.ScanResult.WIFI_STANDARD_UNKNOWN, android.net.wifi.ScanResult.WIFI_STANDARD_LEGACY, android.net.wifi.ScanResult.WIFI_STANDARD_11N, android.net.wifi.ScanResult.WIFI_STANDARD_11AC, android.net.wifi.ScanResult.WIFI_STANDARD_11AX, android.net.wifi.ScanResult.WIFI_STANDARD_11AD, android.net.wifi.ScanResult.WIFI_STANDARD_11BE}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiManager int removeNetworkSuggestions(java.util.List&lt;android.net.wifi.WifiNetworkSuggestion&gt;, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiManager.ACTION_REMOVE_SUGGESTION_LINGER, android.net.wifi.WifiManager.ACTION_REMOVE_SUGGESTION_DISCONNECT}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiManager java.util.List&lt;android.net.wifi.WifiAvailableChannel&gt; getAllowedChannels(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiAvailableChannel.OP_MODE_STA, android.net.wifi.WifiAvailableChannel.OP_MODE_SAP, android.net.wifi.WifiAvailableChannel.OP_MODE_WIFI_DIRECT_CLI, android.net.wifi.WifiAvailableChannel.OP_MODE_WIFI_DIRECT_GO, android.net.wifi.WifiAvailableChannel.OP_MODE_WIFI_AWARE, android.net.wifi.WifiAvailableChannel.OP_MODE_TDLS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiManager java.util.List&lt;android.net.wifi.WifiAvailableChannel&gt; getUsableChannels(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiAvailableChannel.OP_MODE_STA, android.net.wifi.WifiAvailableChannel.OP_MODE_SAP, android.net.wifi.WifiAvailableChannel.OP_MODE_WIFI_DIRECT_CLI, android.net.wifi.WifiAvailableChannel.OP_MODE_WIFI_DIRECT_GO, android.net.wifi.WifiAvailableChannel.OP_MODE_WIFI_AWARE, android.net.wifi.WifiAvailableChannel.OP_MODE_TDLS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiManager void reportCreateInterfaceImpact(int, boolean, java.util.concurrent.Executor, java.util.function.BiConsumer&lt;java.lang.Boolean,java.util.Set&lt;android.net.wifi.WifiManager.InterfaceCreationImpact&gt;&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiManager.WIFI_INTERFACE_TYPE_STA, android.net.wifi.WifiManager.WIFI_INTERFACE_TYPE_AP, android.net.wifi.WifiManager.WIFI_INTERFACE_TYPE_AWARE, android.net.wifi.WifiManager.WIFI_INTERFACE_TYPE_DIRECT}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiManager void setPerSsidRoamingMode(android.net.wifi.WifiSsid, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiManager.ROAMING_MODE_NONE, android.net.wifi.WifiManager.ROAMING_MODE_NORMAL, android.net.wifi.WifiManager.ROAMING_MODE_AGGRESSIVE}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiManager void setSendDhcpHostnameRestriction(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiManager.FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_OPEN, android.net.wifi.WifiManager.FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_SECURE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiManager.AddNetworkResult AddNetworkResult(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiManager.AddNetworkResult.STATUS_SUCCESS, android.net.wifi.WifiManager.AddNetworkResult.STATUS_FAILURE_UNKNOWN, android.net.wifi.WifiManager.AddNetworkResult.STATUS_NO_PERMISSION, android.net.wifi.WifiManager.AddNetworkResult.STATUS_ADD_PASSPOINT_FAILURE, android.net.wifi.WifiManager.AddNetworkResult.STATUS_ADD_WIFI_CONFIG_FAILURE, android.net.wifi.WifiManager.AddNetworkResult.STATUS_INVALID_CONFIGURATION, android.net.wifi.WifiManager.AddNetworkResult.STATUS_NO_PERMISSION_MODIFY_CONFIG, android.net.wifi.WifiManager.AddNetworkResult.STATUS_NO_PERMISSION_MODIFY_PROXY_SETTING, android.net.wifi.WifiManager.AddNetworkResult.STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATION, android.net.wifi.WifiManager.AddNetworkResult.STATUS_FAILURE_UPDATE_NETWORK_KEYS, android.net.wifi.WifiManager.AddNetworkResult.STATUS_INVALID_CONFIGURATION_ENTERPRISE}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiManager.InterfaceCreationImpact InterfaceCreationImpact(int, java.util.Set&lt;java.lang.String&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiManager.WIFI_INTERFACE_TYPE_STA, android.net.wifi.WifiManager.WIFI_INTERFACE_TYPE_AP, android.net.wifi.WifiManager.WIFI_INTERFACE_TYPE_AWARE, android.net.wifi.WifiManager.WIFI_INTERFACE_TYPE_DIRECT}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiManager.LocalOnlyConnectionFailureListener void onConnectionFailed(android.net.wifi.WifiNetworkSpecifier, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiManager.STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWN, android.net.wifi.WifiManager.STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATION, android.net.wifi.WifiManager.STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATION, android.net.wifi.WifiManager.STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONING, android.net.wifi.WifiManager.STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUND, android.net.wifi.WifiManager.STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSE}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiManager.SuggestionConnectionStatusListener void onConnectionStatus(android.net.wifi.WifiNetworkSuggestion, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiManager.STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWN, android.net.wifi.WifiManager.STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATION, android.net.wifi.WifiManager.STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATION, android.net.wifi.WifiManager.STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONING}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiManager.SuggestionUserApprovalStatusListener void onUserApprovalStatusChange(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiManager.STATUS_SUGGESTION_APPROVAL_UNKNOWN, android.net.wifi.WifiManager.STATUS_SUGGESTION_APPROVAL_PENDING, android.net.wifi.WifiManager.STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USER, android.net.wifi.WifiManager.STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USER, android.net.wifi.WifiManager.STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGE}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiNetworkSpecifier.Builder android.net.wifi.WifiNetworkSpecifier.Builder setBand(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.ScanResult.UNSPECIFIED, android.net.wifi.ScanResult.WIFI_BAND_24_GHZ, android.net.wifi.ScanResult.WIFI_BAND_5_GHZ, android.net.wifi.ScanResult.WIFI_BAND_6_GHZ, android.net.wifi.ScanResult.WIFI_BAND_60_GHZ}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.WifiNetworkSuggestion.Builder android.net.wifi.WifiNetworkSuggestion.Builder setMacRandomizationSetting(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiNetworkSuggestion.RANDOMIZATION_PERSISTENT, android.net.wifi.WifiNetworkSuggestion.RANDOMIZATION_NON_PERSISTENT}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.AwarePairingConfig.Builder android.net.wifi.aware.AwarePairingConfig.Builder setBootstrappingMethods(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_OPPORTUNISTIC, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_PIN_CODE_DISPLAY, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_PASSPHRASE_DISPLAY, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_QR_DISPLAY, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_NFC_TAG, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_PIN_CODE_KEYPAD, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_PASSPHRASE_KEYPAD, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_QR_SCAN, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_NFC_READER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.DiscoverySession void acceptPairingRequest(int, android.net.wifi.aware.PeerHandle, java.lang.String, int, java.lang.String) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.aware.Characteristics.WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_128, android.net.wifi.aware.Characteristics.WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_256}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.DiscoverySession void initiateBootstrappingRequest(android.net.wifi.aware.PeerHandle, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_OPPORTUNISTIC, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_PIN_CODE_DISPLAY, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_PASSPHRASE_DISPLAY, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_QR_DISPLAY, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_NFC_TAG, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_PIN_CODE_KEYPAD, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_PASSPHRASE_KEYPAD, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_QR_SCAN, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_NFC_READER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.DiscoverySession void initiatePairingRequest(android.net.wifi.aware.PeerHandle, java.lang.String, int, java.lang.String) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.aware.Characteristics.WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_128, android.net.wifi.aware.Characteristics.WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_256}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.DiscoverySessionCallback void onBootstrappingSucceeded(android.net.wifi.aware.PeerHandle, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_OPPORTUNISTIC, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_PIN_CODE_DISPLAY, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_PASSPHRASE_DISPLAY, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_QR_DISPLAY, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_NFC_TAG, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_PIN_CODE_KEYPAD, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_PASSPHRASE_KEYPAD, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_QR_SCAN, android.net.wifi.aware.AwarePairingConfig.PAIRING_BOOTSTRAPPING_NFC_READER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.DiscoverySessionCallback void onServiceLost(android.net.wifi.aware.PeerHandle, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DISCOVERY_LOST_REASON_UNKNOWN, android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DISCOVERY_LOST_REASON_PEER_NOT_VISIBLE}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.IdentityChangedListener void onClusterIdChanged(int, android.net.MacAddress) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.aware.IdentityChangedListener.CLUSTER_CHANGE_EVENT_STARTED, android.net.wifi.aware.IdentityChangedListener.CLUSTER_CHANGE_EVENT_JOINED}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.PublishConfig.Builder android.net.wifi.aware.PublishConfig.Builder setInstantCommunicationModeEnabled(boolean, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.ScanResult.WIFI_BAND_24_GHZ, android.net.wifi.ScanResult.WIFI_BAND_5_GHZ}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.PublishConfig.Builder android.net.wifi.aware.PublishConfig.Builder setPublishType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.aware.PublishConfig.PUBLISH_TYPE_UNSOLICITED, android.net.wifi.aware.PublishConfig.PUBLISH_TYPE_SOLICITED}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.SubscribeConfig.Builder android.net.wifi.aware.SubscribeConfig.Builder setInstantCommunicationModeEnabled(boolean, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.ScanResult.WIFI_BAND_24_GHZ, android.net.wifi.ScanResult.WIFI_BAND_5_GHZ}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.SubscribeConfig.Builder android.net.wifi.aware.SubscribeConfig.Builder setSubscribeType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.aware.SubscribeConfig.SUBSCRIBE_TYPE_PASSIVE, android.net.wifi.aware.SubscribeConfig.SUBSCRIBE_TYPE_ACTIVE}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.WifiAwareDataPathSecurityConfig.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.aware.Characteristics.WIFI_AWARE_CIPHER_SUITE_NONE, android.net.wifi.aware.Characteristics.WIFI_AWARE_CIPHER_SUITE_NCS_SK_128, android.net.wifi.aware.Characteristics.WIFI_AWARE_CIPHER_SUITE_NCS_SK_256, android.net.wifi.aware.Characteristics.WIFI_AWARE_CIPHER_SUITE_NCS_PK_128, android.net.wifi.aware.Characteristics.WIFI_AWARE_CIPHER_SUITE_NCS_PK_256}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.WifiAwareSession android.net.NetworkSpecifier createNetworkSpecifierOpen(int, byte[]) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR, android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_RESPONDER}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.aware.WifiAwareSession android.net.NetworkSpecifier createNetworkSpecifierPassphrase(int, byte[], java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR, android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_RESPONDER}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.hotspot2.pps.Credential void setMinimumTlsVersion(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.WifiEnterpriseConfig.TLS_V1_0, android.net.wifi.WifiEnterpriseConfig.TLS_V1_1, android.net.wifi.WifiEnterpriseConfig.TLS_V1_2, android.net.wifi.WifiEnterpriseConfig.TLS_V1_3}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pConfig.Builder android.net.wifi.p2p.WifiP2pConfig.Builder setGroupClientIpProvisioningMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pConfig.GROUP_CLIENT_IP_PROVISIONING_MODE_IPV4_DHCP, android.net.wifi.p2p.WifiP2pConfig.GROUP_CLIENT_IP_PROVISIONING_MODE_IPV6_LINK_LOCAL}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pConfig.Builder android.net.wifi.p2p.WifiP2pConfig.Builder setGroupOperatingBand(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pConfig.GROUP_OWNER_BAND_AUTO, android.net.wifi.p2p.WifiP2pConfig.GROUP_OWNER_BAND_2GHZ, android.net.wifi.p2p.WifiP2pConfig.GROUP_OWNER_BAND_5GHZ}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pDiscoveryConfig.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_SCAN_FULL, android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_SCAN_SOCIAL, android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_SCAN_SINGLE_FREQ}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pManager void setConnectionRequestResult(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.MacAddress, int, android.net.wifi.p2p.WifiP2pManager.ActionListener) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pManager.CONNECTION_REQUEST_ACCEPT, android.net.wifi.p2p.WifiP2pManager.CONNECTION_REQUEST_REJECT, android.net.wifi.p2p.WifiP2pManager.CONNECTION_REQUEST_DEFER_TO_SERVICE, android.net.wifi.p2p.WifiP2pManager.CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICE}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pManager void setConnectionRequestResult(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.MacAddress, int, java.lang.String, android.net.wifi.p2p.WifiP2pManager.ActionListener) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pManager.CONNECTION_REQUEST_ACCEPT, android.net.wifi.p2p.WifiP2pManager.CONNECTION_REQUEST_REJECT, android.net.wifi.p2p.WifiP2pManager.CONNECTION_REQUEST_DEFER_TO_SERVICE, android.net.wifi.p2p.WifiP2pManager.CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICE}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pManager.DiscoveryStateListener void onDiscoveryStateAvailable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_DISCOVERY_STOPPED, android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_DISCOVERY_STARTED}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pManager.ExternalApproverRequestListener void onConnectionRequested(int, android.net.wifi.p2p.WifiP2pConfig, android.net.wifi.p2p.WifiP2pDevice) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pManager.ExternalApproverRequestListener.REQUEST_TYPE_NEGOTIATION, android.net.wifi.p2p.WifiP2pManager.ExternalApproverRequestListener.REQUEST_TYPE_INVITATION, android.net.wifi.p2p.WifiP2pManager.ExternalApproverRequestListener.REQUEST_TYPE_JOIN}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pManager.ExternalApproverRequestListener void onDetached(android.net.MacAddress, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pManager.ExternalApproverRequestListener.APPROVER_DETACH_REASON_REMOVE, android.net.wifi.p2p.WifiP2pManager.ExternalApproverRequestListener.APPROVER_DETACH_REASON_FAILURE, android.net.wifi.p2p.WifiP2pManager.ExternalApproverRequestListener.APPROVER_DETACH_REASON_REPLACE, android.net.wifi.p2p.WifiP2pManager.ExternalApproverRequestListener.APPROVER_DETACH_REASON_CLOSE}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pManager.P2pStateListener void onP2pStateAvailable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_STATE_DISABLED, android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_STATE_ENABLED}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pManager.WifiP2pListener void onDiscoveryStateChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_DISCOVERY_STOPPED, android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_DISCOVERY_STARTED}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pManager.WifiP2pListener void onGroupCreationFailed(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pManager.GROUP_CREATION_FAILURE_REASON_CONNECTION_CANCELLED, android.net.wifi.p2p.WifiP2pManager.GROUP_CREATION_FAILURE_REASON_TIMED_OUT, android.net.wifi.p2p.WifiP2pManager.GROUP_CREATION_FAILURE_REASON_USER_REJECTED, android.net.wifi.p2p.WifiP2pManager.GROUP_CREATION_FAILURE_REASON_PROVISION_DISCOVERY_FAILED, android.net.wifi.p2p.WifiP2pManager.GROUP_CREATION_FAILURE_REASON_GROUP_REMOVED, android.net.wifi.p2p.WifiP2pManager.GROUP_CREATION_FAILURE_REASON_INVITATION_FAILED}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pManager.WifiP2pListener void onListenStateChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_LISTEN_STOPPED, android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_LISTEN_STARTED}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pManager.WifiP2pListener void onP2pStateChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_STATE_DISABLED, android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_STATE_ENABLED}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pWfdInfo boolean setDeviceType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pWfdInfo.DEVICE_TYPE_WFD_SOURCE, android.net.wifi.p2p.WifiP2pWfdInfo.DEVICE_TYPE_PRIMARY_SINK, android.net.wifi.p2p.WifiP2pWfdInfo.DEVICE_TYPE_SECONDARY_SINK, android.net.wifi.p2p.WifiP2pWfdInfo.DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.p2p.WifiP2pWfdInfo boolean setR2DeviceType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.p2p.WifiP2pWfdInfo.DEVICE_TYPE_WFD_SOURCE, android.net.wifi.p2p.WifiP2pWfdInfo.DEVICE_TYPE_PRIMARY_SINK, android.net.wifi.p2p.WifiP2pWfdInfo.DEVICE_TYPE_SECONDARY_SINK, android.net.wifi.p2p.WifiP2pWfdInfo.DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.rtt.RangingResult.Builder android.net.wifi.rtt.RangingResult.Builder setMeasurementBandwidth(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.ScanResult.CHANNEL_WIDTH_20MHZ, android.net.wifi.ScanResult.CHANNEL_WIDTH_40MHZ, android.net.wifi.ScanResult.CHANNEL_WIDTH_80MHZ, android.net.wifi.ScanResult.CHANNEL_WIDTH_160MHZ, android.net.wifi.ScanResult.CHANNEL_WIDTH_80MHZ_PLUS_MHZ, android.net.wifi.ScanResult.CHANNEL_WIDTH_320MHZ}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.rtt.RangingResult.Builder android.net.wifi.rtt.RangingResult.Builder setStatus(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.rtt.RangingResult.STATUS_SUCCESS, android.net.wifi.rtt.RangingResult.STATUS_FAIL, android.net.wifi.rtt.RangingResult.STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MC}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.rtt.RangingResultCallback void onRangingFailure(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.rtt.RangingResultCallback.STATUS_CODE_FAIL, android.net.wifi.rtt.RangingResultCallback.STATUS_CODE_FAIL_RTT_NOT_AVAILABLE}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.rtt.ResponderConfig.Builder android.net.wifi.rtt.ResponderConfig.Builder setChannelWidth(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.ScanResult.CHANNEL_WIDTH_20MHZ, android.net.wifi.ScanResult.CHANNEL_WIDTH_40MHZ, android.net.wifi.ScanResult.CHANNEL_WIDTH_80MHZ, android.net.wifi.ScanResult.CHANNEL_WIDTH_160MHZ, android.net.wifi.ScanResult.CHANNEL_WIDTH_80MHZ_PLUS_MHZ, android.net.wifi.ScanResult.CHANNEL_WIDTH_320MHZ}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.rtt.ResponderConfig.Builder android.net.wifi.rtt.ResponderConfig.Builder setPreamble(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.ScanResult.PREAMBLE_LEGACY, android.net.wifi.ScanResult.PREAMBLE_HT, android.net.wifi.ScanResult.PREAMBLE_VHT, android.net.wifi.ScanResult.PREAMBLE_HE, android.net.wifi.ScanResult.PREAMBLE_EHT}"></val>
        </annotation>
    </item>
    <item name="android.net.wifi.rtt.ResponderConfig.Builder android.net.wifi.rtt.ResponderConfig.Builder setResponderType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.net.wifi.rtt.ResponderConfig.RESPONDER_AP, android.net.wifi.rtt.ResponderConfig.RESPONDER_STA}"></val>
        </annotation>
    </item>
    <item name="android.nfc.NfcAdapter void setDiscoveryTechnology(android.app.Activity, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.nfc.NfcAdapter.FLAG_READER_KEEP, android.nfc.NfcAdapter.FLAG_READER_DISABLE, android.nfc.NfcAdapter.FLAG_READER_NFC_A, android.nfc.NfcAdapter.FLAG_READER_NFC_B, android.nfc.NfcAdapter.FLAG_READER_NFC_F, android.nfc.NfcAdapter.FLAG_READER_NFC_V, android.nfc.NfcAdapter.FLAG_READER_NFC_BARCODE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.nfc.NfcAdapter void setDiscoveryTechnology(android.app.Activity, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.nfc.NfcAdapter.FLAG_LISTEN_KEEP, android.nfc.NfcAdapter.FLAG_LISTEN_DISABLE, android.nfc.NfcAdapter.FLAG_LISTEN_NFC_PASSIVE_A, android.nfc.NfcAdapter.FLAG_LISTEN_NFC_PASSIVE_B, android.nfc.NfcAdapter.FLAG_LISTEN_NFC_PASSIVE_F}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.BugreportManager.BugreportCallback void onError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.BugreportManager.BugreportCallback.BUGREPORT_ERROR_INVALID_INPUT, android.os.BugreportManager.BugreportCallback.BUGREPORT_ERROR_RUNTIME, android.os.BugreportManager.BugreportCallback.BUGREPORT_ERROR_USER_DENIED_CONSENT, android.os.BugreportManager.BugreportCallback.BUGREPORT_ERROR_USER_CONSENT_TIMED_OUT, android.os.BugreportManager.BugreportCallback.BUGREPORT_ERROR_ANOTHER_REPORT_IN_PROGRESS, android.os.BugreportManager.BugreportCallback.BUGREPORT_ERROR_NO_BUGREPORT_TO_RETRIEVE}"></val>
        </annotation>
    </item>
    <item name="android.os.DropBoxManager void addData(java.lang.String, byte[], int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.DropBoxManager.IS_EMPTY, android.os.DropBoxManager.IS_TEXT, android.os.DropBoxManager.IS_GZIPPED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.DropBoxManager void addFile(java.lang.String, java.io.File, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.DropBoxManager.IS_EMPTY, android.os.DropBoxManager.IS_TEXT, android.os.DropBoxManager.IS_GZIPPED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.DropBoxManager.Entry Entry(java.lang.String, long, android.os.ParcelFileDescriptor, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.DropBoxManager.IS_EMPTY, android.os.DropBoxManager.IS_TEXT, android.os.DropBoxManager.IS_GZIPPED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.DropBoxManager.Entry Entry(java.lang.String, long, byte[], int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.DropBoxManager.IS_EMPTY, android.os.DropBoxManager.IS_TEXT, android.os.DropBoxManager.IS_GZIPPED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.DropBoxManager.Entry Entry(java.lang.String, long, java.io.File, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.DropBoxManager.IS_EMPTY, android.os.DropBoxManager.IS_TEXT, android.os.DropBoxManager.IS_GZIPPED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.FileObserver FileObserver(java.io.File, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.FileObserver.ACCESS, android.os.FileObserver.MODIFY, android.os.FileObserver.ATTRIB, android.os.FileObserver.CLOSE_WRITE, android.os.FileObserver.CLOSE_NOWRITE, android.os.FileObserver.OPEN, android.os.FileObserver.MOVED_FROM, android.os.FileObserver.MOVED_TO, android.os.FileObserver.CREATE, android.os.FileObserver.DELETE, android.os.FileObserver.DELETE_SELF, android.os.FileObserver.MOVE_SELF}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.FileObserver FileObserver(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.FileObserver.ACCESS, android.os.FileObserver.MODIFY, android.os.FileObserver.ATTRIB, android.os.FileObserver.CLOSE_WRITE, android.os.FileObserver.CLOSE_NOWRITE, android.os.FileObserver.OPEN, android.os.FileObserver.MOVED_FROM, android.os.FileObserver.MOVED_TO, android.os.FileObserver.CREATE, android.os.FileObserver.DELETE, android.os.FileObserver.DELETE_SELF, android.os.FileObserver.MOVE_SELF}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.FileObserver FileObserver(java.util.List&lt;java.io.File&gt;, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.FileObserver.ACCESS, android.os.FileObserver.MODIFY, android.os.FileObserver.ATTRIB, android.os.FileObserver.CLOSE_WRITE, android.os.FileObserver.CLOSE_NOWRITE, android.os.FileObserver.OPEN, android.os.FileObserver.MOVED_FROM, android.os.FileObserver.MOVED_TO, android.os.FileObserver.CREATE, android.os.FileObserver.DELETE, android.os.FileObserver.DELETE_SELF, android.os.FileObserver.MOVE_SELF}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.HardwarePropertiesManager float[] getDeviceTemperatures(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.HardwarePropertiesManager.DEVICE_TEMPERATURE_CPU, android.os.HardwarePropertiesManager.DEVICE_TEMPERATURE_GPU, android.os.HardwarePropertiesManager.DEVICE_TEMPERATURE_BATTERY, android.os.HardwarePropertiesManager.DEVICE_TEMPERATURE_SKIN}"></val>
        </annotation>
    </item>
    <item name="android.os.HardwarePropertiesManager float[] getDeviceTemperatures(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.HardwarePropertiesManager.TEMPERATURE_CURRENT, android.os.HardwarePropertiesManager.TEMPERATURE_THROTTLING, android.os.HardwarePropertiesManager.TEMPERATURE_SHUTDOWN, android.os.HardwarePropertiesManager.TEMPERATURE_THROTTLING_BELOW_VR_MIN}"></val>
        </annotation>
    </item>
    <item name="android.os.MessageQueue void addOnFileDescriptorEventListener(java.io.FileDescriptor, int, android.os.MessageQueue.OnFileDescriptorEventListener) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.MessageQueue.OnFileDescriptorEventListener.EVENT_INPUT, android.os.MessageQueue.OnFileDescriptorEventListener.EVENT_OUTPUT, android.os.MessageQueue.OnFileDescriptorEventListener.EVENT_ERROR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.MessageQueue.OnFileDescriptorEventListener int onFileDescriptorEvents(java.io.FileDescriptor, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.MessageQueue.OnFileDescriptorEventListener.EVENT_INPUT, android.os.MessageQueue.OnFileDescriptorEventListener.EVENT_OUTPUT, android.os.MessageQueue.OnFileDescriptorEventListener.EVENT_ERROR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.Parcelable void writeToParcel(android.os.Parcel, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.PowerManager boolean isAllowedInLowPowerStandby(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.PowerManager.LOW_POWER_STANDBY_ALLOWED_REASON_VOICE_INTERACTION, android.os.PowerManager.LOW_POWER_STANDBY_ALLOWED_REASON_TEMP_POWER_SAVE_ALLOWLIST, android.os.PowerManager.LOW_POWER_STANDBY_ALLOWED_REASON_ONGOING_CALL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.PowerManager.OnThermalStatusChangedListener void onThermalStatusChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.PowerManager.THERMAL_STATUS_NONE, android.os.PowerManager.THERMAL_STATUS_LIGHT, android.os.PowerManager.THERMAL_STATUS_MODERATE, android.os.PowerManager.THERMAL_STATUS_SEVERE, android.os.PowerManager.THERMAL_STATUS_CRITICAL, android.os.PowerManager.THERMAL_STATUS_EMERGENCY, android.os.PowerManager.THERMAL_STATUS_SHUTDOWN}"></val>
        </annotation>
    </item>
    <item name="android.os.ProfilingManager void requestProfiling(int, android.os.Bundle, java.lang.String, android.os.CancellationSignal, java.util.concurrent.Executor, java.util.function.Consumer&lt;android.os.ProfilingResult&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.ProfilingManager.PROFILING_TYPE_JAVA_HEAP_DUMP, android.os.ProfilingManager.PROFILING_TYPE_HEAP_PROFILE, android.os.ProfilingManager.PROFILING_TYPE_STACK_SAMPLING, android.os.ProfilingManager.PROFILING_TYPE_SYSTEM_TRACE}"></val>
        </annotation>
    </item>
    <item name="android.os.UserManager boolean hasUserRestriction(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.os.UserManager.ALLOW_PARENT_PROFILE_APP_LINKING, android.os.UserManager.DISALLOW_ADD_MANAGED_PROFILE, android.os.UserManager.DISALLOW_ADD_PRIVATE_PROFILE, android.os.UserManager.DISALLOW_ADD_USER, android.os.UserManager.DISALLOW_ADD_WIFI_CONFIG, android.os.UserManager.DISALLOW_ADJUST_VOLUME, android.os.UserManager.DISALLOW_AIRPLANE_MODE, android.os.UserManager.DISALLOW_AMBIENT_DISPLAY, android.os.UserManager.DISALLOW_APPS_CONTROL, android.os.UserManager.DISALLOW_ASSIST_CONTENT, android.os.UserManager.DISALLOW_AUTOFILL, android.os.UserManager.DISALLOW_BLUETOOTH, android.os.UserManager.DISALLOW_BLUETOOTH_SHARING, android.os.UserManager.DISALLOW_CAMERA_TOGGLE, android.os.UserManager.DISALLOW_CELLULAR_2G, android.os.UserManager.DISALLOW_CHANGE_WIFI_STATE, android.os.UserManager.DISALLOW_CONFIG_BLUETOOTH, android.os.UserManager.DISALLOW_CONFIG_BRIGHTNESS, android.os.UserManager.DISALLOW_CONFIG_CELL_BROADCASTS, android.os.UserManager.DISALLOW_CONFIG_CREDENTIALS, android.os.UserManager.DISALLOW_CONFIG_DATE_TIME, android.os.UserManager.DISALLOW_CONFIG_DEFAULT_APPS, android.os.UserManager.DISALLOW_CONFIG_LOCALE, android.os.UserManager.DISALLOW_CONFIG_LOCATION, android.os.UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS, android.os.UserManager.DISALLOW_CONFIG_PRIVATE_DNS, android.os.UserManager.DISALLOW_CONFIG_SCREEN_TIMEOUT, android.os.UserManager.DISALLOW_CONFIG_TETHERING, android.os.UserManager.DISALLOW_CONFIG_VPN, android.os.UserManager.DISALLOW_CONFIG_WIFI, android.os.UserManager.DISALLOW_CONTENT_CAPTURE, android.os.UserManager.DISALLOW_CONTENT_SUGGESTIONS, android.os.UserManager.DISALLOW_CREATE_WINDOWS, android.os.UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE, android.os.UserManager.DISALLOW_DATA_ROAMING, android.os.UserManager.DISALLOW_DEBUGGING_FEATURES, android.os.UserManager.DISALLOW_FACTORY_RESET, android.os.UserManager.DISALLOW_FUN, android.os.UserManager.DISALLOW_GRANT_ADMIN, android.os.UserManager.DISALLOW_INSTALL_APPS, android.os.UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES, android.os.UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY, android.os.UserManager.DISALLOW_MICROPHONE_TOGGLE, android.os.UserManager.DISALLOW_MODIFY_ACCOUNTS, android.os.UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA, android.os.UserManager.DISALLOW_NEAR_FIELD_COMMUNICATION_RADIO, android.os.UserManager.DISALLOW_NETWORK_RESET, android.os.UserManager.DISALLOW_OUTGOING_BEAM, android.os.UserManager.DISALLOW_OUTGOING_CALLS, android.os.UserManager.DISALLOW_PRINTING, android.os.UserManager.DISALLOW_REMOVE_MANAGED_PROFILE, android.os.UserManager.DISALLOW_REMOVE_USER, android.os.UserManager.DISALLOW_SAFE_BOOT, android.os.UserManager.DISALLOW_SET_USER_ICON, android.os.UserManager.DISALLOW_SET_WALLPAPER, android.os.UserManager.DISALLOW_SHARE_INTO_MANAGED_PROFILE, android.os.UserManager.DISALLOW_SHARE_LOCATION, android.os.UserManager.DISALLOW_SHARING_ADMIN_CONFIGURED_WIFI, android.os.UserManager.DISALLOW_SIM_GLOBALLY, android.os.UserManager.DISALLOW_SMS, android.os.UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS, android.os.UserManager.DISALLOW_ULTRA_WIDEBAND_RADIO, android.os.UserManager.DISALLOW_UNIFIED_PASSWORD, android.os.UserManager.DISALLOW_UNINSTALL_APPS, android.os.UserManager.DISALLOW_UNMUTE_MICROPHONE, android.os.UserManager.DISALLOW_USB_FILE_TRANSFER, android.os.UserManager.DISALLOW_USER_SWITCH, android.os.UserManager.DISALLOW_WIFI_DIRECT, android.os.UserManager.DISALLOW_WIFI_TETHERING, android.os.UserManager.ENSURE_VERIFY_APPS, android.os.UserManager.KEY_RESTRICTIONS_PENDING}"></val>
        </annotation>
    </item>
    <item name="android.os.UserManager boolean requestQuietModeEnabled(boolean, android.os.UserHandle, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.UserManager.QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIRED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.VibrationAttributes android.os.VibrationAttributes createForUsage(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationAttributes.USAGE_UNKNOWN, android.os.VibrationAttributes.USAGE_ACCESSIBILITY, android.os.VibrationAttributes.USAGE_ALARM, android.os.VibrationAttributes.USAGE_COMMUNICATION_REQUEST, android.os.VibrationAttributes.USAGE_HARDWARE_FEEDBACK, android.os.VibrationAttributes.USAGE_MEDIA, android.os.VibrationAttributes.USAGE_NOTIFICATION, android.os.VibrationAttributes.USAGE_PHYSICAL_EMULATION, android.os.VibrationAttributes.USAGE_RINGTONE, android.os.VibrationAttributes.USAGE_TOUCH}"></val>
        </annotation>
    </item>
    <item name="android.os.VibrationAttributes boolean isFlagSet(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationAttributes.FLAG_BYPASS_INTERRUPTION_POLICY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.VibrationAttributes.Builder android.os.VibrationAttributes.Builder setFlags(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationAttributes.FLAG_BYPASS_INTERRUPTION_POLICY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.os.VibrationAttributes.Builder android.os.VibrationAttributes.Builder setUsage(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationAttributes.USAGE_UNKNOWN, android.os.VibrationAttributes.USAGE_ACCESSIBILITY, android.os.VibrationAttributes.USAGE_ALARM, android.os.VibrationAttributes.USAGE_COMMUNICATION_REQUEST, android.os.VibrationAttributes.USAGE_HARDWARE_FEEDBACK, android.os.VibrationAttributes.USAGE_MEDIA, android.os.VibrationAttributes.USAGE_NOTIFICATION, android.os.VibrationAttributes.USAGE_PHYSICAL_EMULATION, android.os.VibrationAttributes.USAGE_RINGTONE, android.os.VibrationAttributes.USAGE_TOUCH}"></val>
        </annotation>
    </item>
    <item name="android.os.VibrationEffect android.os.VibrationEffect createPredefined(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationEffect.EFFECT_TICK, android.os.VibrationEffect.EFFECT_CLICK, android.os.VibrationEffect.EFFECT_HEAVY_CLICK, android.os.VibrationEffect.EFFECT_DOUBLE_CLICK}"></val>
        </annotation>
    </item>
    <item name="android.os.VibrationEffect.Composition android.os.VibrationEffect.Composition addPrimitive(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationEffect.Composition.PRIMITIVE_CLICK, android.os.VibrationEffect.Composition.PRIMITIVE_THUD, android.os.VibrationEffect.Composition.PRIMITIVE_SPIN, android.os.VibrationEffect.Composition.PRIMITIVE_QUICK_RISE, android.os.VibrationEffect.Composition.PRIMITIVE_SLOW_RISE, android.os.VibrationEffect.Composition.PRIMITIVE_QUICK_FALL, android.os.VibrationEffect.Composition.PRIMITIVE_TICK, android.os.VibrationEffect.Composition.PRIMITIVE_LOW_TICK}"></val>
        </annotation>
    </item>
    <item name="android.os.VibrationEffect.Composition android.os.VibrationEffect.Composition addPrimitive(int, float) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationEffect.Composition.PRIMITIVE_CLICK, android.os.VibrationEffect.Composition.PRIMITIVE_THUD, android.os.VibrationEffect.Composition.PRIMITIVE_SPIN, android.os.VibrationEffect.Composition.PRIMITIVE_QUICK_RISE, android.os.VibrationEffect.Composition.PRIMITIVE_SLOW_RISE, android.os.VibrationEffect.Composition.PRIMITIVE_QUICK_FALL, android.os.VibrationEffect.Composition.PRIMITIVE_TICK, android.os.VibrationEffect.Composition.PRIMITIVE_LOW_TICK}"></val>
        </annotation>
    </item>
    <item name="android.os.VibrationEffect.Composition android.os.VibrationEffect.Composition addPrimitive(int, float, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationEffect.Composition.PRIMITIVE_CLICK, android.os.VibrationEffect.Composition.PRIMITIVE_THUD, android.os.VibrationEffect.Composition.PRIMITIVE_SPIN, android.os.VibrationEffect.Composition.PRIMITIVE_QUICK_RISE, android.os.VibrationEffect.Composition.PRIMITIVE_SLOW_RISE, android.os.VibrationEffect.Composition.PRIMITIVE_QUICK_FALL, android.os.VibrationEffect.Composition.PRIMITIVE_TICK, android.os.VibrationEffect.Composition.PRIMITIVE_LOW_TICK}"></val>
        </annotation>
    </item>
    <item name="android.os.Vibrator boolean areAllPrimitivesSupported(int...) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationEffect.Composition.PRIMITIVE_CLICK, android.os.VibrationEffect.Composition.PRIMITIVE_THUD, android.os.VibrationEffect.Composition.PRIMITIVE_SPIN, android.os.VibrationEffect.Composition.PRIMITIVE_QUICK_RISE, android.os.VibrationEffect.Composition.PRIMITIVE_SLOW_RISE, android.os.VibrationEffect.Composition.PRIMITIVE_QUICK_FALL, android.os.VibrationEffect.Composition.PRIMITIVE_TICK, android.os.VibrationEffect.Composition.PRIMITIVE_LOW_TICK}"></val>
        </annotation>
    </item>
    <item name="android.os.Vibrator boolean[] arePrimitivesSupported(int...) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationEffect.Composition.PRIMITIVE_CLICK, android.os.VibrationEffect.Composition.PRIMITIVE_THUD, android.os.VibrationEffect.Composition.PRIMITIVE_SPIN, android.os.VibrationEffect.Composition.PRIMITIVE_QUICK_RISE, android.os.VibrationEffect.Composition.PRIMITIVE_SLOW_RISE, android.os.VibrationEffect.Composition.PRIMITIVE_QUICK_FALL, android.os.VibrationEffect.Composition.PRIMITIVE_TICK, android.os.VibrationEffect.Composition.PRIMITIVE_LOW_TICK}"></val>
        </annotation>
    </item>
    <item name="android.os.Vibrator int areAllEffectsSupported(int...) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationEffect.EFFECT_TICK, android.os.VibrationEffect.EFFECT_CLICK, android.os.VibrationEffect.EFFECT_HEAVY_CLICK, android.os.VibrationEffect.EFFECT_DOUBLE_CLICK}"></val>
        </annotation>
    </item>
    <item name="android.os.Vibrator int[] areEffectsSupported(int...) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationEffect.EFFECT_TICK, android.os.VibrationEffect.EFFECT_CLICK, android.os.VibrationEffect.EFFECT_HEAVY_CLICK, android.os.VibrationEffect.EFFECT_DOUBLE_CLICK}"></val>
        </annotation>
    </item>
    <item name="android.os.Vibrator int[] getPrimitiveDurations(int...) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.VibrationEffect.Composition.PRIMITIVE_CLICK, android.os.VibrationEffect.Composition.PRIMITIVE_THUD, android.os.VibrationEffect.Composition.PRIMITIVE_SPIN, android.os.VibrationEffect.Composition.PRIMITIVE_QUICK_RISE, android.os.VibrationEffect.Composition.PRIMITIVE_SLOW_RISE, android.os.VibrationEffect.Composition.PRIMITIVE_QUICK_FALL, android.os.VibrationEffect.Composition.PRIMITIVE_TICK, android.os.VibrationEffect.Composition.PRIMITIVE_LOW_TICK}"></val>
        </annotation>
    </item>
    <item name="android.os.ext.SdkExtensions int getExtensionVersion(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.Build.VERSION_CODES.R, android.os.Build.VERSION_CODES.S, android.os.Build.VERSION_CODES.TIRAMISU, android.os.Build.VERSION_CODES.UPSIDE_DOWN_CAKE, android.os.Build.VERSION_CODES.VANILLA_ICE_CREAM, android.os.ext.SdkExtensions.AD_SERVICES}"></val>
        </annotation>
    </item>
    <item name="android.print.PrintAttributes.Builder android.print.PrintAttributes.Builder setColorMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.print.PrintAttributes.COLOR_MODE_MONOCHROME, android.print.PrintAttributes.COLOR_MODE_COLOR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.print.PrintAttributes.Builder android.print.PrintAttributes.Builder setDuplexMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.print.PrintAttributes.DUPLEX_MODE_NONE, android.print.PrintAttributes.DUPLEX_MODE_LONG_EDGE, android.print.PrintAttributes.DUPLEX_MODE_SHORT_EDGE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.print.PrintDocumentInfo.Builder android.print.PrintDocumentInfo.Builder setContentType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.print.PrintDocumentInfo.CONTENT_TYPE_UNKNOWN, android.print.PrintDocumentInfo.CONTENT_TYPE_DOCUMENT, android.print.PrintDocumentInfo.CONTENT_TYPE_PHOTO}"></val>
        </annotation>
    </item>
    <item name="android.print.PrinterCapabilitiesInfo.Builder android.print.PrinterCapabilitiesInfo.Builder setColorModes(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.print.PrintAttributes.COLOR_MODE_MONOCHROME, android.print.PrintAttributes.COLOR_MODE_COLOR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.print.PrinterCapabilitiesInfo.Builder android.print.PrinterCapabilitiesInfo.Builder setColorModes(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.print.PrintAttributes.COLOR_MODE_MONOCHROME, android.print.PrintAttributes.COLOR_MODE_COLOR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.print.PrinterCapabilitiesInfo.Builder android.print.PrinterCapabilitiesInfo.Builder setDuplexModes(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.print.PrintAttributes.DUPLEX_MODE_NONE, android.print.PrintAttributes.DUPLEX_MODE_LONG_EDGE, android.print.PrintAttributes.DUPLEX_MODE_SHORT_EDGE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.print.PrinterCapabilitiesInfo.Builder android.print.PrinterCapabilitiesInfo.Builder setDuplexModes(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.print.PrintAttributes.DUPLEX_MODE_NONE, android.print.PrintAttributes.DUPLEX_MODE_LONG_EDGE, android.print.PrintAttributes.DUPLEX_MODE_SHORT_EDGE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.print.PrinterInfo.Builder Builder(android.print.PrinterId, java.lang.String, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.print.PrinterInfo.STATUS_IDLE, android.print.PrinterInfo.STATUS_BUSY, android.print.PrinterInfo.STATUS_UNAVAILABLE}"></val>
        </annotation>
    </item>
    <item name="android.print.PrinterInfo.Builder android.print.PrinterInfo.Builder setStatus(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.print.PrinterInfo.STATUS_IDLE, android.print.PrinterInfo.STATUS_BUSY, android.print.PrinterInfo.STATUS_UNAVAILABLE}"></val>
        </annotation>
    </item>
    <item name="android.provider.CloudMediaProvider.CloudMediaSurfaceStateChangedCallback void setPlaybackState(int, int, android.os.Bundle) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.provider.CloudMediaProvider.CloudMediaSurfaceStateChangedCallback.PLAYBACK_STATE_BUFFERING, android.provider.CloudMediaProvider.CloudMediaSurfaceStateChangedCallback.PLAYBACK_STATE_READY, android.provider.CloudMediaProvider.CloudMediaSurfaceStateChangedCallback.PLAYBACK_STATE_STARTED, android.provider.CloudMediaProvider.CloudMediaSurfaceStateChangedCallback.PLAYBACK_STATE_PAUSED, android.provider.CloudMediaProvider.CloudMediaSurfaceStateChangedCallback.PLAYBACK_STATE_COMPLETED, android.provider.CloudMediaProvider.CloudMediaSurfaceStateChangedCallback.PLAYBACK_STATE_ERROR_RETRIABLE_FAILURE, android.provider.CloudMediaProvider.CloudMediaSurfaceStateChangedCallback.PLAYBACK_STATE_ERROR_PERMANENT_FAILURE, android.provider.CloudMediaProvider.CloudMediaSurfaceStateChangedCallback.PLAYBACK_STATE_MEDIA_SIZE_CHANGED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.provider.E2eeContactKeysManager boolean updateE2eeContactKeyLocalVerificationState(java.lang.String, java.lang.String, java.lang.String, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.provider.E2eeContactKeysManager.VERIFICATION_STATE_UNVERIFIED, android.provider.E2eeContactKeysManager.VERIFICATION_STATE_VERIFICATION_FAILED, android.provider.E2eeContactKeysManager.VERIFICATION_STATE_VERIFIED}"></val>
        </annotation>
    </item>
    <item name="android.provider.E2eeContactKeysManager boolean updateE2eeContactKeyRemoteVerificationState(java.lang.String, java.lang.String, java.lang.String, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.provider.E2eeContactKeysManager.VERIFICATION_STATE_UNVERIFIED, android.provider.E2eeContactKeysManager.VERIFICATION_STATE_VERIFICATION_FAILED, android.provider.E2eeContactKeysManager.VERIFICATION_STATE_VERIFIED}"></val>
        </annotation>
    </item>
    <item name="android.provider.E2eeContactKeysManager boolean updateE2eeSelfKeyRemoteVerificationState(java.lang.String, java.lang.String, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.provider.E2eeContactKeysManager.VERIFICATION_STATE_UNVERIFIED, android.provider.E2eeContactKeysManager.VERIFICATION_STATE_VERIFICATION_FAILED, android.provider.E2eeContactKeysManager.VERIFICATION_STATE_VERIFIED}"></val>
        </annotation>
    </item>
    <item name="android.provider.FontsContract.FontRequestCallback void onTypefaceRequestFailed(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.provider.FontsContract.FontRequestCallback.FAIL_REASON_PROVIDER_NOT_FOUND, android.provider.FontsContract.FontRequestCallback.FAIL_REASON_FONT_LOAD_ERROR, android.provider.FontsContract.FontRequestCallback.FAIL_REASON_FONT_NOT_FOUND, android.provider.FontsContract.FontRequestCallback.FAIL_REASON_FONT_UNAVAILABLE, android.provider.FontsContract.FontRequestCallback.FAIL_REASON_MALFORMED_QUERY}"></val>
        </annotation>
    </item>
    <item name="android.provider.SimPhonebookContract.ElementaryFiles android.net.Uri getItemUri(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.provider.SimPhonebookContract.ElementaryFiles.EF_UNKNOWN, android.provider.SimPhonebookContract.ElementaryFiles.EF_ADN, android.provider.SimPhonebookContract.ElementaryFiles.EF_FDN, android.provider.SimPhonebookContract.ElementaryFiles.EF_SDN}"></val>
        </annotation>
    </item>
    <item name="android.provider.SimPhonebookContract.SimRecords android.net.Uri getContentUri(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.provider.SimPhonebookContract.ElementaryFiles.EF_UNKNOWN, android.provider.SimPhonebookContract.ElementaryFiles.EF_ADN, android.provider.SimPhonebookContract.ElementaryFiles.EF_FDN, android.provider.SimPhonebookContract.ElementaryFiles.EF_SDN}"></val>
        </annotation>
    </item>
    <item name="android.provider.SimPhonebookContract.SimRecords android.net.Uri getItemUri(int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.provider.SimPhonebookContract.ElementaryFiles.EF_UNKNOWN, android.provider.SimPhonebookContract.ElementaryFiles.EF_ADN, android.provider.SimPhonebookContract.ElementaryFiles.EF_FDN, android.provider.SimPhonebookContract.ElementaryFiles.EF_SDN}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CGBMV(int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CGEMM(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CGEMM(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CGEMV(int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHBMV(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHEMM(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHEMM(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHEMV(int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHER(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHER2(int, android.renderscript.Float2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHER2K(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHER2K(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHERK(int, int, float, android.renderscript.Allocation, float, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHERK(int, int, float, android.renderscript.Allocation, float, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHPMV(int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHPR(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CHPR2(int, android.renderscript.Float2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CSYMM(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CSYMM(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CSYR2K(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CSYR2K(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CSYRK(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CSYRK(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRMM(int, int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRMM(int, int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRMM(int, int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRMM(int, int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRSM(int, int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRSM(int, int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRSM(int, int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRSM(int, int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void CTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DGBMV(int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DGEMM(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DGEMM(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DGEMV(int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSBMV(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSPMV(int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSPR(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSPR2(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSYMM(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSYMM(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSYMV(int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSYR(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSYR2(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSYR2K(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSYR2K(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSYRK(int, int, double, android.renderscript.Allocation, double, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DSYRK(int, int, double, android.renderscript.Allocation, double, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRMM(int, int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRMM(int, int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRMM(int, int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRMM(int, int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRSM(int, int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRSM(int, int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRSM(int, int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRSM(int, int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void DTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SGBMV(int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SGEMM(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SGEMM(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SGEMV(int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSBMV(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSPMV(int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSPR(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSPR2(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSYMM(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSYMM(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSYMV(int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSYR(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSYR2(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSYR2K(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSYR2K(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSYRK(int, int, float, android.renderscript.Allocation, float, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void SSYRK(int, int, float, android.renderscript.Allocation, float, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRMM(int, int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRMM(int, int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRMM(int, int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRMM(int, int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRSM(int, int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRSM(int, int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRSM(int, int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRSM(int, int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void STRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZGBMV(int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZGEMM(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZGEMM(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZGEMV(int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHBMV(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHEMM(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHEMM(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHEMV(int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHER(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHER2(int, android.renderscript.Double2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHER2K(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHER2K(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHERK(int, int, double, android.renderscript.Allocation, double, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHERK(int, int, double, android.renderscript.Allocation, double, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHPMV(int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHPR(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZHPR2(int, android.renderscript.Double2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZSYMM(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZSYMM(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZSYR2K(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZSYR2K(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZSYRK(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZSYRK(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRMM(int, int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRMM(int, int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRMM(int, int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRMM(int, int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRSM(int, int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.LEFT, android.renderscript.ScriptIntrinsicBLAS.RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRSM(int, int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRSM(int, int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRSM(int, int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.UPPER, android.renderscript.ScriptIntrinsicBLAS.LOWER}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NO_TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.TRANSPOSE, android.renderscript.ScriptIntrinsicBLAS.CONJ_TRANSPOSE}"></val>
        </annotation>
    </item>
    <item name="android.renderscript.ScriptIntrinsicBLAS void ZTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.renderscript.ScriptIntrinsicBLAS.NON_UNIT, android.renderscript.ScriptIntrinsicBLAS.UNIT}"></val>
        </annotation>
    </item>
    <item name="android.security.KeyChain boolean isBoundKeyAlgorithm(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.KEY_ALGORITHM_RSA, android.security.keystore.KeyProperties.KEY_ALGORITHM_EC, android.security.keystore.KeyProperties.KEY_ALGORITHM_AES, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA1, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA224, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA256, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA384, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA512}"></val>
        </annotation>
    </item>
    <item name="android.security.KeyChain boolean isKeyAlgorithmSupported(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.KEY_ALGORITHM_RSA, android.security.keystore.KeyProperties.KEY_ALGORITHM_EC, android.security.keystore.KeyProperties.KEY_ALGORITHM_AES, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA1, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA224, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA256, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA384, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA512}"></val>
        </annotation>
    </item>
    <item name="android.security.KeyChain void choosePrivateKeyAlias(android.app.Activity, android.security.KeyChainAliasCallback, java.lang.String[], java.security.Principal[], android.net.Uri, java.lang.String) 2">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.KEY_ALGORITHM_RSA, android.security.keystore.KeyProperties.KEY_ALGORITHM_EC, android.security.keystore.KeyProperties.KEY_ALGORITHM_AES, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA1, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA224, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA256, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA384, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA512}"></val>
        </annotation>
    </item>
    <item name="android.security.KeyChain void choosePrivateKeyAlias(android.app.Activity, android.security.KeyChainAliasCallback, java.lang.String[], java.security.Principal[], java.lang.String, int, java.lang.String) 2">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.KEY_ALGORITHM_RSA, android.security.keystore.KeyProperties.KEY_ALGORITHM_EC, android.security.keystore.KeyProperties.KEY_ALGORITHM_AES, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA1, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA224, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA256, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA384, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA512}"></val>
        </annotation>
    </item>
    <item name="android.security.KeyPairGeneratorSpec.Builder android.security.KeyPairGeneratorSpec.Builder setKeyType(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.KEY_ALGORITHM_RSA, android.security.keystore.KeyProperties.KEY_ALGORITHM_EC, android.security.keystore.KeyProperties.KEY_ALGORITHM_AES, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA1, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA224, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA256, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA384, android.security.keystore.KeyProperties.KEY_ALGORITHM_HMAC_SHA512}"></val>
        </annotation>
    </item>
    <item name="android.security.identity.IdentityCredentialStore android.security.identity.IdentityCredential getCredentialByName(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.security.identity.IdentityCredentialStore.CIPHERSUITE_ECDHE_HKDF_ECDSA_WITH_AES_256_GCM_SHA256}"></val>
        </annotation>
    </item>
    <item name="android.security.identity.IdentityCredentialStore android.security.identity.PresentationSession createPresentationSession(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.security.identity.IdentityCredentialStore.CIPHERSUITE_ECDHE_HKDF_ECDSA_WITH_AES_256_GCM_SHA256}"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyGenParameterSpec.Builder Builder(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.security.keystore.KeyProperties.PURPOSE_ENCRYPT, android.security.keystore.KeyProperties.PURPOSE_DECRYPT, android.security.keystore.KeyProperties.PURPOSE_SIGN, android.security.keystore.KeyProperties.PURPOSE_VERIFY, android.security.keystore.KeyProperties.PURPOSE_WRAP_KEY, android.security.keystore.KeyProperties.PURPOSE_AGREE_KEY, android.security.keystore.KeyProperties.PURPOSE_ATTEST_KEY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyGenParameterSpec.Builder android.security.keystore.KeyGenParameterSpec.Builder setBlockModes(java.lang.String...) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.BLOCK_MODE_ECB, android.security.keystore.KeyProperties.BLOCK_MODE_CBC, android.security.keystore.KeyProperties.BLOCK_MODE_CTR, android.security.keystore.KeyProperties.BLOCK_MODE_GCM}"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyGenParameterSpec.Builder android.security.keystore.KeyGenParameterSpec.Builder setDigests(java.lang.String...) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.DIGEST_NONE, android.security.keystore.KeyProperties.DIGEST_MD5, android.security.keystore.KeyProperties.DIGEST_SHA1, android.security.keystore.KeyProperties.DIGEST_SHA224, android.security.keystore.KeyProperties.DIGEST_SHA256, android.security.keystore.KeyProperties.DIGEST_SHA384, android.security.keystore.KeyProperties.DIGEST_SHA512}"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyGenParameterSpec.Builder android.security.keystore.KeyGenParameterSpec.Builder setEncryptionPaddings(java.lang.String...) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.ENCRYPTION_PADDING_NONE, android.security.keystore.KeyProperties.ENCRYPTION_PADDING_PKCS7, android.security.keystore.KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1, android.security.keystore.KeyProperties.ENCRYPTION_PADDING_RSA_OAEP}"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyGenParameterSpec.Builder android.security.keystore.KeyGenParameterSpec.Builder setMgf1Digests(java.lang.String...) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.DIGEST_NONE, android.security.keystore.KeyProperties.DIGEST_MD5, android.security.keystore.KeyProperties.DIGEST_SHA1, android.security.keystore.KeyProperties.DIGEST_SHA224, android.security.keystore.KeyProperties.DIGEST_SHA256, android.security.keystore.KeyProperties.DIGEST_SHA384, android.security.keystore.KeyProperties.DIGEST_SHA512}"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyGenParameterSpec.Builder android.security.keystore.KeyGenParameterSpec.Builder setSignaturePaddings(java.lang.String...) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.SIGNATURE_PADDING_RSA_PKCS1, android.security.keystore.KeyProperties.SIGNATURE_PADDING_RSA_PSS}"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyGenParameterSpec.Builder android.security.keystore.KeyGenParameterSpec.Builder setUserAuthenticationParameters(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.security.keystore.KeyProperties.AUTH_BIOMETRIC_STRONG, android.security.keystore.KeyProperties.AUTH_DEVICE_CREDENTIAL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyProtection.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.security.keystore.KeyProperties.PURPOSE_ENCRYPT, android.security.keystore.KeyProperties.PURPOSE_DECRYPT, android.security.keystore.KeyProperties.PURPOSE_SIGN, android.security.keystore.KeyProperties.PURPOSE_VERIFY, android.security.keystore.KeyProperties.PURPOSE_WRAP_KEY, android.security.keystore.KeyProperties.PURPOSE_AGREE_KEY, android.security.keystore.KeyProperties.PURPOSE_ATTEST_KEY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyProtection.Builder android.security.keystore.KeyProtection.Builder setBlockModes(java.lang.String...) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.BLOCK_MODE_ECB, android.security.keystore.KeyProperties.BLOCK_MODE_CBC, android.security.keystore.KeyProperties.BLOCK_MODE_CTR, android.security.keystore.KeyProperties.BLOCK_MODE_GCM}"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyProtection.Builder android.security.keystore.KeyProtection.Builder setDigests(java.lang.String...) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.DIGEST_NONE, android.security.keystore.KeyProperties.DIGEST_MD5, android.security.keystore.KeyProperties.DIGEST_SHA1, android.security.keystore.KeyProperties.DIGEST_SHA224, android.security.keystore.KeyProperties.DIGEST_SHA256, android.security.keystore.KeyProperties.DIGEST_SHA384, android.security.keystore.KeyProperties.DIGEST_SHA512}"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyProtection.Builder android.security.keystore.KeyProtection.Builder setEncryptionPaddings(java.lang.String...) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.ENCRYPTION_PADDING_NONE, android.security.keystore.KeyProperties.ENCRYPTION_PADDING_PKCS7, android.security.keystore.KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1, android.security.keystore.KeyProperties.ENCRYPTION_PADDING_RSA_OAEP}"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyProtection.Builder android.security.keystore.KeyProtection.Builder setMgf1Digests(java.lang.String...) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.DIGEST_NONE, android.security.keystore.KeyProperties.DIGEST_MD5, android.security.keystore.KeyProperties.DIGEST_SHA1, android.security.keystore.KeyProperties.DIGEST_SHA224, android.security.keystore.KeyProperties.DIGEST_SHA256, android.security.keystore.KeyProperties.DIGEST_SHA384, android.security.keystore.KeyProperties.DIGEST_SHA512}"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyProtection.Builder android.security.keystore.KeyProtection.Builder setSignaturePaddings(java.lang.String...) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.security.keystore.KeyProperties.SIGNATURE_PADDING_RSA_PKCS1, android.security.keystore.KeyProperties.SIGNATURE_PADDING_RSA_PSS}"></val>
        </annotation>
    </item>
    <item name="android.security.keystore.KeyProtection.Builder android.security.keystore.KeyProtection.Builder setUserAuthenticationParameters(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.security.keystore.KeyProperties.AUTH_BIOMETRIC_STRONG, android.security.keystore.KeyProperties.AUTH_DEVICE_CREDENTIAL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.service.autofill.FillResponse.Builder android.service.autofill.FillResponse.Builder setFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.autofill.FillResponse.FLAG_TRACK_CONTEXT_COMMITED, android.service.autofill.FillResponse.FLAG_DISABLE_ACTIVITY_ONLY, android.service.autofill.FillResponse.FLAG_DELAY_FILL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.service.autofill.SaveInfo.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.autofill.SaveInfo.SAVE_DATA_TYPE_GENERIC, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_PASSWORD, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_ADDRESS, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_CREDIT_CARD, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_USERNAME, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_EMAIL_ADDRESS, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_DEBIT_CARD, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_PAYMENT_CARD, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_GENERIC_CARD}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.service.autofill.SaveInfo.Builder Builder(int, android.view.autofill.AutofillId[]) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.autofill.SaveInfo.SAVE_DATA_TYPE_GENERIC, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_PASSWORD, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_ADDRESS, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_CREDIT_CARD, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_USERNAME, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_EMAIL_ADDRESS, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_DEBIT_CARD, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_PAYMENT_CARD, android.service.autofill.SaveInfo.SAVE_DATA_TYPE_GENERIC_CARD}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.service.autofill.SaveInfo.Builder android.service.autofill.SaveInfo.Builder setFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.autofill.SaveInfo.FLAG_SAVE_ON_ALL_VIEWS_INVISIBLE, android.service.autofill.SaveInfo.FLAG_DONT_SAVE_ON_FINISH, android.service.autofill.SaveInfo.FLAG_DELAY_SAVE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.service.autofill.SaveInfo.Builder android.service.autofill.SaveInfo.Builder setNegativeAction(int, android.content.IntentSender) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.autofill.SaveInfo.NEGATIVE_BUTTON_STYLE_CANCEL, android.service.autofill.SaveInfo.NEGATIVE_BUTTON_STYLE_REJECT, android.service.autofill.SaveInfo.NEGATIVE_BUTTON_STYLE_NEVER}"></val>
        </annotation>
    </item>
    <item name="android.service.autofill.SaveInfo.Builder android.service.autofill.SaveInfo.Builder setPositiveAction(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.autofill.SaveInfo.POSITIVE_BUTTON_STYLE_SAVE, android.service.autofill.SaveInfo.POSITIVE_BUTTON_STYLE_CONTINUE}"></val>
        </annotation>
    </item>
    <item name="android.service.autofill.SavedDatasetsInfo SavedDatasetsInfo(java.lang.String, int) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.service.autofill.SavedDatasetsInfo.TYPE_OTHER, android.service.autofill.SavedDatasetsInfo.TYPE_PASSWORDS}"></val>
        </annotation>
    </item>
    <item name="android.service.autofill.SavedDatasetsInfoCallback void onError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.autofill.SavedDatasetsInfoCallback.ERROR_OTHER, android.service.autofill.SavedDatasetsInfoCallback.ERROR_UNSUPPORTED, android.service.autofill.SavedDatasetsInfoCallback.ERROR_NEEDS_USER_ACTION}"></val>
        </annotation>
    </item>
    <item name="android.service.autofill.VisibilitySetterAction.Builder Builder(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}"></val>
        </annotation>
    </item>
    <item name="android.service.autofill.VisibilitySetterAction.Builder android.service.autofill.VisibilitySetterAction.Builder setVisibility(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}"></val>
        </annotation>
    </item>
    <item name="android.service.controls.Control.StatefulBuilder android.service.controls.Control.StatefulBuilder setDeviceType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.controls.DeviceTypes.TYPE_GENERIC_ON_OFF, android.service.controls.DeviceTypes.TYPE_GENERIC_START_STOP, android.service.controls.DeviceTypes.TYPE_GENERIC_OPEN_CLOSE, android.service.controls.DeviceTypes.TYPE_GENERIC_LOCK_UNLOCK, android.service.controls.DeviceTypes.TYPE_GENERIC_ARM_DISARM, android.service.controls.DeviceTypes.TYPE_GENERIC_TEMP_SETTING, android.service.controls.DeviceTypes.TYPE_GENERIC_VIEWSTREAM, android.service.controls.DeviceTypes.TYPE_UNKNOWN, android.service.controls.DeviceTypes.TYPE_AC_HEATER, android.service.controls.DeviceTypes.TYPE_AC_UNIT, android.service.controls.DeviceTypes.TYPE_AIR_FRESHENER, android.service.controls.DeviceTypes.TYPE_AIR_PURIFIER, android.service.controls.DeviceTypes.TYPE_COFFEE_MAKER, android.service.controls.DeviceTypes.TYPE_DEHUMIDIFIER, android.service.controls.DeviceTypes.TYPE_DISPLAY, android.service.controls.DeviceTypes.TYPE_FAN, android.service.controls.DeviceTypes.TYPE_HOOD, android.service.controls.DeviceTypes.TYPE_HUMIDIFIER, android.service.controls.DeviceTypes.TYPE_KETTLE, android.service.controls.DeviceTypes.TYPE_LIGHT, android.service.controls.DeviceTypes.TYPE_MICROWAVE, android.service.controls.DeviceTypes.TYPE_OUTLET, android.service.controls.DeviceTypes.TYPE_RADIATOR, android.service.controls.DeviceTypes.TYPE_REMOTE_CONTROL, android.service.controls.DeviceTypes.TYPE_SET_TOP, android.service.controls.DeviceTypes.TYPE_STANDMIXER, android.service.controls.DeviceTypes.TYPE_STYLER, android.service.controls.DeviceTypes.TYPE_SWITCH, android.service.controls.DeviceTypes.TYPE_TV, android.service.controls.DeviceTypes.TYPE_WATER_HEATER, android.service.controls.DeviceTypes.TYPE_DISHWASHER, android.service.controls.DeviceTypes.TYPE_DRYER, android.service.controls.DeviceTypes.TYPE_MOP, android.service.controls.DeviceTypes.TYPE_MOWER, android.service.controls.DeviceTypes.TYPE_MULTICOOKER, android.service.controls.DeviceTypes.TYPE_SHOWER, android.service.controls.DeviceTypes.TYPE_SPRINKLER, android.service.controls.DeviceTypes.TYPE_WASHER, android.service.controls.DeviceTypes.TYPE_VACUUM, android.service.controls.DeviceTypes.TYPE_AWNING, android.service.controls.DeviceTypes.TYPE_BLINDS, android.service.controls.DeviceTypes.TYPE_CLOSET, android.service.controls.DeviceTypes.TYPE_CURTAIN, android.service.controls.DeviceTypes.TYPE_DOOR, android.service.controls.DeviceTypes.TYPE_DRAWER, android.service.controls.DeviceTypes.TYPE_GARAGE, android.service.controls.DeviceTypes.TYPE_GATE, android.service.controls.DeviceTypes.TYPE_PERGOLA, android.service.controls.DeviceTypes.TYPE_SHUTTER, android.service.controls.DeviceTypes.TYPE_WINDOW, android.service.controls.DeviceTypes.TYPE_VALVE, android.service.controls.DeviceTypes.TYPE_LOCK, android.service.controls.DeviceTypes.TYPE_SECURITY_SYSTEM, android.service.controls.DeviceTypes.TYPE_HEATER, android.service.controls.DeviceTypes.TYPE_REFRIGERATOR, android.service.controls.DeviceTypes.TYPE_THERMOSTAT, android.service.controls.DeviceTypes.TYPE_CAMERA, android.service.controls.DeviceTypes.TYPE_DOORBELL, android.service.controls.DeviceTypes.TYPE_ROUTINE}"></val>
        </annotation>
    </item>
    <item name="android.service.controls.Control.StatefulBuilder android.service.controls.Control.StatefulBuilder setStatus(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.controls.Control.STATUS_UNKNOWN, android.service.controls.Control.STATUS_OK, android.service.controls.Control.STATUS_NOT_FOUND, android.service.controls.Control.STATUS_ERROR, android.service.controls.Control.STATUS_DISABLED}"></val>
        </annotation>
    </item>
    <item name="android.service.controls.Control.StatelessBuilder android.service.controls.Control.StatelessBuilder setDeviceType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.controls.DeviceTypes.TYPE_GENERIC_ON_OFF, android.service.controls.DeviceTypes.TYPE_GENERIC_START_STOP, android.service.controls.DeviceTypes.TYPE_GENERIC_OPEN_CLOSE, android.service.controls.DeviceTypes.TYPE_GENERIC_LOCK_UNLOCK, android.service.controls.DeviceTypes.TYPE_GENERIC_ARM_DISARM, android.service.controls.DeviceTypes.TYPE_GENERIC_TEMP_SETTING, android.service.controls.DeviceTypes.TYPE_GENERIC_VIEWSTREAM, android.service.controls.DeviceTypes.TYPE_UNKNOWN, android.service.controls.DeviceTypes.TYPE_AC_HEATER, android.service.controls.DeviceTypes.TYPE_AC_UNIT, android.service.controls.DeviceTypes.TYPE_AIR_FRESHENER, android.service.controls.DeviceTypes.TYPE_AIR_PURIFIER, android.service.controls.DeviceTypes.TYPE_COFFEE_MAKER, android.service.controls.DeviceTypes.TYPE_DEHUMIDIFIER, android.service.controls.DeviceTypes.TYPE_DISPLAY, android.service.controls.DeviceTypes.TYPE_FAN, android.service.controls.DeviceTypes.TYPE_HOOD, android.service.controls.DeviceTypes.TYPE_HUMIDIFIER, android.service.controls.DeviceTypes.TYPE_KETTLE, android.service.controls.DeviceTypes.TYPE_LIGHT, android.service.controls.DeviceTypes.TYPE_MICROWAVE, android.service.controls.DeviceTypes.TYPE_OUTLET, android.service.controls.DeviceTypes.TYPE_RADIATOR, android.service.controls.DeviceTypes.TYPE_REMOTE_CONTROL, android.service.controls.DeviceTypes.TYPE_SET_TOP, android.service.controls.DeviceTypes.TYPE_STANDMIXER, android.service.controls.DeviceTypes.TYPE_STYLER, android.service.controls.DeviceTypes.TYPE_SWITCH, android.service.controls.DeviceTypes.TYPE_TV, android.service.controls.DeviceTypes.TYPE_WATER_HEATER, android.service.controls.DeviceTypes.TYPE_DISHWASHER, android.service.controls.DeviceTypes.TYPE_DRYER, android.service.controls.DeviceTypes.TYPE_MOP, android.service.controls.DeviceTypes.TYPE_MOWER, android.service.controls.DeviceTypes.TYPE_MULTICOOKER, android.service.controls.DeviceTypes.TYPE_SHOWER, android.service.controls.DeviceTypes.TYPE_SPRINKLER, android.service.controls.DeviceTypes.TYPE_WASHER, android.service.controls.DeviceTypes.TYPE_VACUUM, android.service.controls.DeviceTypes.TYPE_AWNING, android.service.controls.DeviceTypes.TYPE_BLINDS, android.service.controls.DeviceTypes.TYPE_CLOSET, android.service.controls.DeviceTypes.TYPE_CURTAIN, android.service.controls.DeviceTypes.TYPE_DOOR, android.service.controls.DeviceTypes.TYPE_DRAWER, android.service.controls.DeviceTypes.TYPE_GARAGE, android.service.controls.DeviceTypes.TYPE_GATE, android.service.controls.DeviceTypes.TYPE_PERGOLA, android.service.controls.DeviceTypes.TYPE_SHUTTER, android.service.controls.DeviceTypes.TYPE_WINDOW, android.service.controls.DeviceTypes.TYPE_VALVE, android.service.controls.DeviceTypes.TYPE_LOCK, android.service.controls.DeviceTypes.TYPE_SECURITY_SYSTEM, android.service.controls.DeviceTypes.TYPE_HEATER, android.service.controls.DeviceTypes.TYPE_REFRIGERATOR, android.service.controls.DeviceTypes.TYPE_THERMOSTAT, android.service.controls.DeviceTypes.TYPE_CAMERA, android.service.controls.DeviceTypes.TYPE_DOORBELL, android.service.controls.DeviceTypes.TYPE_ROUTINE}"></val>
        </annotation>
    </item>
    <item name="android.service.controls.actions.ControlAction boolean isValidResponse(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.controls.actions.ControlAction.RESPONSE_UNKNOWN, android.service.controls.actions.ControlAction.RESPONSE_OK, android.service.controls.actions.ControlAction.RESPONSE_FAIL, android.service.controls.actions.ControlAction.RESPONSE_CHALLENGE_ACK, android.service.controls.actions.ControlAction.RESPONSE_CHALLENGE_PIN, android.service.controls.actions.ControlAction.RESPONSE_CHALLENGE_PASSPHRASE}"></val>
        </annotation>
    </item>
    <item name="android.service.controls.templates.TemperatureControlTemplate TemperatureControlTemplate(java.lang.String, android.service.controls.templates.ControlTemplate, int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.controls.templates.TemperatureControlTemplate.MODE_UNKNOWN, android.service.controls.templates.TemperatureControlTemplate.MODE_OFF, android.service.controls.templates.TemperatureControlTemplate.MODE_HEAT, android.service.controls.templates.TemperatureControlTemplate.MODE_COOL, android.service.controls.templates.TemperatureControlTemplate.MODE_HEAT_COOL, android.service.controls.templates.TemperatureControlTemplate.MODE_ECO}"></val>
        </annotation>
    </item>
    <item name="android.service.controls.templates.TemperatureControlTemplate TemperatureControlTemplate(java.lang.String, android.service.controls.templates.ControlTemplate, int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.controls.templates.TemperatureControlTemplate.MODE_UNKNOWN, android.service.controls.templates.TemperatureControlTemplate.MODE_OFF, android.service.controls.templates.TemperatureControlTemplate.MODE_HEAT, android.service.controls.templates.TemperatureControlTemplate.MODE_COOL, android.service.controls.templates.TemperatureControlTemplate.MODE_HEAT_COOL, android.service.controls.templates.TemperatureControlTemplate.MODE_ECO}"></val>
        </annotation>
    </item>
    <item name="android.service.controls.templates.TemperatureControlTemplate TemperatureControlTemplate(java.lang.String, android.service.controls.templates.ControlTemplate, int, int, int) 4">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.controls.templates.TemperatureControlTemplate.FLAG_MODE_OFF, android.service.controls.templates.TemperatureControlTemplate.FLAG_MODE_HEAT, android.service.controls.templates.TemperatureControlTemplate.FLAG_MODE_COOL, android.service.controls.templates.TemperatureControlTemplate.FLAG_MODE_HEAT_COOL, android.service.controls.templates.TemperatureControlTemplate.FLAG_MODE_ECO}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.service.notification.Condition Condition(android.net.Uri, java.lang.String, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.notification.Condition.STATE_FALSE, android.service.notification.Condition.STATE_TRUE, android.service.notification.Condition.STATE_UNKNOWN, android.service.notification.Condition.STATE_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.service.notification.Condition Condition(android.net.Uri, java.lang.String, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.notification.Condition.SOURCE_UNKNOWN, android.service.notification.Condition.SOURCE_USER_ACTION, android.service.notification.Condition.SOURCE_SCHEDULE, android.service.notification.Condition.SOURCE_CONTEXT}"></val>
        </annotation>
    </item>
    <item name="android.service.notification.Condition Condition(android.net.Uri, java.lang.String, java.lang.String, java.lang.String, int, int, int, int) 5">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.notification.Condition.STATE_FALSE, android.service.notification.Condition.STATE_TRUE, android.service.notification.Condition.STATE_UNKNOWN, android.service.notification.Condition.STATE_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.service.notification.Condition Condition(android.net.Uri, java.lang.String, java.lang.String, java.lang.String, int, int, int, int) 6">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.notification.Condition.SOURCE_UNKNOWN, android.service.notification.Condition.SOURCE_USER_ACTION, android.service.notification.Condition.SOURCE_SCHEDULE, android.service.notification.Condition.SOURCE_CONTEXT}"></val>
        </annotation>
    </item>
    <item name="android.service.notification.NotificationListenerService void migrateNotificationFilter(int, java.util.List&lt;java.lang.String&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.notification.NotificationListenerService.FLAG_FILTER_TYPE_CONVERSATIONS, android.service.notification.NotificationListenerService.FLAG_FILTER_TYPE_ALERTING, android.service.notification.NotificationListenerService.FLAG_FILTER_TYPE_SILENT, android.service.notification.NotificationListenerService.FLAG_FILTER_TYPE_ONGOING}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.service.notification.NotificationListenerService void onNotificationChannelGroupModified(java.lang.String, android.os.UserHandle, android.app.NotificationChannelGroup, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.notification.NotificationListenerService.NOTIFICATION_CHANNEL_OR_GROUP_ADDED, android.service.notification.NotificationListenerService.NOTIFICATION_CHANNEL_OR_GROUP_UPDATED, android.service.notification.NotificationListenerService.NOTIFICATION_CHANNEL_OR_GROUP_DELETED}"></val>
        </annotation>
    </item>
    <item name="android.service.notification.NotificationListenerService void onNotificationChannelModified(java.lang.String, android.os.UserHandle, android.app.NotificationChannel, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.notification.NotificationListenerService.NOTIFICATION_CHANNEL_OR_GROUP_ADDED, android.service.notification.NotificationListenerService.NOTIFICATION_CHANNEL_OR_GROUP_UPDATED, android.service.notification.NotificationListenerService.NOTIFICATION_CHANNEL_OR_GROUP_DELETED}"></val>
        </annotation>
    </item>
    <item name="android.service.notification.NotificationListenerService void onNotificationRemoved(android.service.notification.StatusBarNotification, android.service.notification.NotificationListenerService.RankingMap, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.notification.NotificationListenerService.REASON_CLICK, android.service.notification.NotificationListenerService.REASON_CANCEL, android.service.notification.NotificationListenerService.REASON_CANCEL_ALL, android.service.notification.NotificationListenerService.REASON_ERROR, android.service.notification.NotificationListenerService.REASON_PACKAGE_CHANGED, android.service.notification.NotificationListenerService.REASON_USER_STOPPED, android.service.notification.NotificationListenerService.REASON_PACKAGE_BANNED, android.service.notification.NotificationListenerService.REASON_APP_CANCEL, android.service.notification.NotificationListenerService.REASON_APP_CANCEL_ALL, android.service.notification.NotificationListenerService.REASON_LISTENER_CANCEL, android.service.notification.NotificationListenerService.REASON_LISTENER_CANCEL_ALL, android.service.notification.NotificationListenerService.REASON_GROUP_SUMMARY_CANCELED, android.service.notification.NotificationListenerService.REASON_GROUP_OPTIMIZATION, android.service.notification.NotificationListenerService.REASON_PACKAGE_SUSPENDED, android.service.notification.NotificationListenerService.REASON_PROFILE_TURNED_OFF, android.service.notification.NotificationListenerService.REASON_UNAUTOBUNDLED, android.service.notification.NotificationListenerService.REASON_CHANNEL_BANNED, android.service.notification.NotificationListenerService.REASON_SNOOZED, android.service.notification.NotificationListenerService.REASON_TIMEOUT, android.service.notification.NotificationListenerService.REASON_CHANNEL_REMOVED, android.service.notification.NotificationListenerService.REASON_CLEAR_DATA, android.service.notification.NotificationListenerService.REASON_ASSISTANT_CANCEL, android.service.notification.NotificationListenerService.REASON_LOCKDOWN}"></val>
        </annotation>
    </item>
    <item name="android.service.notification.ZenPolicy.Builder android.service.notification.ZenPolicy.Builder allowCalls(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.notification.ZenPolicy.PEOPLE_TYPE_UNSET, android.service.notification.ZenPolicy.PEOPLE_TYPE_ANYONE, android.service.notification.ZenPolicy.PEOPLE_TYPE_CONTACTS, android.service.notification.ZenPolicy.PEOPLE_TYPE_STARRED, android.service.notification.ZenPolicy.PEOPLE_TYPE_NONE}"></val>
        </annotation>
    </item>
    <item name="android.service.notification.ZenPolicy.Builder android.service.notification.ZenPolicy.Builder allowConversations(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.notification.ZenPolicy.CONVERSATION_SENDERS_UNSET, android.service.notification.ZenPolicy.CONVERSATION_SENDERS_ANYONE, android.service.notification.ZenPolicy.CONVERSATION_SENDERS_IMPORTANT, android.service.notification.ZenPolicy.CONVERSATION_SENDERS_NONE}"></val>
        </annotation>
    </item>
    <item name="android.service.notification.ZenPolicy.Builder android.service.notification.ZenPolicy.Builder allowMessages(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.notification.ZenPolicy.PEOPLE_TYPE_UNSET, android.service.notification.ZenPolicy.PEOPLE_TYPE_ANYONE, android.service.notification.ZenPolicy.PEOPLE_TYPE_CONTACTS, android.service.notification.ZenPolicy.PEOPLE_TYPE_STARRED, android.service.notification.ZenPolicy.PEOPLE_TYPE_NONE}"></val>
        </annotation>
    </item>
    <item name="android.service.quickaccesswallet.WalletCard.Builder Builder(java.lang.String, int, android.graphics.drawable.Icon, java.lang.CharSequence, android.app.PendingIntent) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.quickaccesswallet.WalletCard.CARD_TYPE_UNKNOWN, android.service.quickaccesswallet.WalletCard.CARD_TYPE_PAYMENT, android.service.quickaccesswallet.WalletCard.CARD_TYPE_NON_PAYMENT}"></val>
        </annotation>
    </item>
    <item name="android.service.quickaccesswallet.WalletServiceEvent WalletServiceEvent(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.service.quickaccesswallet.WalletServiceEvent.TYPE_NFC_PAYMENT_STARTED}"></val>
        </annotation>
    </item>
    <item name="android.service.wallpaper.WallpaperService.Engine void onWallpaperFlagsChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.app.WallpaperManager.FLAG_SYSTEM, android.app.WallpaperManager.FLAG_LOCK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.speech.ModelDownloadListener void onError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.speech.SpeechRecognizer.ERROR_NETWORK_TIMEOUT, android.speech.SpeechRecognizer.ERROR_NETWORK, android.speech.SpeechRecognizer.ERROR_AUDIO, android.speech.SpeechRecognizer.ERROR_SERVER, android.speech.SpeechRecognizer.ERROR_CLIENT, android.speech.SpeechRecognizer.ERROR_SPEECH_TIMEOUT, android.speech.SpeechRecognizer.ERROR_NO_MATCH, android.speech.SpeechRecognizer.ERROR_RECOGNIZER_BUSY, android.speech.SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS, android.speech.SpeechRecognizer.ERROR_TOO_MANY_REQUESTS, android.speech.SpeechRecognizer.ERROR_SERVER_DISCONNECTED, android.speech.SpeechRecognizer.ERROR_LANGUAGE_NOT_SUPPORTED, android.speech.SpeechRecognizer.ERROR_LANGUAGE_UNAVAILABLE, android.speech.SpeechRecognizer.ERROR_CANNOT_CHECK_SUPPORT, android.speech.SpeechRecognizer.ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTS}"></val>
        </annotation>
    </item>
    <item name="android.speech.RecognitionListener void onError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.speech.SpeechRecognizer.ERROR_NETWORK_TIMEOUT, android.speech.SpeechRecognizer.ERROR_NETWORK, android.speech.SpeechRecognizer.ERROR_AUDIO, android.speech.SpeechRecognizer.ERROR_SERVER, android.speech.SpeechRecognizer.ERROR_CLIENT, android.speech.SpeechRecognizer.ERROR_SPEECH_TIMEOUT, android.speech.SpeechRecognizer.ERROR_NO_MATCH, android.speech.SpeechRecognizer.ERROR_RECOGNIZER_BUSY, android.speech.SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS, android.speech.SpeechRecognizer.ERROR_TOO_MANY_REQUESTS, android.speech.SpeechRecognizer.ERROR_SERVER_DISCONNECTED, android.speech.SpeechRecognizer.ERROR_LANGUAGE_NOT_SUPPORTED, android.speech.SpeechRecognizer.ERROR_LANGUAGE_UNAVAILABLE, android.speech.SpeechRecognizer.ERROR_CANNOT_CHECK_SUPPORT, android.speech.SpeechRecognizer.ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTS}"></val>
        </annotation>
    </item>
    <item name="android.speech.RecognitionPart.Builder android.speech.RecognitionPart.Builder setConfidenceLevel(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.speech.RecognitionPart.CONFIDENCE_LEVEL_UNKNOWN, android.speech.RecognitionPart.CONFIDENCE_LEVEL_LOW, android.speech.RecognitionPart.CONFIDENCE_LEVEL_MEDIUM_LOW, android.speech.RecognitionPart.CONFIDENCE_LEVEL_MEDIUM, android.speech.RecognitionPart.CONFIDENCE_LEVEL_MEDIUM_HIGH, android.speech.RecognitionPart.CONFIDENCE_LEVEL_HIGH}"></val>
        </annotation>
    </item>
    <item name="android.speech.RecognitionService.Callback void error(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.speech.SpeechRecognizer.ERROR_NETWORK_TIMEOUT, android.speech.SpeechRecognizer.ERROR_NETWORK, android.speech.SpeechRecognizer.ERROR_AUDIO, android.speech.SpeechRecognizer.ERROR_SERVER, android.speech.SpeechRecognizer.ERROR_CLIENT, android.speech.SpeechRecognizer.ERROR_SPEECH_TIMEOUT, android.speech.SpeechRecognizer.ERROR_NO_MATCH, android.speech.SpeechRecognizer.ERROR_RECOGNIZER_BUSY, android.speech.SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS, android.speech.SpeechRecognizer.ERROR_TOO_MANY_REQUESTS, android.speech.SpeechRecognizer.ERROR_SERVER_DISCONNECTED, android.speech.SpeechRecognizer.ERROR_LANGUAGE_NOT_SUPPORTED, android.speech.SpeechRecognizer.ERROR_LANGUAGE_UNAVAILABLE, android.speech.SpeechRecognizer.ERROR_CANNOT_CHECK_SUPPORT, android.speech.SpeechRecognizer.ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTS}"></val>
        </annotation>
    </item>
    <item name="android.speech.RecognitionService.SupportCallback void onError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.speech.SpeechRecognizer.ERROR_NETWORK_TIMEOUT, android.speech.SpeechRecognizer.ERROR_NETWORK, android.speech.SpeechRecognizer.ERROR_AUDIO, android.speech.SpeechRecognizer.ERROR_SERVER, android.speech.SpeechRecognizer.ERROR_CLIENT, android.speech.SpeechRecognizer.ERROR_SPEECH_TIMEOUT, android.speech.SpeechRecognizer.ERROR_NO_MATCH, android.speech.SpeechRecognizer.ERROR_RECOGNIZER_BUSY, android.speech.SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS, android.speech.SpeechRecognizer.ERROR_TOO_MANY_REQUESTS, android.speech.SpeechRecognizer.ERROR_SERVER_DISCONNECTED, android.speech.SpeechRecognizer.ERROR_LANGUAGE_NOT_SUPPORTED, android.speech.SpeechRecognizer.ERROR_LANGUAGE_UNAVAILABLE, android.speech.SpeechRecognizer.ERROR_CANNOT_CHECK_SUPPORT, android.speech.SpeechRecognizer.ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTS}"></val>
        </annotation>
    </item>
    <item name="android.speech.RecognitionSupportCallback void onError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.speech.SpeechRecognizer.ERROR_NETWORK_TIMEOUT, android.speech.SpeechRecognizer.ERROR_NETWORK, android.speech.SpeechRecognizer.ERROR_AUDIO, android.speech.SpeechRecognizer.ERROR_SERVER, android.speech.SpeechRecognizer.ERROR_CLIENT, android.speech.SpeechRecognizer.ERROR_SPEECH_TIMEOUT, android.speech.SpeechRecognizer.ERROR_NO_MATCH, android.speech.SpeechRecognizer.ERROR_RECOGNIZER_BUSY, android.speech.SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS, android.speech.SpeechRecognizer.ERROR_TOO_MANY_REQUESTS, android.speech.SpeechRecognizer.ERROR_SERVER_DISCONNECTED, android.speech.SpeechRecognizer.ERROR_LANGUAGE_NOT_SUPPORTED, android.speech.SpeechRecognizer.ERROR_LANGUAGE_UNAVAILABLE, android.speech.SpeechRecognizer.ERROR_CANNOT_CHECK_SUPPORT, android.speech.SpeechRecognizer.ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTS}"></val>
        </annotation>
    </item>
    <item name="android.speech.tts.SynthesisCallback int start(int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.media.AudioFormat.ENCODING_PCM_8BIT, android.media.AudioFormat.ENCODING_PCM_16BIT, android.media.AudioFormat.ENCODING_PCM_FLOAT}"></val>
        </annotation>
    </item>
    <item name="android.speech.tts.SynthesisCallback void error(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.speech.tts.TextToSpeech.ERROR_SYNTHESIS, android.speech.tts.TextToSpeech.ERROR_SERVICE, android.speech.tts.TextToSpeech.ERROR_OUTPUT, android.speech.tts.TextToSpeech.ERROR_NETWORK, android.speech.tts.TextToSpeech.ERROR_NETWORK_TIMEOUT, android.speech.tts.TextToSpeech.ERROR_INVALID_REQUEST, android.speech.tts.TextToSpeech.ERROR_NOT_INSTALLED_YET}"></val>
        </annotation>
    </item>
    <item name="android.telecom.Call void answer(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.Call void handoverTo(android.telecom.PhoneAccountHandle, int, android.os.Bundle) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.Call void reject(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.Call.REJECT_REASON_DECLINED, android.telecom.Call.REJECT_REASON_UNWANTED}"></val>
        </annotation>
    </item>
    <item name="android.telecom.Call.Callback void onHandoverFailed(android.telecom.Call, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.Call.Callback.HANDOVER_FAILURE_DEST_APP_REJECTED, android.telecom.Call.Callback.HANDOVER_FAILURE_NOT_SUPPORTED, android.telecom.Call.Callback.HANDOVER_FAILURE_USER_REJECTED, android.telecom.Call.Callback.HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL, android.telecom.Call.Callback.HANDOVER_FAILURE_UNKNOWN}"></val>
        </annotation>
    </item>
    <item name="android.telecom.Call.Callback void onRttInitiationFailure(android.telecom.Call, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.Connection.RttModifyStatus.SESSION_MODIFY_REQUEST_SUCCESS, android.telecom.Connection.RttModifyStatus.SESSION_MODIFY_REQUEST_FAIL, android.telecom.Connection.RttModifyStatus.SESSION_MODIFY_REQUEST_INVALID, android.telecom.Connection.RttModifyStatus.SESSION_MODIFY_REQUEST_TIMED_OUT, android.telecom.Connection.RttModifyStatus.SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE}"></val>
        </annotation>
    </item>
    <item name="android.telecom.Call.Callback void onStateChanged(android.telecom.Call, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.Call.STATE_NEW, android.telecom.Call.STATE_DIALING, android.telecom.Call.STATE_RINGING, android.telecom.Call.STATE_HOLDING, android.telecom.Call.STATE_ACTIVE, android.telecom.Call.STATE_DISCONNECTED, android.telecom.Call.STATE_SELECT_PHONE_ACCOUNT, android.telecom.Call.STATE_CONNECTING, android.telecom.Call.STATE_DISCONNECTING, android.telecom.Call.STATE_PULLING_CALL, android.telecom.Call.STATE_AUDIO_PROCESSING, android.telecom.Call.STATE_SIMULATED_RINGING}"></val>
        </annotation>
    </item>
    <item name="android.telecom.Call.RttCall void setRttMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.Call.RttCall.RTT_MODE_FULL, android.telecom.Call.RttCall.RTT_MODE_HCO, android.telecom.Call.RttCall.RTT_MODE_VCO}"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallAttributes.Builder Builder(android.telecom.PhoneAccountHandle, int, java.lang.CharSequence, android.net.Uri) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallAttributes.DIRECTION_INCOMING, android.telecom.CallAttributes.DIRECTION_OUTGOING}"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallAttributes.Builder android.telecom.CallAttributes.Builder setCallCapabilities(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallAttributes.SUPPORTS_SET_INACTIVE, android.telecom.CallAttributes.SUPPORTS_STREAM, android.telecom.CallAttributes.SUPPORTS_TRANSFER, android.telecom.CallAttributes.SUPPORTS_VIDEO_CALLING}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallAttributes.Builder android.telecom.CallAttributes.Builder setCallType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallAttributes.AUDIO_CALL, android.telecom.CallAttributes.VIDEO_CALL}"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallAudioState CallAudioState(boolean, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallAudioState.ROUTE_EARPIECE, android.telecom.CallAudioState.ROUTE_BLUETOOTH, android.telecom.CallAudioState.ROUTE_WIRED_HEADSET, android.telecom.CallAudioState.ROUTE_SPEAKER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallAudioState CallAudioState(boolean, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallAudioState.ROUTE_EARPIECE, android.telecom.CallAudioState.ROUTE_BLUETOOTH, android.telecom.CallAudioState.ROUTE_WIRED_HEADSET, android.telecom.CallAudioState.ROUTE_SPEAKER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallControl void answer(int, java.util.concurrent.Executor, android.os.OutcomeReceiver&lt;java.lang.Void,android.telecom.CallException&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallAttributes.AUDIO_CALL, android.telecom.CallAttributes.VIDEO_CALL}"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallControl void requestVideoState(int, java.util.concurrent.Executor, android.os.OutcomeReceiver&lt;java.lang.Void,android.telecom.CallException&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallAttributes.AUDIO_CALL, android.telecom.CallAttributes.VIDEO_CALL}"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallControlCallback void onAnswer(int, java.util.function.Consumer&lt;java.lang.Boolean&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallAttributes.AUDIO_CALL, android.telecom.CallAttributes.VIDEO_CALL}"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallEndpoint CallEndpoint(java.lang.CharSequence, int, android.os.ParcelUuid) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallEndpoint.TYPE_UNKNOWN, android.telecom.CallEndpoint.TYPE_EARPIECE, android.telecom.CallEndpoint.TYPE_BLUETOOTH, android.telecom.CallEndpoint.TYPE_WIRED_HEADSET, android.telecom.CallEndpoint.TYPE_SPEAKER, android.telecom.CallEndpoint.TYPE_STREAMING}"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallEndpointException CallEndpointException(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallEndpointException.ERROR_ENDPOINT_DOES_NOT_EXIST, android.telecom.CallEndpointException.ERROR_REQUEST_TIME_OUT, android.telecom.CallEndpointException.ERROR_ANOTHER_REQUEST, android.telecom.CallEndpointException.ERROR_UNSPECIFIED}"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallEventCallback void onVideoStateChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallAttributes.AUDIO_CALL, android.telecom.CallAttributes.VIDEO_CALL}"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallException CallException(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallException.CODE_ERROR_UNKNOWN, android.telecom.CallException.CODE_CANNOT_HOLD_CURRENT_ACTIVE_CALL, android.telecom.CallException.CODE_CALL_IS_NOT_BEING_TRACKED, android.telecom.CallException.CODE_CALL_CANNOT_BE_SET_TO_ACTIVE, android.telecom.CallException.CODE_CALL_NOT_PERMITTED_AT_PRESENT_TIME, android.telecom.CallException.CODE_OPERATION_TIMED_OUT}"></val>
        </annotation>
    </item>
    <item name="android.telecom.CallScreeningService.CallResponse.Builder android.telecom.CallScreeningService.CallResponse.Builder setCallComposerAttachmentsToShow(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.CallScreeningService.CallResponse.CALL_COMPOSER_ATTACHMENT_PICTURE, android.telecom.CallScreeningService.CallResponse.CALL_COMPOSER_ATTACHMENT_LOCATION, android.telecom.CallScreeningService.CallResponse.CALL_COMPOSER_ATTACHMENT_SUBJECT, android.telecom.CallScreeningService.CallResponse.CALL_COMPOSER_ATTACHMENT_PRIORITY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.Conference void onAnswer(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.Connection void onReject(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.Call.REJECT_REASON_DECLINED, android.telecom.Call.REJECT_REASON_UNWANTED}"></val>
        </annotation>
    </item>
    <item name="android.telecom.Connection void setCallerNumberVerificationStatus(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.Connection.VERIFICATION_STATUS_NOT_VERIFIED, android.telecom.Connection.VERIFICATION_STATUS_PASSED, android.telecom.Connection.VERIFICATION_STATUS_FAILED}"></val>
        </annotation>
    </item>
    <item name="android.telecom.ConnectionService void onHandoverFailed(android.telecom.ConnectionRequest, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.Call.Callback.HANDOVER_FAILURE_DEST_APP_REJECTED, android.telecom.Call.Callback.HANDOVER_FAILURE_NOT_SUPPORTED, android.telecom.Call.Callback.HANDOVER_FAILURE_USER_REJECTED, android.telecom.Call.Callback.HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL, android.telecom.Call.Callback.HANDOVER_FAILURE_UNKNOWN}"></val>
        </annotation>
    </item>
    <item name="android.telecom.PhoneAccountSuggestion PhoneAccountSuggestion(android.telecom.PhoneAccountHandle, int, boolean) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.PhoneAccountSuggestion.REASON_NONE, android.telecom.PhoneAccountSuggestion.REASON_INTRA_CARRIER, android.telecom.PhoneAccountSuggestion.REASON_FREQUENT, android.telecom.PhoneAccountSuggestion.REASON_USER_SET, android.telecom.PhoneAccountSuggestion.REASON_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.telecom.QueryLocationException QueryLocationException(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.QueryLocationException.ERROR_REQUEST_TIME_OUT, android.telecom.QueryLocationException.ERROR_PREVIOUS_REQUEST_EXISTS, android.telecom.QueryLocationException.ERROR_NOT_PERMITTED, android.telecom.QueryLocationException.ERROR_NOT_ALLOWED_FOR_NON_EMERGENCY_CONNECTIONS, android.telecom.QueryLocationException.ERROR_SERVICE_UNAVAILABLE, android.telecom.QueryLocationException.ERROR_UNSPECIFIED}"></val>
        </annotation>
    </item>
    <item name="android.telecom.QueryLocationException QueryLocationException(java.lang.String, int, java.lang.Throwable) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.QueryLocationException.ERROR_REQUEST_TIME_OUT, android.telecom.QueryLocationException.ERROR_PREVIOUS_REQUEST_EXISTS, android.telecom.QueryLocationException.ERROR_NOT_PERMITTED, android.telecom.QueryLocationException.ERROR_NOT_ALLOWED_FOR_NON_EMERGENCY_CONNECTIONS, android.telecom.QueryLocationException.ERROR_SERVICE_UNAVAILABLE, android.telecom.QueryLocationException.ERROR_UNSPECIFIED}"></val>
        </annotation>
    </item>
    <item name="android.telecom.TelecomManager void acceptHandover(android.net.Uri, int, android.telecom.PhoneAccountHandle) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.VideoProfile VideoProfile(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.VideoProfile VideoProfile(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.VideoProfile VideoProfile(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.QUALITY_HIGH, android.telecom.VideoProfile.QUALITY_MEDIUM, android.telecom.VideoProfile.QUALITY_LOW, android.telecom.VideoProfile.QUALITY_DEFAULT}"></val>
        </annotation>
    </item>
    <item name="android.telecom.VideoProfile boolean isAudioOnly(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.VideoProfile boolean isBidirectional(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.VideoProfile boolean isPaused(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.VideoProfile boolean isReceptionEnabled(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.VideoProfile boolean isTransmissionEnabled(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.VideoProfile boolean isVideo(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telecom.VideoProfile java.lang.String videoStateToString(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telecom.VideoProfile.STATE_AUDIO_ONLY, android.telecom.VideoProfile.STATE_TX_ENABLED, android.telecom.VideoProfile.STATE_RX_ENABLED, android.telecom.VideoProfile.STATE_BIDIRECTIONAL, android.telecom.VideoProfile.STATE_PAUSED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.AvailableNetworkInfo.Builder android.telephony.AvailableNetworkInfo.Builder setPriority(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.AvailableNetworkInfo.PRIORITY_HIGH, android.telephony.AvailableNetworkInfo.PRIORITY_MED, android.telephony.AvailableNetworkInfo.PRIORITY_LOW}"></val>
        </annotation>
    </item>
    <item name="android.telephony.BarringInfo android.telephony.BarringInfo.BarringServiceInfo getBarringServiceInfo(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.BarringInfo.BARRING_SERVICE_TYPE_CS_SERVICE, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_PS_SERVICE, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_CS_VOICE, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_MO_SIGNALLING, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_MO_DATA, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_CS_FALLBACK, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_MMTEL_VOICE, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_MMTEL_VIDEO, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_EMERGENCY, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_SMS}"></val>
        </annotation>
    </item>
    <item name="android.telephony.PhoneNumberUtils byte[] numberToCalledPartyBCD(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_EF_ADN, android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_CALLED_PARTY}"></val>
        </annotation>
    </item>
    <item name="android.telephony.PhoneNumberUtils java.lang.String calledPartyBCDFragmentToString(byte[], int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_EF_ADN, android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_CALLED_PARTY}"></val>
        </annotation>
    </item>
    <item name="android.telephony.PhoneNumberUtils java.lang.String calledPartyBCDToString(byte[], int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_EF_ADN, android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_CALLED_PARTY}"></val>
        </annotation>
    </item>
    <item name="android.telephony.PhoneStateListener void onCallDisconnectCauseChanged(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.DisconnectCause.NOT_VALID, android.telephony.DisconnectCause.NOT_DISCONNECTED, android.telephony.DisconnectCause.INCOMING_MISSED, android.telephony.DisconnectCause.NORMAL, android.telephony.DisconnectCause.LOCAL, android.telephony.DisconnectCause.BUSY, android.telephony.DisconnectCause.CONGESTION, android.telephony.DisconnectCause.MMI, android.telephony.DisconnectCause.INVALID_NUMBER, android.telephony.DisconnectCause.NUMBER_UNREACHABLE, android.telephony.DisconnectCause.SERVER_UNREACHABLE, android.telephony.DisconnectCause.INVALID_CREDENTIALS, android.telephony.DisconnectCause.OUT_OF_NETWORK, android.telephony.DisconnectCause.SERVER_ERROR, android.telephony.DisconnectCause.TIMED_OUT, android.telephony.DisconnectCause.LOST_SIGNAL, android.telephony.DisconnectCause.LIMIT_EXCEEDED, android.telephony.DisconnectCause.INCOMING_REJECTED, android.telephony.DisconnectCause.POWER_OFF, android.telephony.DisconnectCause.OUT_OF_SERVICE, android.telephony.DisconnectCause.ICC_ERROR, android.telephony.DisconnectCause.CALL_BARRED, android.telephony.DisconnectCause.FDN_BLOCKED, android.telephony.DisconnectCause.CS_RESTRICTED, android.telephony.DisconnectCause.CS_RESTRICTED_NORMAL, android.telephony.DisconnectCause.CS_RESTRICTED_EMERGENCY, android.telephony.DisconnectCause.UNOBTAINABLE_NUMBER, android.telephony.DisconnectCause.CDMA_LOCKED_UNTIL_POWER_CYCLE, android.telephony.DisconnectCause.CDMA_DROP, android.telephony.DisconnectCause.CDMA_INTERCEPT, android.telephony.DisconnectCause.CDMA_REORDER, android.telephony.DisconnectCause.CDMA_SO_REJECT, android.telephony.DisconnectCause.CDMA_RETRY_ORDER, android.telephony.DisconnectCause.CDMA_ACCESS_FAILURE, android.telephony.DisconnectCause.CDMA_PREEMPTED, android.telephony.DisconnectCause.CDMA_NOT_EMERGENCY, android.telephony.DisconnectCause.CDMA_ACCESS_BLOCKED, android.telephony.DisconnectCause.ERROR_UNSPECIFIED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.PhoneStateListener void onCallStateChanged(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.CALL_STATE_IDLE, android.telephony.TelephonyManager.CALL_STATE_RINGING, android.telephony.TelephonyManager.CALL_STATE_OFFHOOK}"></val>
        </annotation>
    </item>
    <item name="android.telephony.SignalThresholdInfo.Builder android.telephony.SignalThresholdInfo.Builder setRadioAccessNetworkType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.AccessNetworkConstants.AccessNetworkType.UNKNOWN, android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN, android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN, android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN, android.telephony.AccessNetworkConstants.AccessNetworkType.CDMA2000, android.telephony.AccessNetworkConstants.AccessNetworkType.IWLAN, android.telephony.AccessNetworkConstants.AccessNetworkType.NGRAN}"></val>
        </annotation>
    </item>
    <item name="android.telephony.SignalThresholdInfo.Builder android.telephony.SignalThresholdInfo.Builder setSignalMeasurementType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_UNKNOWN, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSSI, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSCP, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSRP, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSRQ, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSSNR, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_SSRSRP, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_SSRSRQ, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_SSSINR, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_ECNO}"></val>
        </annotation>
    </item>
    <item name="android.telephony.SmsManager void injectSmsPdu(byte[], java.lang.String, android.app.PendingIntent) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.telephony.SmsMessage.FORMAT_3GPP, android.telephony.SmsMessage.FORMAT_3GPP2}"></val>
        </annotation>
    </item>
    <item name="android.telephony.SubscriptionManager java.lang.String getPhoneNumber(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.SubscriptionManager.PHONE_NUMBER_SOURCE_UICC, android.telephony.SubscriptionManager.PHONE_NUMBER_SOURCE_CARRIER, android.telephony.SubscriptionManager.PHONE_NUMBER_SOURCE_IMS}"></val>
        </annotation>
    </item>
    <item name="android.telephony.SubscriptionManager void setDeviceToDeviceStatusSharingPreference(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.SubscriptionManager.D2D_SHARING_DISABLED, android.telephony.SubscriptionManager.D2D_SHARING_ALL_CONTACTS, android.telephony.SubscriptionManager.D2D_SHARING_SELECTED_CONTACTS, android.telephony.SubscriptionManager.D2D_SHARING_ALL}"></val>
        </annotation>
    </item>
    <item name="android.telephony.SubscriptionManager void setSubscriptionOverrideCongested(int, boolean, int[], long) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}"></val>
        </annotation>
    </item>
    <item name="android.telephony.SubscriptionManager void setSubscriptionOverrideUnmetered(int, boolean, int[], long) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}"></val>
        </annotation>
    </item>
    <item name="android.telephony.SubscriptionPlan.Builder android.telephony.SubscriptionPlan.Builder setDataLimit(long, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.SubscriptionPlan.LIMIT_BEHAVIOR_UNKNOWN, android.telephony.SubscriptionPlan.LIMIT_BEHAVIOR_DISABLED, android.telephony.SubscriptionPlan.LIMIT_BEHAVIOR_BILLED, android.telephony.SubscriptionPlan.LIMIT_BEHAVIOR_THROTTLED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.SubscriptionPlan.Builder android.telephony.SubscriptionPlan.Builder setNetworkTypes(int[]) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyCallback.CallDisconnectCauseListener void onCallDisconnectCauseChanged(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.DisconnectCause.NOT_VALID, android.telephony.DisconnectCause.NOT_DISCONNECTED, android.telephony.DisconnectCause.INCOMING_MISSED, android.telephony.DisconnectCause.NORMAL, android.telephony.DisconnectCause.LOCAL, android.telephony.DisconnectCause.BUSY, android.telephony.DisconnectCause.CONGESTION, android.telephony.DisconnectCause.MMI, android.telephony.DisconnectCause.INVALID_NUMBER, android.telephony.DisconnectCause.NUMBER_UNREACHABLE, android.telephony.DisconnectCause.SERVER_UNREACHABLE, android.telephony.DisconnectCause.INVALID_CREDENTIALS, android.telephony.DisconnectCause.OUT_OF_NETWORK, android.telephony.DisconnectCause.SERVER_ERROR, android.telephony.DisconnectCause.TIMED_OUT, android.telephony.DisconnectCause.LOST_SIGNAL, android.telephony.DisconnectCause.LIMIT_EXCEEDED, android.telephony.DisconnectCause.INCOMING_REJECTED, android.telephony.DisconnectCause.POWER_OFF, android.telephony.DisconnectCause.OUT_OF_SERVICE, android.telephony.DisconnectCause.ICC_ERROR, android.telephony.DisconnectCause.CALL_BARRED, android.telephony.DisconnectCause.FDN_BLOCKED, android.telephony.DisconnectCause.CS_RESTRICTED, android.telephony.DisconnectCause.CS_RESTRICTED_NORMAL, android.telephony.DisconnectCause.CS_RESTRICTED_EMERGENCY, android.telephony.DisconnectCause.UNOBTAINABLE_NUMBER, android.telephony.DisconnectCause.CDMA_LOCKED_UNTIL_POWER_CYCLE, android.telephony.DisconnectCause.CDMA_DROP, android.telephony.DisconnectCause.CDMA_INTERCEPT, android.telephony.DisconnectCause.CDMA_REORDER, android.telephony.DisconnectCause.CDMA_SO_REJECT, android.telephony.DisconnectCause.CDMA_RETRY_ORDER, android.telephony.DisconnectCause.CDMA_ACCESS_FAILURE, android.telephony.DisconnectCause.CDMA_PREEMPTED, android.telephony.DisconnectCause.CDMA_NOT_EMERGENCY, android.telephony.DisconnectCause.CDMA_ACCESS_BLOCKED, android.telephony.DisconnectCause.ERROR_UNSPECIFIED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyCallback.CallStateListener void onCallStateChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.CALL_STATE_IDLE, android.telephony.TelephonyManager.CALL_STATE_RINGING, android.telephony.TelephonyManager.CALL_STATE_OFFHOOK}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyCallback.DataActivityListener void onDataActivity(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.DATA_ACTIVITY_NONE, android.telephony.TelephonyManager.DATA_ACTIVITY_IN, android.telephony.TelephonyManager.DATA_ACTIVITY_OUT, android.telephony.TelephonyManager.DATA_ACTIVITY_INOUT, android.telephony.TelephonyManager.DATA_ACTIVITY_DORMANT}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyCallback.DataConnectionStateListener void onDataConnectionStateChanged(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.DATA_UNKNOWN, android.telephony.TelephonyManager.DATA_DISCONNECTED, android.telephony.TelephonyManager.DATA_CONNECTING, android.telephony.TelephonyManager.DATA_CONNECTED, android.telephony.TelephonyManager.DATA_SUSPENDED, android.telephony.TelephonyManager.DATA_DISCONNECTING, android.telephony.TelephonyManager.DATA_HANDOVER_IN_PROGRESS}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyCallback.DataConnectionStateListener void onDataConnectionStateChanged(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyCallback.RegistrationFailedListener void onRegistrationFailed(android.telephony.CellIdentity, java.lang.String, int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.NetworkRegistrationInfo.DOMAIN_UNKNOWN, android.telephony.NetworkRegistrationInfo.DOMAIN_CS, android.telephony.NetworkRegistrationInfo.DOMAIN_PS, android.telephony.NetworkRegistrationInfo.DOMAIN_CS_PS}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager android.telephony.NetworkScan requestNetworkScan(int, android.telephony.NetworkScanRequest, java.util.concurrent.Executor, android.telephony.TelephonyScanManager.NetworkScanCallback) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.INCLUDE_LOCATION_DATA_NONE, android.telephony.TelephonyManager.INCLUDE_LOCATION_DATA_COARSE, android.telephony.TelephonyManager.INCLUDE_LOCATION_DATA_FINE}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager android.telephony.ServiceState getServiceState(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.INCLUDE_LOCATION_DATA_NONE, android.telephony.TelephonyManager.INCLUDE_LOCATION_DATA_COARSE, android.telephony.TelephonyManager.INCLUDE_LOCATION_DATA_FINE}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager boolean isDataEnabledForReason(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.DATA_ENABLED_REASON_USER, android.telephony.TelephonyManager.DATA_ENABLED_REASON_POLICY, android.telephony.TelephonyManager.DATA_ENABLED_REASON_CARRIER, android.telephony.TelephonyManager.DATA_ENABLED_REASON_THERMAL}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager boolean isPremiumCapabilityAvailableForPurchase(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.PREMIUM_CAPABILITY_PRIORITIZE_LATENCY}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager boolean isRadioInterfaceCapabilitySupported(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.telephony.TelephonyManager.CAPABILITY_SLICING_CONFIG_SUPPORTED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager boolean setNetworkSelectionModeManual(java.lang.String, boolean, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.AccessNetworkConstants.AccessNetworkType.UNKNOWN, android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN, android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN, android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN, android.telephony.AccessNetworkConstants.AccessNetworkType.CDMA2000, android.telephony.AccessNetworkConstants.AccessNetworkType.IWLAN, android.telephony.AccessNetworkConstants.AccessNetworkType.NGRAN}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager java.lang.String getIccAuthentication(int, int, java.lang.String) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.AUTHTYPE_EAP_SIM, android.telephony.TelephonyManager.AUTHTYPE_EAP_AKA, android.telephony.TelephonyManager.AUTHTYPE_GBA_BOOTSTRAP, android.telephony.TelephonyManager.AUTHTYPE_GBA_NAF_KEY_EXTERNAL}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager java.util.Map&lt;java.lang.Integer,java.util.List&lt;android.telephony.emergency.EmergencyNumber&gt;&gt; getEmergencyNumberList(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_POLICE, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_AMBULANCE, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_MIEC, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_AIEC}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager long getAllowedNetworkTypesForReason(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.ALLOWED_NETWORK_TYPES_REASON_USER, android.telephony.TelephonyManager.ALLOWED_NETWORK_TYPES_REASON_CARRIER}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager void getCarrierRestrictionStatus(java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Integer&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.CARRIER_RESTRICTION_STATUS_UNKNOWN, android.telephony.TelephonyManager.CARRIER_RESTRICTION_STATUS_NOT_RESTRICTED, android.telephony.TelephonyManager.CARRIER_RESTRICTION_STATUS_RESTRICTED, android.telephony.TelephonyManager.CARRIER_RESTRICTION_STATUS_RESTRICTED_TO_CALLER}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager void purchasePremiumCapability(int, java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Integer&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.PREMIUM_CAPABILITY_PRIORITIZE_LATENCY}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager void purchasePremiumCapability(int, java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Integer&gt;) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_SUCCESS, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_THROTTLED, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_PURCHASED, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_IN_PROGRESS, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_FOREGROUND, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELED, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_DISABLED, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_ERROR, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUT, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_FEATURE_NOT_SUPPORTED, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_NETWORK_NOT_AVAILABLE, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_ENTITLEMENT_CHECK_FAILED, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_DEFAULT_DATA_SUBSCRIPTION, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_PENDING_NETWORK_SETUP, android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_DISABLED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager void registerTelephonyCallback(int, java.util.concurrent.Executor, android.telephony.TelephonyCallback) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.INCLUDE_LOCATION_DATA_NONE, android.telephony.TelephonyManager.INCLUDE_LOCATION_DATA_COARSE, android.telephony.TelephonyManager.INCLUDE_LOCATION_DATA_FINE}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager void setAllowedNetworkTypesForReason(int, long) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.ALLOWED_NETWORK_TYPES_REASON_USER, android.telephony.TelephonyManager.ALLOWED_NETWORK_TYPES_REASON_CARRIER}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager void setAllowedNetworkTypesForReason(int, long) 1">
        <annotation name="androidx.annotation.LongDef">
            <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_LTE_CA, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_NR, android.telephony.TelephonyManager.NETWORK_TYPE_BITMASK_IWLAN}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager void setCallComposerStatus(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.CALL_COMPOSER_STATUS_ON, android.telephony.TelephonyManager.CALL_COMPOSER_STATUS_OFF, android.telephony.TelephonyManager.CALL_COMPOSER_STATUS_BUSINESS_ONLY}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager void setDataEnabledForReason(int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.DATA_ENABLED_REASON_USER, android.telephony.TelephonyManager.DATA_ENABLED_REASON_POLICY, android.telephony.TelephonyManager.DATA_ENABLED_REASON_CARRIER, android.telephony.TelephonyManager.DATA_ENABLED_REASON_THERMAL}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager void updateAvailableNetworks(java.util.List&lt;android.telephony.AvailableNetworkInfo&gt;, java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Integer&gt;) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_SUCCESS, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_ABORTED, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAIL, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAIL, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTED, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLE, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTION, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager.CallComposerException CallComposerException(int, java.io.IOException) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.CallComposerException.ERROR_UNKNOWN, android.telephony.TelephonyManager.CallComposerException.ERROR_REMOTE_END_CLOSED, android.telephony.TelephonyManager.CallComposerException.ERROR_FILE_TOO_LARGE, android.telephony.TelephonyManager.CallComposerException.ERROR_AUTHENTICATION_FAILED, android.telephony.TelephonyManager.CallComposerException.ERROR_INPUT_CLOSED, android.telephony.TelephonyManager.CallComposerException.ERROR_IO_EXCEPTION, android.telephony.TelephonyManager.CallComposerException.ERROR_NETWORK_UNAVAILABLE}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyManager.CellInfoCallback void onError(int, java.lang.Throwable) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.TelephonyManager.CellInfoCallback.ERROR_TIMEOUT, android.telephony.TelephonyManager.CellInfoCallback.ERROR_MODEM_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.telephony.TelephonyScanManager.NetworkScanCallback void onError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.NetworkScan.ERROR_MODEM_ERROR, android.telephony.NetworkScan.ERROR_INVALID_SCAN, android.telephony.NetworkScan.ERROR_MODEM_UNAVAILABLE, android.telephony.NetworkScan.ERROR_UNSUPPORTED, android.telephony.NetworkScan.ERROR_RADIO_INTERFACE_ERROR, android.telephony.NetworkScan.ERROR_INVALID_SCANID, android.telephony.NetworkScan.ERROR_INTERRUPTED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.data.ApnSetting.Builder android.telephony.data.ApnSetting.Builder setApnTypeBitmask(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.data.ApnSetting.TYPE_DEFAULT, android.telephony.data.ApnSetting.TYPE_MMS, android.telephony.data.ApnSetting.TYPE_SUPL, android.telephony.data.ApnSetting.TYPE_DUN, android.telephony.data.ApnSetting.TYPE_HIPRI, android.telephony.data.ApnSetting.TYPE_FOTA, android.telephony.data.ApnSetting.TYPE_IMS, android.telephony.data.ApnSetting.TYPE_CBS, android.telephony.data.ApnSetting.TYPE_IA, android.telephony.data.ApnSetting.TYPE_EMERGENCY, android.telephony.data.ApnSetting.TYPE_MCX, android.telephony.data.ApnSetting.TYPE_XCAP, android.telephony.data.ApnSetting.TYPE_BIP, android.telephony.data.ApnSetting.TYPE_VSIM, android.telephony.data.ApnSetting.TYPE_ENTERPRISE, android.telephony.data.ApnSetting.TYPE_RCS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.data.ApnSetting.Builder android.telephony.data.ApnSetting.Builder setAuthType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.data.ApnSetting.AUTH_TYPE_NONE, android.telephony.data.ApnSetting.AUTH_TYPE_PAP, android.telephony.data.ApnSetting.AUTH_TYPE_CHAP, android.telephony.data.ApnSetting.AUTH_TYPE_PAP_OR_CHAP}"></val>
        </annotation>
    </item>
    <item name="android.telephony.data.ApnSetting.Builder android.telephony.data.ApnSetting.Builder setMvnoType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.data.ApnSetting.MVNO_TYPE_SPN, android.telephony.data.ApnSetting.MVNO_TYPE_IMSI, android.telephony.data.ApnSetting.MVNO_TYPE_GID, android.telephony.data.ApnSetting.MVNO_TYPE_ICCID}"></val>
        </annotation>
    </item>
    <item name="android.telephony.data.ApnSetting.Builder android.telephony.data.ApnSetting.Builder setProtocol(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.data.ApnSetting.PROTOCOL_IP, android.telephony.data.ApnSetting.PROTOCOL_IPV6, android.telephony.data.ApnSetting.PROTOCOL_IPV4V6, android.telephony.data.ApnSetting.PROTOCOL_PPP, android.telephony.data.ApnSetting.PROTOCOL_NON_IP, android.telephony.data.ApnSetting.PROTOCOL_UNSTRUCTURED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.data.ApnSetting.Builder android.telephony.data.ApnSetting.Builder setRoamingProtocol(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.data.ApnSetting.PROTOCOL_IP, android.telephony.data.ApnSetting.PROTOCOL_IPV6, android.telephony.data.ApnSetting.PROTOCOL_IPV4V6, android.telephony.data.ApnSetting.PROTOCOL_PPP, android.telephony.data.ApnSetting.PROTOCOL_NON_IP, android.telephony.data.ApnSetting.PROTOCOL_UNSTRUCTURED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.data.NetworkSliceInfo.Builder android.telephony.data.NetworkSliceInfo.Builder setMappedHplmnSliceServiceType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.data.NetworkSliceInfo.SLICE_SERVICE_TYPE_NONE, android.telephony.data.NetworkSliceInfo.SLICE_SERVICE_TYPE_EMBB, android.telephony.data.NetworkSliceInfo.SLICE_SERVICE_TYPE_URLLC, android.telephony.data.NetworkSliceInfo.SLICE_SERVICE_TYPE_MIOT}"></val>
        </annotation>
    </item>
    <item name="android.telephony.data.NetworkSliceInfo.Builder android.telephony.data.NetworkSliceInfo.Builder setSliceServiceType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.data.NetworkSliceInfo.SLICE_SERVICE_TYPE_NONE, android.telephony.data.NetworkSliceInfo.SLICE_SERVICE_TYPE_EMBB, android.telephony.data.NetworkSliceInfo.SLICE_SERVICE_TYPE_URLLC, android.telephony.data.NetworkSliceInfo.SLICE_SERVICE_TYPE_MIOT}"></val>
        </annotation>
    </item>
    <item name="android.telephony.data.NetworkSliceInfo.Builder android.telephony.data.NetworkSliceInfo.Builder setStatus(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.data.NetworkSliceInfo.SLICE_STATUS_UNKNOWN, android.telephony.data.NetworkSliceInfo.SLICE_STATUS_CONFIGURED, android.telephony.data.NetworkSliceInfo.SLICE_STATUS_ALLOWED, android.telephony.data.NetworkSliceInfo.SLICE_STATUS_REJECTED_NOT_AVAILABLE_IN_PLMN, android.telephony.data.NetworkSliceInfo.SLICE_STATUS_REJECTED_NOT_AVAILABLE_IN_REGISTERED_AREA, android.telephony.data.NetworkSliceInfo.SLICE_STATUS_DEFAULT_CONFIGURED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.emergency.EmergencyNumber boolean isFromSources(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.emergency.EmergencyNumber.EMERGENCY_NUMBER_SOURCE_NETWORK_SIGNALING, android.telephony.emergency.EmergencyNumber.EMERGENCY_NUMBER_SOURCE_SIM, android.telephony.emergency.EmergencyNumber.EMERGENCY_NUMBER_SOURCE_DATABASE, android.telephony.emergency.EmergencyNumber.EMERGENCY_NUMBER_SOURCE_MODEM_CONFIG, android.telephony.emergency.EmergencyNumber.EMERGENCY_NUMBER_SOURCE_DEFAULT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.emergency.EmergencyNumber boolean isInEmergencyServiceCategories(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_POLICE, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_AMBULANCE, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_MIEC, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_AIEC}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ImsMmTelManager void getRegistrationState(java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Integer&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.RegistrationManager.REGISTRATION_STATE_NOT_REGISTERED, android.telephony.ims.RegistrationManager.REGISTRATION_STATE_REGISTERING, android.telephony.ims.RegistrationManager.REGISTRATION_STATE_REGISTERED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ImsMmTelManager void getRegistrationTransportType(java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Integer&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WWAN, android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WLAN}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ImsRcsManager void getRegistrationState(java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Integer&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.RegistrationManager.REGISTRATION_STATE_NOT_REGISTERED, android.telephony.ims.RegistrationManager.REGISTRATION_STATE_REGISTERING, android.telephony.ims.RegistrationManager.REGISTRATION_STATE_REGISTERED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ImsRcsManager void getRegistrationTransportType(java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Integer&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WWAN, android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WLAN}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ImsReasonInfo ImsReasonInfo(int, int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.ImsReasonInfo.CODE_UNSPECIFIED, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_ILLEGAL_ARGUMENT, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_ILLEGAL_STATE, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_INTERNAL_ERROR, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_NO_PENDING_CALL, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_ENDED_BY_CONFERENCE_MERGE, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_POWER_OFF, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_LOW_BATTERY, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_SERVICE, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_ROAMING, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_IP_CHANGED, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_SERVICE_UNAVAILABLE, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_NOT_REGISTERED, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_CALL_EXCEEDED, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_CALL_BUSY, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_CALL_DECLINE, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_CALL_VCC_ON_PROGRESSING, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_CALL_RESOURCE_RESERVATION_FAILED, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_CALL_CS_RETRY_REQUIRED, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_CALL_VOLTE_RETRY_REQUIRED, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_CALL_TERMINATED, android.telephony.ims.ImsReasonInfo.CODE_LOCAL_HO_NOT_FEASIBLE, android.telephony.ims.ImsReasonInfo.CODE_TIMEOUT_1XX_WAITING, android.telephony.ims.ImsReasonInfo.CODE_TIMEOUT_NO_ANSWER, android.telephony.ims.ImsReasonInfo.CODE_TIMEOUT_NO_ANSWER_CALL_UPDATE, android.telephony.ims.ImsReasonInfo.CODE_CALL_BARRED, android.telephony.ims.ImsReasonInfo.CODE_FDN_BLOCKED, android.telephony.ims.ImsReasonInfo.CODE_IMEI_NOT_ACCEPTED, android.telephony.ims.ImsReasonInfo.CODE_DIAL_MODIFIED_TO_USSD, android.telephony.ims.ImsReasonInfo.CODE_DIAL_MODIFIED_TO_SS, android.telephony.ims.ImsReasonInfo.CODE_DIAL_MODIFIED_TO_DIAL, android.telephony.ims.ImsReasonInfo.CODE_DIAL_MODIFIED_TO_DIAL_VIDEO, android.telephony.ims.ImsReasonInfo.CODE_DIAL_VIDEO_MODIFIED_TO_DIAL, android.telephony.ims.ImsReasonInfo.CODE_DIAL_VIDEO_MODIFIED_TO_DIAL_VIDEO, android.telephony.ims.ImsReasonInfo.CODE_DIAL_VIDEO_MODIFIED_TO_SS, android.telephony.ims.ImsReasonInfo.CODE_DIAL_VIDEO_MODIFIED_TO_USSD, android.telephony.ims.ImsReasonInfo.CODE_SIP_REDIRECTED, android.telephony.ims.ImsReasonInfo.CODE_SIP_BAD_REQUEST, android.telephony.ims.ImsReasonInfo.CODE_SIP_FORBIDDEN, android.telephony.ims.ImsReasonInfo.CODE_SIP_NOT_FOUND, android.telephony.ims.ImsReasonInfo.CODE_SIP_NOT_SUPPORTED, android.telephony.ims.ImsReasonInfo.CODE_SIP_REQUEST_TIMEOUT, android.telephony.ims.ImsReasonInfo.CODE_SIP_TEMPRARILY_UNAVAILABLE, android.telephony.ims.ImsReasonInfo.CODE_SIP_BAD_ADDRESS, android.telephony.ims.ImsReasonInfo.CODE_SIP_BUSY, android.telephony.ims.ImsReasonInfo.CODE_SIP_REQUEST_CANCELLED, android.telephony.ims.ImsReasonInfo.CODE_SIP_NOT_ACCEPTABLE, android.telephony.ims.ImsReasonInfo.CODE_SIP_NOT_REACHABLE, android.telephony.ims.ImsReasonInfo.CODE_SIP_CLIENT_ERROR, android.telephony.ims.ImsReasonInfo.CODE_SIP_TRANSACTION_DOES_NOT_EXIST, android.telephony.ims.ImsReasonInfo.CODE_SIP_SERVER_INTERNAL_ERROR, android.telephony.ims.ImsReasonInfo.CODE_SIP_SERVICE_UNAVAILABLE, android.telephony.ims.ImsReasonInfo.CODE_SIP_SERVER_TIMEOUT, android.telephony.ims.ImsReasonInfo.CODE_SIP_SERVER_ERROR, android.telephony.ims.ImsReasonInfo.CODE_SIP_USER_REJECTED, android.telephony.ims.ImsReasonInfo.CODE_SIP_GLOBAL_ERROR, android.telephony.ims.ImsReasonInfo.CODE_EMERGENCY_TEMP_FAILURE, android.telephony.ims.ImsReasonInfo.CODE_EMERGENCY_PERM_FAILURE, android.telephony.ims.ImsReasonInfo.CODE_SIP_USER_MARKED_UNWANTED, android.telephony.ims.ImsReasonInfo.CODE_SIP_METHOD_NOT_ALLOWED, android.telephony.ims.ImsReasonInfo.CODE_SIP_PROXY_AUTHENTICATION_REQUIRED, android.telephony.ims.ImsReasonInfo.CODE_SIP_REQUEST_ENTITY_TOO_LARGE, android.telephony.ims.ImsReasonInfo.CODE_SIP_REQUEST_URI_TOO_LARGE, android.telephony.ims.ImsReasonInfo.CODE_SIP_EXTENSION_REQUIRED, android.telephony.ims.ImsReasonInfo.CODE_SIP_INTERVAL_TOO_BRIEF, android.telephony.ims.ImsReasonInfo.CODE_SIP_CALL_OR_TRANS_DOES_NOT_EXIST, android.telephony.ims.ImsReasonInfo.CODE_SIP_LOOP_DETECTED, android.telephony.ims.ImsReasonInfo.CODE_SIP_TOO_MANY_HOPS, android.telephony.ims.ImsReasonInfo.CODE_SIP_AMBIGUOUS, android.telephony.ims.ImsReasonInfo.CODE_SIP_REQUEST_PENDING, android.telephony.ims.ImsReasonInfo.CODE_SIP_UNDECIPHERABLE, android.telephony.ims.ImsReasonInfo.CODE_MEDIA_INIT_FAILED, android.telephony.ims.ImsReasonInfo.CODE_MEDIA_NO_DATA, android.telephony.ims.ImsReasonInfo.CODE_MEDIA_NOT_ACCEPTABLE, android.telephony.ims.ImsReasonInfo.CODE_MEDIA_UNSPECIFIED, android.telephony.ims.ImsReasonInfo.CODE_USER_TERMINATED, android.telephony.ims.ImsReasonInfo.CODE_USER_NOANSWER, android.telephony.ims.ImsReasonInfo.CODE_USER_IGNORE, android.telephony.ims.ImsReasonInfo.CODE_USER_DECLINE, android.telephony.ims.ImsReasonInfo.CODE_LOW_BATTERY, android.telephony.ims.ImsReasonInfo.CODE_BLACKLISTED_CALL_ID, android.telephony.ims.ImsReasonInfo.CODE_USER_TERMINATED_BY_REMOTE, android.telephony.ims.ImsReasonInfo.CODE_USER_REJECTED_SESSION_MODIFICATION, android.telephony.ims.ImsReasonInfo.CODE_USER_CANCELLED_SESSION_MODIFICATION, android.telephony.ims.ImsReasonInfo.CODE_SESSION_MODIFICATION_FAILED, android.telephony.ims.ImsReasonInfo.CODE_UT_NOT_SUPPORTED, android.telephony.ims.ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, android.telephony.ims.ImsReasonInfo.CODE_UT_OPERATION_NOT_ALLOWED, android.telephony.ims.ImsReasonInfo.CODE_UT_NETWORK_ERROR, android.telephony.ims.ImsReasonInfo.CODE_UT_CB_PASSWORD_MISMATCH, android.telephony.ims.ImsReasonInfo.CODE_UT_SS_MODIFIED_TO_DIAL, android.telephony.ims.ImsReasonInfo.CODE_UT_SS_MODIFIED_TO_USSD, android.telephony.ims.ImsReasonInfo.CODE_UT_SS_MODIFIED_TO_SS, android.telephony.ims.ImsReasonInfo.CODE_UT_SS_MODIFIED_TO_DIAL_VIDEO, android.telephony.ims.ImsReasonInfo.CODE_ECBM_NOT_SUPPORTED, android.telephony.ims.ImsReasonInfo.CODE_MULTIENDPOINT_NOT_SUPPORTED, android.telephony.ims.ImsReasonInfo.CODE_REGISTRATION_ERROR, android.telephony.ims.ImsReasonInfo.CODE_ANSWERED_ELSEWHERE, android.telephony.ims.ImsReasonInfo.CODE_CALL_PULL_OUT_OF_SYNC, android.telephony.ims.ImsReasonInfo.CODE_CALL_END_CAUSE_CALL_PULL, android.telephony.ims.ImsReasonInfo.CODE_CALL_DROP_IWLAN_TO_LTE_UNAVAILABLE, android.telephony.ims.ImsReasonInfo.CODE_REJECTED_ELSEWHERE, android.telephony.ims.ImsReasonInfo.CODE_SUPP_SVC_FAILED, android.telephony.ims.ImsReasonInfo.CODE_SUPP_SVC_CANCELLED, android.telephony.ims.ImsReasonInfo.CODE_SUPP_SVC_REINVITE_COLLISION, android.telephony.ims.ImsReasonInfo.CODE_IWLAN_DPD_FAILURE, android.telephony.ims.ImsReasonInfo.CODE_EPDG_TUNNEL_ESTABLISH_FAILURE, android.telephony.ims.ImsReasonInfo.CODE_EPDG_TUNNEL_REKEY_FAILURE, android.telephony.ims.ImsReasonInfo.CODE_EPDG_TUNNEL_LOST_CONNECTION, android.telephony.ims.ImsReasonInfo.CODE_MAXIMUM_NUMBER_OF_CALLS_REACHED, android.telephony.ims.ImsReasonInfo.CODE_REMOTE_CALL_DECLINE, android.telephony.ims.ImsReasonInfo.CODE_DATA_LIMIT_REACHED, android.telephony.ims.ImsReasonInfo.CODE_DATA_DISABLED, android.telephony.ims.ImsReasonInfo.CODE_WIFI_LOST, android.telephony.ims.ImsReasonInfo.CODE_IKEV2_AUTH_FAILURE, android.telephony.ims.ImsReasonInfo.CODE_RADIO_OFF, android.telephony.ims.ImsReasonInfo.CODE_NO_VALID_SIM, android.telephony.ims.ImsReasonInfo.CODE_RADIO_INTERNAL_ERROR, android.telephony.ims.ImsReasonInfo.CODE_NETWORK_RESP_TIMEOUT, android.telephony.ims.ImsReasonInfo.CODE_NETWORK_REJECT, android.telephony.ims.ImsReasonInfo.CODE_RADIO_ACCESS_FAILURE, android.telephony.ims.ImsReasonInfo.CODE_RADIO_LINK_FAILURE, android.telephony.ims.ImsReasonInfo.CODE_RADIO_LINK_LOST, android.telephony.ims.ImsReasonInfo.CODE_RADIO_UPLINK_FAILURE, android.telephony.ims.ImsReasonInfo.CODE_RADIO_SETUP_FAILURE, android.telephony.ims.ImsReasonInfo.CODE_RADIO_RELEASE_NORMAL, android.telephony.ims.ImsReasonInfo.CODE_RADIO_RELEASE_ABNORMAL, android.telephony.ims.ImsReasonInfo.CODE_ACCESS_CLASS_BLOCKED, android.telephony.ims.ImsReasonInfo.CODE_NETWORK_DETACH, android.telephony.ims.ImsReasonInfo.CODE_SIP_ALTERNATE_EMERGENCY_CALL, android.telephony.ims.ImsReasonInfo.CODE_NO_CSFB_IN_CS_ROAM, android.telephony.ims.ImsReasonInfo.CODE_REJECT_UNKNOWN, android.telephony.ims.ImsReasonInfo.CODE_REJECT_ONGOING_CALL_WAITING_DISABLED, android.telephony.ims.ImsReasonInfo.CODE_REJECT_CALL_ON_OTHER_SUB, android.telephony.ims.ImsReasonInfo.CODE_REJECT_1X_COLLISION, android.telephony.ims.ImsReasonInfo.CODE_REJECT_SERVICE_NOT_REGISTERED, android.telephony.ims.ImsReasonInfo.CODE_REJECT_CALL_TYPE_NOT_ALLOWED, android.telephony.ims.ImsReasonInfo.CODE_REJECT_ONGOING_E911_CALL, android.telephony.ims.ImsReasonInfo.CODE_REJECT_ONGOING_CALL_SETUP, android.telephony.ims.ImsReasonInfo.CODE_REJECT_MAX_CALL_LIMIT_REACHED, android.telephony.ims.ImsReasonInfo.CODE_REJECT_UNSUPPORTED_SIP_HEADERS, android.telephony.ims.ImsReasonInfo.CODE_REJECT_UNSUPPORTED_SDP_HEADERS, android.telephony.ims.ImsReasonInfo.CODE_REJECT_ONGOING_CALL_TRANSFER, android.telephony.ims.ImsReasonInfo.CODE_REJECT_INTERNAL_ERROR, android.telephony.ims.ImsReasonInfo.CODE_REJECT_QOS_FAILURE, android.telephony.ims.ImsReasonInfo.CODE_REJECT_ONGOING_HANDOVER, android.telephony.ims.ImsReasonInfo.CODE_REJECT_VT_TTY_NOT_ALLOWED, android.telephony.ims.ImsReasonInfo.CODE_REJECT_ONGOING_CALL_UPGRADE, android.telephony.ims.ImsReasonInfo.CODE_REJECT_CONFERENCE_TTY_NOT_ALLOWED, android.telephony.ims.ImsReasonInfo.CODE_REJECT_ONGOING_CONFERENCE_CALL, android.telephony.ims.ImsReasonInfo.CODE_REJECT_VT_AVPF_NOT_ALLOWED, android.telephony.ims.ImsReasonInfo.CODE_REJECT_ONGOING_ENCRYPTED_CALL, android.telephony.ims.ImsReasonInfo.CODE_REJECT_ONGOING_CS_CALL, android.telephony.ims.ImsReasonInfo.CODE_NETWORK_CONGESTION, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_1, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_2, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_3, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_4, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_5, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_6, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_7, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_8, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_9, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_10, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_11, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_12, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_13, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_14, android.telephony.ims.ImsReasonInfo.CODE_OEM_CAUSE_15}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ImsStateCallback void onUnavailable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.ImsStateCallback.REASON_UNKNOWN_TEMPORARY_ERROR, android.telephony.ims.ImsStateCallback.REASON_UNKNOWN_PERMANENT_ERROR, android.telephony.ims.ImsStateCallback.REASON_IMS_SERVICE_DISCONNECTED, android.telephony.ims.ImsStateCallback.REASON_NO_IMS_SERVICE_CONFIGURED, android.telephony.ims.ImsStateCallback.REASON_SUBSCRIPTION_INACTIVE, android.telephony.ims.ImsStateCallback.REASON_IMS_SERVICE_NOT_READY}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager boolean getProvisioningStatusForCapability(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_UT, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_SMS, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_CALL_COMPOSER, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager boolean getProvisioningStatusForCapability(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_LTE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_CROSS_SIM, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NR, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_3G}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager boolean getRcsProvisioningStatusForCapability(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.ImsRcsManager.CAPABILITY_TYPE_NONE, android.telephony.ims.ImsRcsManager.CAPABILITY_TYPE_OPTIONS_UCE, android.telephony.ims.ImsRcsManager.CAPABILITY_TYPE_PRESENCE_UCE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager boolean getRcsProvisioningStatusForCapability(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_LTE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_CROSS_SIM, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NR, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_3G}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager boolean isProvisioningRequiredForCapability(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_UT, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_SMS, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_CALL_COMPOSER, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager boolean isProvisioningRequiredForCapability(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_LTE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_CROSS_SIM, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NR, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_3G}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager boolean isRcsProvisioningRequiredForCapability(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.ImsRcsManager.CAPABILITY_TYPE_NONE, android.telephony.ims.ImsRcsManager.CAPABILITY_TYPE_OPTIONS_UCE, android.telephony.ims.ImsRcsManager.CAPABILITY_TYPE_PRESENCE_UCE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager boolean isRcsProvisioningRequiredForCapability(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_LTE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_CROSS_SIM, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NR, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_3G}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager void setProvisioningStatusForCapability(int, int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_UT, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_SMS, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_CALL_COMPOSER, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager void setProvisioningStatusForCapability(int, int, boolean) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_LTE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_CROSS_SIM, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NR, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_3G}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager void setRcsProvisioningStatusForCapability(int, int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.ImsRcsManager.CAPABILITY_TYPE_NONE, android.telephony.ims.ImsRcsManager.CAPABILITY_TYPE_OPTIONS_UCE, android.telephony.ims.ImsRcsManager.CAPABILITY_TYPE_PRESENCE_UCE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager void setRcsProvisioningStatusForCapability(int, int, boolean) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_LTE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_CROSS_SIM, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NR, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_3G}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager.FeatureProvisioningCallback void onFeatureProvisioningChanged(int, int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_UT, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_SMS, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_CALL_COMPOSER, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager.FeatureProvisioningCallback void onFeatureProvisioningChanged(int, int, boolean) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_LTE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_CROSS_SIM, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NR, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_3G}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager.FeatureProvisioningCallback void onRcsFeatureProvisioningChanged(int, int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.ImsRcsManager.CAPABILITY_TYPE_NONE, android.telephony.ims.ImsRcsManager.CAPABILITY_TYPE_OPTIONS_UCE, android.telephony.ims.ImsRcsManager.CAPABILITY_TYPE_PRESENCE_UCE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.ProvisioningManager.FeatureProvisioningCallback void onRcsFeatureProvisioningChanged(int, int, boolean) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_LTE, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_CROSS_SIM, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NR, android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_3G}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.RegistrationManager void getRegistrationState(java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Integer&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.RegistrationManager.REGISTRATION_STATE_NOT_REGISTERED, android.telephony.ims.RegistrationManager.REGISTRATION_STATE_REGISTERING, android.telephony.ims.RegistrationManager.REGISTRATION_STATE_REGISTERED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.RegistrationManager void getRegistrationTransportType(java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Integer&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WWAN, android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WLAN}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.RegistrationManager.RegistrationCallback void onRegistered(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WWAN, android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WLAN}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.RegistrationManager.RegistrationCallback void onRegistering(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WWAN, android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WLAN}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.RegistrationManager.RegistrationCallback void onTechnologyChangeFailed(int, android.telephony.ims.ImsReasonInfo) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WWAN, android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WLAN}"></val>
        </annotation>
    </item>
    <item name="android.telephony.ims.feature.MmTelFeature.MmTelCapabilities boolean isCapable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_UT, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_SMS, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_CALL_COMPOSER, android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLY}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.telephony.mbms.DownloadStatusListener void onStatusUpdated(android.telephony.mbms.DownloadRequest, android.telephony.mbms.FileInfo, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.MbmsDownloadSession.STATUS_UNKNOWN, android.telephony.MbmsDownloadSession.STATUS_ACTIVELY_DOWNLOADING, android.telephony.MbmsDownloadSession.STATUS_PENDING_DOWNLOAD, android.telephony.MbmsDownloadSession.STATUS_PENDING_REPAIR, android.telephony.MbmsDownloadSession.STATUS_PENDING_DOWNLOAD_WINDOW}"></val>
        </annotation>
    </item>
    <item name="android.telephony.mbms.GroupCallCallback void onError(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.mbms.MbmsErrors.ERROR_NO_UNIQUE_MIDDLEWARE, android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST, android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_NOT_BOUND, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_MIDDLEWARE_NOT_YET_READY, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_OUT_OF_MEMORY, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_IN_E911, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_UNABLE_TO_READ_SIM, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_CARRIER_CHANGE_NOT_ALLOWED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.mbms.GroupCallCallback void onGroupCallStateChanged(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.mbms.GroupCall.STATE_STOPPED, android.telephony.mbms.GroupCall.STATE_STARTED, android.telephony.mbms.GroupCall.STATE_STALLED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.mbms.GroupCallCallback void onGroupCallStateChanged(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.mbms.GroupCall.REASON_BY_USER_REQUEST, android.telephony.mbms.GroupCall.REASON_FREQUENCY_CONFLICT, android.telephony.mbms.GroupCall.REASON_OUT_OF_MEMORY, android.telephony.mbms.GroupCall.REASON_NOT_CONNECTED_TO_HOMECARRIER_LTE, android.telephony.mbms.GroupCall.REASON_LEFT_MBMS_BROADCAST_AREA, android.telephony.mbms.GroupCall.REASON_NONE}"></val>
        </annotation>
    </item>
    <item name="android.telephony.mbms.MbmsDownloadSessionCallback void onError(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.mbms.MbmsErrors.ERROR_NO_UNIQUE_MIDDLEWARE, android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST, android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_NOT_BOUND, android.telephony.mbms.MbmsErrors.InitializationErrors.ERROR_APP_PERMISSIONS_NOT_GRANTED, android.telephony.mbms.MbmsErrors.InitializationErrors.ERROR_DUPLICATE_INITIALIZE, android.telephony.mbms.MbmsErrors.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_MIDDLEWARE_NOT_YET_READY, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_OUT_OF_MEMORY, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_IN_E911, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_UNABLE_TO_READ_SIM, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_CARRIER_CHANGE_NOT_ALLOWED, android.telephony.mbms.MbmsErrors.DownloadErrors.ERROR_CANNOT_CHANGE_TEMP_FILE_ROOT, android.telephony.mbms.MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST, android.telephony.mbms.MbmsErrors.DownloadErrors.ERROR_UNKNOWN_FILE_INFO}"></val>
        </annotation>
    </item>
    <item name="android.telephony.mbms.MbmsGroupCallSessionCallback void onError(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.mbms.MbmsErrors.ERROR_NO_UNIQUE_MIDDLEWARE, android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST, android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_NOT_BOUND, android.telephony.mbms.MbmsErrors.InitializationErrors.ERROR_APP_PERMISSIONS_NOT_GRANTED, android.telephony.mbms.MbmsErrors.InitializationErrors.ERROR_DUPLICATE_INITIALIZE, android.telephony.mbms.MbmsErrors.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_MIDDLEWARE_NOT_YET_READY, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_OUT_OF_MEMORY, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_IN_E911, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_UNABLE_TO_READ_SIM, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_CARRIER_CHANGE_NOT_ALLOWED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.mbms.MbmsStreamingSessionCallback void onError(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.mbms.MbmsErrors.ERROR_NO_UNIQUE_MIDDLEWARE, android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST, android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_NOT_BOUND, android.telephony.mbms.MbmsErrors.InitializationErrors.ERROR_APP_PERMISSIONS_NOT_GRANTED, android.telephony.mbms.MbmsErrors.InitializationErrors.ERROR_DUPLICATE_INITIALIZE, android.telephony.mbms.MbmsErrors.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_MIDDLEWARE_NOT_YET_READY, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_OUT_OF_MEMORY, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_IN_E911, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_UNABLE_TO_READ_SIM, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_CARRIER_CHANGE_NOT_ALLOWED, android.telephony.mbms.MbmsErrors.StreamingErrors.ERROR_CONCURRENT_SERVICE_LIMIT_REACHED, android.telephony.mbms.MbmsErrors.StreamingErrors.ERROR_UNABLE_TO_START_SERVICE, android.telephony.mbms.MbmsErrors.StreamingErrors.ERROR_DUPLICATE_START_STREAM}"></val>
        </annotation>
    </item>
    <item name="android.telephony.mbms.StreamingServiceCallback void onError(int, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.mbms.MbmsErrors.ERROR_NO_UNIQUE_MIDDLEWARE, android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST, android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_NOT_BOUND, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_MIDDLEWARE_NOT_YET_READY, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_OUT_OF_MEMORY, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_IN_E911, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_UNABLE_TO_READ_SIM, android.telephony.mbms.MbmsErrors.GeneralErrors.ERROR_CARRIER_CHANGE_NOT_ALLOWED, android.telephony.mbms.MbmsErrors.StreamingErrors.ERROR_CONCURRENT_SERVICE_LIMIT_REACHED, android.telephony.mbms.MbmsErrors.StreamingErrors.ERROR_UNABLE_TO_START_SERVICE, android.telephony.mbms.MbmsErrors.StreamingErrors.ERROR_DUPLICATE_START_STREAM}"></val>
        </annotation>
    </item>
    <item name="android.telephony.mbms.StreamingServiceCallback void onStreamStateUpdated(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.mbms.StreamingService.STATE_STOPPED, android.telephony.mbms.StreamingService.STATE_STARTED, android.telephony.mbms.StreamingService.STATE_STALLED}"></val>
        </annotation>
    </item>
    <item name="android.telephony.mbms.StreamingServiceCallback void onStreamStateUpdated(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.telephony.mbms.StreamingService.REASON_BY_USER_REQUEST, android.telephony.mbms.StreamingService.REASON_END_OF_SESSION, android.telephony.mbms.StreamingService.REASON_FREQUENCY_CONFLICT, android.telephony.mbms.StreamingService.REASON_OUT_OF_MEMORY, android.telephony.mbms.StreamingService.REASON_NOT_CONNECTED_TO_HOMECARRIER_LTE, android.telephony.mbms.StreamingService.REASON_LEFT_MBMS_BROADCAST_AREA, android.telephony.mbms.StreamingService.REASON_NONE}"></val>
        </annotation>
    </item>
    <item name="android.test.mock.MockContentResolver void notifyChange(android.net.Uri, android.database.ContentObserver, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.ContentResolver.NOTIFY_SYNC_TO_NETWORK, android.content.ContentResolver.NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS, android.content.ContentResolver.NOTIFY_INSERT, android.content.ContentResolver.NOTIFY_UPDATE, android.content.ContentResolver.NOTIFY_DELETE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.test.mock.MockContentResolver void notifyChange(java.util.Collection&lt;android.net.Uri&gt;, android.database.ContentObserver, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.ContentResolver.NOTIFY_SYNC_TO_NETWORK, android.content.ContentResolver.NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS, android.content.ContentResolver.NOTIFY_INSERT, android.content.ContentResolver.NOTIFY_UPDATE, android.content.ContentResolver.NOTIFY_DELETE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.test.mock.MockPackageManager boolean hasSigningCertificate(int, byte[], int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.CERT_INPUT_RAW_X509, android.content.pm.PackageManager.CERT_INPUT_SHA256}"></val>
        </annotation>
    </item>
    <item name="android.test.mock.MockPackageManager boolean hasSigningCertificate(java.lang.String, byte[], int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.PackageManager.CERT_INPUT_RAW_X509, android.content.pm.PackageManager.CERT_INPUT_SHA256}"></val>
        </annotation>
    </item>
    <item name="android.text.DynamicLayout.Builder android.text.DynamicLayout.Builder setBreakStrategy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreaker.BREAK_STRATEGY_SIMPLE, android.graphics.text.LineBreaker.BREAK_STRATEGY_HIGH_QUALITY, android.graphics.text.LineBreaker.BREAK_STRATEGY_BALANCED}"></val>
        </annotation>
    </item>
    <item name="android.text.DynamicLayout.Builder android.text.DynamicLayout.Builder setHyphenationFrequency(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.text.Layout.HYPHENATION_FREQUENCY_NORMAL, android.text.Layout.HYPHENATION_FREQUENCY_NORMAL_FAST, android.text.Layout.HYPHENATION_FREQUENCY_FULL, android.text.Layout.HYPHENATION_FREQUENCY_FULL_FAST, android.text.Layout.HYPHENATION_FREQUENCY_NONE}"></val>
        </annotation>
    </item>
    <item name="android.text.DynamicLayout.Builder android.text.DynamicLayout.Builder setJustificationMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreaker.JUSTIFICATION_MODE_NONE, android.graphics.text.LineBreaker.JUSTIFICATION_MODE_INTER_WORD, android.graphics.text.LineBreaker.JUSTIFICATION_MODE_INTER_CHARACTER}"></val>
        </annotation>
    </item>
    <item name="android.text.Layout.Builder android.text.Layout.Builder setBreakStrategy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreaker.BREAK_STRATEGY_SIMPLE, android.graphics.text.LineBreaker.BREAK_STRATEGY_HIGH_QUALITY, android.graphics.text.LineBreaker.BREAK_STRATEGY_BALANCED}"></val>
        </annotation>
    </item>
    <item name="android.text.Layout.Builder android.text.Layout.Builder setHyphenationFrequency(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.text.Layout.HYPHENATION_FREQUENCY_NORMAL, android.text.Layout.HYPHENATION_FREQUENCY_NORMAL_FAST, android.text.Layout.HYPHENATION_FREQUENCY_FULL, android.text.Layout.HYPHENATION_FREQUENCY_FULL_FAST, android.text.Layout.HYPHENATION_FREQUENCY_NONE}"></val>
        </annotation>
    </item>
    <item name="android.text.Layout.Builder android.text.Layout.Builder setJustificationMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreaker.JUSTIFICATION_MODE_NONE, android.graphics.text.LineBreaker.JUSTIFICATION_MODE_INTER_WORD, android.graphics.text.LineBreaker.JUSTIFICATION_MODE_INTER_CHARACTER}"></val>
        </annotation>
    </item>
    <item name="android.text.PrecomputedText.Params.Builder android.text.PrecomputedText.Params.Builder setBreakStrategy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreaker.BREAK_STRATEGY_SIMPLE, android.graphics.text.LineBreaker.BREAK_STRATEGY_HIGH_QUALITY, android.graphics.text.LineBreaker.BREAK_STRATEGY_BALANCED}"></val>
        </annotation>
    </item>
    <item name="android.text.PrecomputedText.Params.Builder android.text.PrecomputedText.Params.Builder setHyphenationFrequency(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.text.Layout.HYPHENATION_FREQUENCY_NORMAL, android.text.Layout.HYPHENATION_FREQUENCY_NORMAL_FAST, android.text.Layout.HYPHENATION_FREQUENCY_FULL, android.text.Layout.HYPHENATION_FREQUENCY_FULL_FAST, android.text.Layout.HYPHENATION_FREQUENCY_NONE}"></val>
        </annotation>
    </item>
    <item name="android.text.StaticLayout.Builder android.text.StaticLayout.Builder setBreakStrategy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreaker.BREAK_STRATEGY_SIMPLE, android.graphics.text.LineBreaker.BREAK_STRATEGY_HIGH_QUALITY, android.graphics.text.LineBreaker.BREAK_STRATEGY_BALANCED}"></val>
        </annotation>
    </item>
    <item name="android.text.StaticLayout.Builder android.text.StaticLayout.Builder setHyphenationFrequency(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.text.Layout.HYPHENATION_FREQUENCY_NORMAL, android.text.Layout.HYPHENATION_FREQUENCY_NORMAL_FAST, android.text.Layout.HYPHENATION_FREQUENCY_FULL, android.text.Layout.HYPHENATION_FREQUENCY_FULL_FAST, android.text.Layout.HYPHENATION_FREQUENCY_NONE}"></val>
        </annotation>
    </item>
    <item name="android.text.StaticLayout.Builder android.text.StaticLayout.Builder setJustificationMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreaker.JUSTIFICATION_MODE_NONE, android.graphics.text.LineBreaker.JUSTIFICATION_MODE_INTER_WORD, android.graphics.text.LineBreaker.JUSTIFICATION_MODE_INTER_CHARACTER}"></val>
        </annotation>
    </item>
    <item name="android.text.TextUtils java.lang.CharSequence makeSafeForPresentation(java.lang.String, int, float, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.text.TextUtils.SAFE_STRING_FLAG_TRIM, android.text.TextUtils.SAFE_STRING_FLAG_SINGLE_LINE, android.text.TextUtils.SAFE_STRING_FLAG_FIRST_LINE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.text.style.DynamicDrawableSpan DynamicDrawableSpan(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.text.style.DynamicDrawableSpan.ALIGN_BOTTOM, android.text.style.DynamicDrawableSpan.ALIGN_BASELINE, android.text.style.DynamicDrawableSpan.ALIGN_CENTER}"></val>
        </annotation>
    </item>
    <item name="android.text.style.StyleSpan StyleSpan(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Typeface.NORMAL, android.graphics.Typeface.BOLD, android.graphics.Typeface.ITALIC, android.graphics.Typeface.BOLD_ITALIC}"></val>
        </annotation>
    </item>
    <item name="android.text.util.Linkify boolean addLinks(android.text.Spannable, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.text.util.Linkify.WEB_URLS, android.text.util.Linkify.EMAIL_ADDRESSES, android.text.util.Linkify.PHONE_NUMBERS, android.text.util.Linkify.MAP_ADDRESSES, android.text.util.Linkify.ALL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.text.util.Linkify boolean addLinks(android.text.Spannable, int, java.util.function.Function&lt;java.lang.String,android.text.style.URLSpan&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.text.util.Linkify.WEB_URLS, android.text.util.Linkify.EMAIL_ADDRESSES, android.text.util.Linkify.PHONE_NUMBERS, android.text.util.Linkify.MAP_ADDRESSES, android.text.util.Linkify.ALL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.text.util.Linkify boolean addLinks(android.widget.TextView, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.text.util.Linkify.WEB_URLS, android.text.util.Linkify.EMAIL_ADDRESSES, android.text.util.Linkify.PHONE_NUMBERS, android.text.util.Linkify.MAP_ADDRESSES, android.text.util.Linkify.ALL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.transition.Fade Fade(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.transition.Visibility.MODE_IN, android.transition.Visibility.MODE_OUT, android.transition.Fade.IN, android.transition.Fade.OUT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.transition.SidePropagation void setSide(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.Gravity.LEFT, android.view.Gravity.TOP, android.view.Gravity.RIGHT, android.view.Gravity.BOTTOM, android.view.Gravity.START, android.view.Gravity.END}"></val>
        </annotation>
    </item>
    <item name="android.transition.Slide Slide(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.Gravity.LEFT, android.view.Gravity.TOP, android.view.Gravity.RIGHT, android.view.Gravity.BOTTOM, android.view.Gravity.START, android.view.Gravity.END}"></val>
        </annotation>
    </item>
    <item name="android.transition.Slide void setSlideEdge(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.Gravity.LEFT, android.view.Gravity.TOP, android.view.Gravity.RIGHT, android.view.Gravity.BOTTOM, android.view.Gravity.START, android.view.Gravity.END}"></val>
        </annotation>
    </item>
    <item name="android.transition.Visibility void setMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.transition.Visibility.MODE_IN, android.transition.Visibility.MODE_OUT, android.transition.Fade.IN, android.transition.Fade.OUT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.util.Log boolean isLoggable(java.lang.String, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.Log.ASSERT, android.util.Log.ERROR, android.util.Log.WARN, android.util.Log.INFO, android.util.Log.DEBUG, android.util.Log.VERBOSE}"></val>
        </annotation>
    </item>
    <item name="android.util.Log int println(int, java.lang.String, java.lang.String) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.Log.ASSERT, android.util.Log.ERROR, android.util.Log.WARN, android.util.Log.INFO, android.util.Log.DEBUG, android.util.Log.VERBOSE}"></val>
        </annotation>
    </item>
    <item name="android.util.TypedValue float applyDimension(int, float, android.util.DisplayMetrics) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.TypedValue.COMPLEX_UNIT_PX, android.util.TypedValue.COMPLEX_UNIT_DIP, android.util.TypedValue.COMPLEX_UNIT_SP, android.util.TypedValue.COMPLEX_UNIT_PT, android.util.TypedValue.COMPLEX_UNIT_IN, android.util.TypedValue.COMPLEX_UNIT_MM}"></val>
        </annotation>
    </item>
    <item name="android.util.TypedValue float convertDimensionToPixels(int, float, android.util.DisplayMetrics) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.TypedValue.COMPLEX_UNIT_PX, android.util.TypedValue.COMPLEX_UNIT_DIP, android.util.TypedValue.COMPLEX_UNIT_SP, android.util.TypedValue.COMPLEX_UNIT_PT, android.util.TypedValue.COMPLEX_UNIT_IN, android.util.TypedValue.COMPLEX_UNIT_MM}"></val>
        </annotation>
    </item>
    <item name="android.util.TypedValue float convertPixelsToDimension(int, float, android.util.DisplayMetrics) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.TypedValue.COMPLEX_UNIT_PX, android.util.TypedValue.COMPLEX_UNIT_DIP, android.util.TypedValue.COMPLEX_UNIT_SP, android.util.TypedValue.COMPLEX_UNIT_PT, android.util.TypedValue.COMPLEX_UNIT_IN, android.util.TypedValue.COMPLEX_UNIT_MM}"></val>
        </annotation>
    </item>
    <item name="android.util.TypedValue float deriveDimension(int, float, android.util.DisplayMetrics) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.TypedValue.COMPLEX_UNIT_PX, android.util.TypedValue.COMPLEX_UNIT_DIP, android.util.TypedValue.COMPLEX_UNIT_SP, android.util.TypedValue.COMPLEX_UNIT_PT, android.util.TypedValue.COMPLEX_UNIT_IN, android.util.TypedValue.COMPLEX_UNIT_MM}"></val>
        </annotation>
    </item>
    <item name="android.view.AttachedSurfaceControl.OnBufferTransformHintChangedListener void onBufferTransformHintChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.SurfaceControl.BUFFER_TRANSFORM_IDENTITY, android.view.SurfaceControl.BUFFER_TRANSFORM_MIRROR_HORIZONTAL, android.view.SurfaceControl.BUFFER_TRANSFORM_MIRROR_VERTICAL, android.view.SurfaceControl.BUFFER_TRANSFORM_ROTATE_90, android.view.SurfaceControl.BUFFER_TRANSFORM_ROTATE_180, android.view.SurfaceControl.BUFFER_TRANSFORM_ROTATE_270}"></val>
        </annotation>
    </item>
    <item name="android.view.ContentInfo.Builder Builder(android.content.ClipData, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.ContentInfo.SOURCE_APP, android.view.ContentInfo.SOURCE_CLIPBOARD, android.view.ContentInfo.SOURCE_INPUT_METHOD, android.view.ContentInfo.SOURCE_DRAG_AND_DROP, android.view.ContentInfo.SOURCE_AUTOFILL, android.view.ContentInfo.SOURCE_PROCESS_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.view.ContentInfo.Builder android.view.ContentInfo.Builder setFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.ContentInfo.FLAG_CONVERT_TO_PLAIN_TEXT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.ContentInfo.Builder android.view.ContentInfo.Builder setSource(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.ContentInfo.SOURCE_APP, android.view.ContentInfo.SOURCE_CLIPBOARD, android.view.ContentInfo.SOURCE_INPUT_METHOD, android.view.ContentInfo.SOURCE_DRAG_AND_DROP, android.view.ContentInfo.SOURCE_AUTOFILL, android.view.ContentInfo.SOURCE_PROCESS_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.view.Display android.view.RoundedCorner getRoundedCorner(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.RoundedCorner.POSITION_TOP_LEFT, android.view.RoundedCorner.POSITION_TOP_RIGHT, android.view.RoundedCorner.POSITION_BOTTOM_RIGHT, android.view.RoundedCorner.POSITION_BOTTOM_LEFT}"></val>
        </annotation>
    </item>
    <item name="android.view.FocusFinder android.view.View findNextKeyboardNavigationCluster(android.view.View, android.view.View, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.FrameMetrics long getMetric(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.FrameMetrics.UNKNOWN_DELAY_DURATION, android.view.FrameMetrics.INPUT_HANDLING_DURATION, android.view.FrameMetrics.ANIMATION_DURATION, android.view.FrameMetrics.LAYOUT_MEASURE_DURATION, android.view.FrameMetrics.DRAW_DURATION, android.view.FrameMetrics.SYNC_DURATION, android.view.FrameMetrics.COMMAND_ISSUE_DURATION, android.view.FrameMetrics.SWAP_BUFFERS_DURATION, android.view.FrameMetrics.TOTAL_DURATION, android.view.FrameMetrics.FIRST_DRAW_FRAME, android.view.FrameMetrics.INTENDED_VSYNC_TIMESTAMP, android.view.FrameMetrics.VSYNC_TIMESTAMP, android.view.FrameMetrics.GPU_DURATION, android.view.FrameMetrics.DEADLINE}"></val>
        </annotation>
    </item>
    <item name="android.view.MotionEvent android.view.MotionEvent obtain(long, long, int, int, android.view.MotionEvent.PointerProperties[], android.view.MotionEvent.PointerCoords[], int, int, float, float, int, int, int, int, int, int) 15">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.MotionEvent.CLASSIFICATION_NONE, android.view.MotionEvent.CLASSIFICATION_AMBIGUOUS_GESTURE, android.view.MotionEvent.CLASSIFICATION_DEEP_PRESS, android.view.MotionEvent.CLASSIFICATION_TWO_FINGER_SWIPE, android.view.MotionEvent.CLASSIFICATION_PINCH}"></val>
        </annotation>
    </item>
    <item name="android.view.PixelCopy.OnPixelCopyFinishedListener void onPixelCopyFinished(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.PixelCopy.SUCCESS, android.view.PixelCopy.ERROR_UNKNOWN, android.view.PixelCopy.ERROR_TIMEOUT, android.view.PixelCopy.ERROR_SOURCE_NO_DATA, android.view.PixelCopy.ERROR_SOURCE_INVALID, android.view.PixelCopy.ERROR_DESTINATION_INVALID}"></val>
        </annotation>
    </item>
    <item name="android.view.RoundedCorner RoundedCorner(int, int, int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.RoundedCorner.POSITION_TOP_LEFT, android.view.RoundedCorner.POSITION_TOP_RIGHT, android.view.RoundedCorner.POSITION_BOTTOM_RIGHT, android.view.RoundedCorner.POSITION_BOTTOM_LEFT}"></val>
        </annotation>
    </item>
    <item name="android.view.SoundEffectConstants int getConstantForFocusDirection(int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.SoundEffectConstants int getContantForFocusDirection(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.Surface void setFrameRate(float, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.Surface.FRAME_RATE_COMPATIBILITY_DEFAULT, android.view.Surface.FRAME_RATE_COMPATIBILITY_FIXED_SOURCE}"></val>
        </annotation>
    </item>
    <item name="android.view.Surface void setFrameRate(float, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.Surface.FRAME_RATE_COMPATIBILITY_DEFAULT, android.view.Surface.FRAME_RATE_COMPATIBILITY_FIXED_SOURCE}"></val>
        </annotation>
    </item>
    <item name="android.view.Surface void setFrameRate(float, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.Surface.CHANGE_FRAME_RATE_ONLY_IF_SEAMLESS, android.view.Surface.CHANGE_FRAME_RATE_ALWAYS}"></val>
        </annotation>
    </item>
    <item name="android.view.SurfaceControl.Builder android.view.SurfaceControl.Builder setFormat(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGBA_F16, android.graphics.PixelFormat.RGBA_1010102, android.graphics.PixelFormat.RGB_888, android.graphics.PixelFormat.RGB_565}"></val>
        </annotation>
    </item>
    <item name="android.view.SurfaceControl.Transaction android.view.SurfaceControl.Transaction setBufferTransform(android.view.SurfaceControl, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.SurfaceControl.BUFFER_TRANSFORM_IDENTITY, android.view.SurfaceControl.BUFFER_TRANSFORM_MIRROR_HORIZONTAL, android.view.SurfaceControl.BUFFER_TRANSFORM_MIRROR_VERTICAL, android.view.SurfaceControl.BUFFER_TRANSFORM_ROTATE_90, android.view.SurfaceControl.BUFFER_TRANSFORM_ROTATE_180, android.view.SurfaceControl.BUFFER_TRANSFORM_ROTATE_270}"></val>
        </annotation>
    </item>
    <item name="android.view.SurfaceControl.Transaction android.view.SurfaceControl.Transaction setDataSpace(android.view.SurfaceControl, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.hardware.DataSpace.DATASPACE_DEPTH, android.hardware.DataSpace.DATASPACE_DYNAMIC_DEPTH, android.hardware.DataSpace.DATASPACE_HEIF, android.hardware.DataSpace.DATASPACE_JPEG_R, android.hardware.DataSpace.DATASPACE_UNKNOWN, android.hardware.DataSpace.DATASPACE_SCRGB_LINEAR, android.hardware.DataSpace.DATASPACE_SRGB, android.hardware.DataSpace.DATASPACE_SCRGB, android.hardware.DataSpace.DATASPACE_DISPLAY_P3, android.hardware.DataSpace.DATASPACE_BT2020_HLG, android.hardware.DataSpace.DATASPACE_BT2020_PQ, android.hardware.DataSpace.DATASPACE_ADOBE_RGB, android.hardware.DataSpace.DATASPACE_JFIF, android.hardware.DataSpace.DATASPACE_BT601_625, android.hardware.DataSpace.DATASPACE_BT601_525, android.hardware.DataSpace.DATASPACE_BT2020, android.hardware.DataSpace.DATASPACE_BT709, android.hardware.DataSpace.DATASPACE_DCI_P3, android.hardware.DataSpace.DATASPACE_SRGB_LINEAR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.SurfaceControl.Transaction android.view.SurfaceControl.Transaction setFrameRate(android.view.SurfaceControl, float, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.Surface.FRAME_RATE_COMPATIBILITY_DEFAULT, android.view.Surface.FRAME_RATE_COMPATIBILITY_FIXED_SOURCE}"></val>
        </annotation>
    </item>
    <item name="android.view.SurfaceControl.Transaction android.view.SurfaceControl.Transaction setFrameRate(android.view.SurfaceControl, float, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.Surface.FRAME_RATE_COMPATIBILITY_DEFAULT, android.view.Surface.FRAME_RATE_COMPATIBILITY_FIXED_SOURCE}"></val>
        </annotation>
    </item>
    <item name="android.view.SurfaceControl.Transaction android.view.SurfaceControl.Transaction setFrameRate(android.view.SurfaceControl, float, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.Surface.CHANGE_FRAME_RATE_ONLY_IF_SEAMLESS, android.view.Surface.CHANGE_FRAME_RATE_ALWAYS}"></val>
        </annotation>
    </item>
    <item name="android.view.SurfaceControl.Transaction android.view.SurfaceControl.Transaction setGeometry(android.view.SurfaceControl, android.graphics.Rect, android.graphics.Rect, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.Surface.ROTATION_0, android.view.Surface.ROTATION_90, android.view.Surface.ROTATION_180, android.view.Surface.ROTATION_270}"></val>
        </annotation>
    </item>
    <item name="android.view.SurfaceControl.Transaction void writeToParcel(android.os.Parcel, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.SurfaceHolder.Callback void surfaceChanged(android.view.SurfaceHolder, int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.PixelFormat.RGBA_8888, android.graphics.PixelFormat.RGBX_8888, android.graphics.PixelFormat.RGBA_F16, android.graphics.PixelFormat.RGBA_1010102, android.graphics.PixelFormat.RGB_888, android.graphics.PixelFormat.RGB_565}"></val>
        </annotation>
    </item>
    <item name="android.view.SurfaceView void onFocusChanged(boolean, int, android.graphics.Rect) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.SurfaceView void setSurfaceLifecycle(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.SurfaceView.SURFACE_LIFECYCLE_DEFAULT, android.view.SurfaceView.SURFACE_LIFECYCLE_FOLLOWS_VISIBILITY, android.view.SurfaceView.SURFACE_LIFECYCLE_FOLLOWS_ATTACHMENT}"></val>
        </annotation>
    </item>
    <item name="android.view.VelocityTracker boolean isAxisSupported(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.MotionEvent.AXIS_X, android.view.MotionEvent.AXIS_Y, android.view.MotionEvent.AXIS_SCROLL}"></val>
        </annotation>
    </item>
    <item name="android.view.VelocityTracker float getAxisVelocity(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.MotionEvent.AXIS_X, android.view.MotionEvent.AXIS_Y, android.view.MotionEvent.AXIS_SCROLL}"></val>
        </annotation>
    </item>
    <item name="android.view.VelocityTracker float getAxisVelocity(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.MotionEvent.AXIS_X, android.view.MotionEvent.AXIS_Y, android.view.MotionEvent.AXIS_SCROLL}"></val>
        </annotation>
    </item>
    <item name="android.view.View android.view.View focusSearch(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.View android.view.View keyboardNavigationClusterSearch(android.view.View, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.View boolean dispatchUnhandledMove(android.view.View, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.View java.util.ArrayList&lt;android.view.View&gt; getFocusables(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.View void addFocusables(java.util.ArrayList&lt;android.view.View&gt;, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.View void addFocusables(java.util.ArrayList&lt;android.view.View&gt;, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.View void addFocusables(java.util.ArrayList&lt;android.view.View&gt;, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FOCUSABLES_ALL, android.view.View.FOCUSABLES_TOUCH_MODE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.View void dispatchCreateViewTranslationRequest(java.util.Map&lt;android.view.autofill.AutofillId,long[]&gt;, int[], android.view.translation.TranslationCapability, java.util.List&lt;android.view.translation.ViewTranslationRequest&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationSpec.DATA_FORMAT_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.view.View void dispatchDisplayHint(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}"></val>
        </annotation>
    </item>
    <item name="android.view.View void dispatchProvideAutofillStructure(android.view.ViewStructure, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.View void dispatchVisibilityChanged(android.view.View, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}"></val>
        </annotation>
    </item>
    <item name="android.view.View void dispatchWindowVisibilityChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}"></val>
        </annotation>
    </item>
    <item name="android.view.View void findViewsWithText(java.util.ArrayList&lt;android.view.View&gt;, java.lang.CharSequence, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FIND_VIEWS_WITH_TEXT, android.view.View.FIND_VIEWS_WITH_CONTENT_DESCRIPTION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.View void onCreateViewTranslationRequest(int[], java.util.function.Consumer&lt;android.view.translation.ViewTranslationRequest&gt;) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationSpec.DATA_FORMAT_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.view.View void onCreateVirtualViewTranslationRequests(long[], int[], java.util.function.Consumer&lt;android.view.translation.ViewTranslationRequest&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationSpec.DATA_FORMAT_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.view.View void onDisplayHint(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}"></val>
        </annotation>
    </item>
    <item name="android.view.View void onFocusChanged(boolean, int, android.graphics.Rect) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.View void onProvideAutofillStructure(android.view.ViewStructure, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.View void onRtlPropertiesChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}"></val>
        </annotation>
    </item>
    <item name="android.view.View void onVisibilityChanged(android.view.View, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}"></val>
        </annotation>
    </item>
    <item name="android.view.View void onWindowVisibilityChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}"></val>
        </annotation>
    </item>
    <item name="android.view.View void playSoundEffect(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.SoundEffectConstants.CLICK, android.view.SoundEffectConstants.NAVIGATION_LEFT, android.view.SoundEffectConstants.NAVIGATION_UP, android.view.SoundEffectConstants.NAVIGATION_RIGHT, android.view.SoundEffectConstants.NAVIGATION_DOWN, android.view.SoundEffectConstants.NAVIGATION_REPEAT_LEFT, android.view.SoundEffectConstants.NAVIGATION_REPEAT_UP, android.view.SoundEffectConstants.NAVIGATION_REPEAT_RIGHT, android.view.SoundEffectConstants.NAVIGATION_REPEAT_DOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.View void requestUnbufferedDispatch(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.InputDevice.SOURCE_CLASS_NONE, android.view.InputDevice.SOURCE_CLASS_BUTTON, android.view.InputDevice.SOURCE_CLASS_POINTER, android.view.InputDevice.SOURCE_CLASS_TRACKBALL, android.view.InputDevice.SOURCE_CLASS_POSITION, android.view.InputDevice.SOURCE_CLASS_JOYSTICK}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.View void setAccessibilityDataSensitive(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.ACCESSIBILITY_DATA_SENSITIVE_AUTO, android.view.View.ACCESSIBILITY_DATA_SENSITIVE_YES, android.view.View.ACCESSIBILITY_DATA_SENSITIVE_NO}"></val>
        </annotation>
    </item>
    <item name="android.view.View void setContentSensitivity(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.CONTENT_SENSITIVITY_AUTO, android.view.View.CONTENT_SENSITIVITY_SENSITIVE, android.view.View.CONTENT_SENSITIVITY_NOT_SENSITIVE}"></val>
        </annotation>
    </item>
    <item name="android.view.View void setDrawingCacheQuality(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.DRAWING_CACHE_QUALITY_LOW, android.view.View.DRAWING_CACHE_QUALITY_HIGH, android.view.View.DRAWING_CACHE_QUALITY_AUTO}"></val>
        </annotation>
    </item>
    <item name="android.view.View void setFocusable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.NOT_FOCUSABLE, android.view.View.FOCUSABLE, android.view.View.FOCUSABLE_AUTO}"></val>
        </annotation>
    </item>
    <item name="android.view.View void setHandwritingDelegateFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.HANDWRITING_DELEGATE_FLAG_HOME_DELEGATOR_ALLOWED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.View void setImportantForAutofill(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.IMPORTANT_FOR_AUTOFILL_AUTO, android.view.View.IMPORTANT_FOR_AUTOFILL_YES, android.view.View.IMPORTANT_FOR_AUTOFILL_NO, android.view.View.IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS, android.view.View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS}"></val>
        </annotation>
    </item>
    <item name="android.view.View void setImportantForContentCapture(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.IMPORTANT_FOR_CONTENT_CAPTURE_AUTO, android.view.View.IMPORTANT_FOR_CONTENT_CAPTURE_YES, android.view.View.IMPORTANT_FOR_CONTENT_CAPTURE_NO, android.view.View.IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS, android.view.View.IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS}"></val>
        </annotation>
    </item>
    <item name="android.view.View void setLayerType(int, android.graphics.Paint) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.LAYER_TYPE_NONE, android.view.View.LAYER_TYPE_SOFTWARE, android.view.View.LAYER_TYPE_HARDWARE}"></val>
        </annotation>
    </item>
    <item name="android.view.View void setLayoutDirection(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL, android.view.View.LAYOUT_DIRECTION_INHERIT, android.view.View.LAYOUT_DIRECTION_LOCALE}"></val>
        </annotation>
    </item>
    <item name="android.view.View void setScrollBarStyle(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.SCROLLBARS_INSIDE_OVERLAY, android.view.View.SCROLLBARS_INSIDE_INSET, android.view.View.SCROLLBARS_OUTSIDE_OVERLAY, android.view.View.SCROLLBARS_OUTSIDE_INSET}"></val>
        </annotation>
    </item>
    <item name="android.view.View void setScrollCaptureHint(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.SCROLL_CAPTURE_HINT_AUTO, android.view.View.SCROLL_CAPTURE_HINT_EXCLUDE, android.view.View.SCROLL_CAPTURE_HINT_INCLUDE, android.view.View.SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.View void setScrollIndicators(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.SCROLL_INDICATOR_TOP, android.view.View.SCROLL_INDICATOR_BOTTOM, android.view.View.SCROLL_INDICATOR_LEFT, android.view.View.SCROLL_INDICATOR_RIGHT, android.view.View.SCROLL_INDICATOR_START, android.view.View.SCROLL_INDICATOR_END}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.View void setScrollIndicators(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.SCROLL_INDICATOR_TOP, android.view.View.SCROLL_INDICATOR_BOTTOM, android.view.View.SCROLL_INDICATOR_LEFT, android.view.View.SCROLL_INDICATOR_RIGHT, android.view.View.SCROLL_INDICATOR_START, android.view.View.SCROLL_INDICATOR_END}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.View void setScrollIndicators(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.SCROLL_INDICATOR_TOP, android.view.View.SCROLL_INDICATOR_BOTTOM, android.view.View.SCROLL_INDICATOR_LEFT, android.view.View.SCROLL_INDICATOR_RIGHT, android.view.View.SCROLL_INDICATOR_START, android.view.View.SCROLL_INDICATOR_END}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.View void setTextAlignment(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.TEXT_ALIGNMENT_INHERIT, android.view.View.TEXT_ALIGNMENT_GRAVITY, android.view.View.TEXT_ALIGNMENT_CENTER, android.view.View.TEXT_ALIGNMENT_TEXT_START, android.view.View.TEXT_ALIGNMENT_TEXT_END, android.view.View.TEXT_ALIGNMENT_VIEW_START, android.view.View.TEXT_ALIGNMENT_VIEW_END}"></val>
        </annotation>
    </item>
    <item name="android.view.View void setTransitionVisibility(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}"></val>
        </annotation>
    </item>
    <item name="android.view.View void setVisibility(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}"></val>
        </annotation>
    </item>
    <item name="android.view.View.MeasureSpec int makeMeasureSpec(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.MeasureSpec.UNSPECIFIED, android.view.View.MeasureSpec.EXACTLY, android.view.View.MeasureSpec.AT_MOST}"></val>
        </annotation>
    </item>
    <item name="android.view.ViewGroup void dispatchCreateViewTranslationRequest(java.util.Map&lt;android.view.autofill.AutofillId,long[]&gt;, int[], android.view.translation.TranslationCapability, java.util.List&lt;android.view.translation.ViewTranslationRequest&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationSpec.DATA_FORMAT_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.view.ViewGroup void dispatchProvideAutofillStructure(android.view.ViewStructure, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.ViewStructure void setAutofillType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.AUTOFILL_TYPE_NONE, android.view.View.AUTOFILL_TYPE_TEXT, android.view.View.AUTOFILL_TYPE_TOGGLE, android.view.View.AUTOFILL_TYPE_LIST, android.view.View.AUTOFILL_TYPE_DATE}"></val>
        </annotation>
    </item>
    <item name="android.view.ViewStructure void setImportantForAutofill(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.IMPORTANT_FOR_AUTOFILL_AUTO, android.view.View.IMPORTANT_FOR_AUTOFILL_YES, android.view.View.IMPORTANT_FOR_AUTOFILL_NO, android.view.View.IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS, android.view.View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS}"></val>
        </annotation>
    </item>
    <item name="android.view.ViewTreeObserver.OnWindowVisibilityChangeListener void onWindowVisibilityChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}"></val>
        </annotation>
    </item>
    <item name="android.view.Window void setColorMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.ActivityInfo.COLOR_MODE_DEFAULT, android.content.pm.ActivityInfo.COLOR_MODE_WIDE_COLOR_GAMUT, android.content.pm.ActivityInfo.COLOR_MODE_HDR}"></val>
        </annotation>
    </item>
    <item name="android.view.WindowInsets android.view.RoundedCorner getRoundedCorner(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.RoundedCorner.POSITION_TOP_LEFT, android.view.RoundedCorner.POSITION_TOP_RIGHT, android.view.RoundedCorner.POSITION_BOTTOM_RIGHT, android.view.RoundedCorner.POSITION_BOTTOM_LEFT}"></val>
        </annotation>
    </item>
    <item name="android.view.WindowInsets.Builder android.view.WindowInsets.Builder setRoundedCorner(int, android.view.RoundedCorner) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.RoundedCorner.POSITION_TOP_LEFT, android.view.RoundedCorner.POSITION_TOP_RIGHT, android.view.RoundedCorner.POSITION_BOTTOM_RIGHT, android.view.RoundedCorner.POSITION_BOTTOM_LEFT}"></val>
        </annotation>
    </item>
    <item name="android.view.WindowInsetsAnimation.Callback Callback(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.WindowInsetsAnimation.Callback.DISPATCH_MODE_STOP, android.view.WindowInsetsAnimation.Callback.DISPATCH_MODE_CONTINUE_ON_SUBTREE}"></val>
        </annotation>
    </item>
    <item name="android.view.WindowInsetsController void setSystemBarsAppearance(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS, android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS, android.view.WindowInsetsController.APPEARANCE_TRANSPARENT_CAPTION_BAR_BACKGROUND, android.view.WindowInsetsController.APPEARANCE_LIGHT_CAPTION_BARS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.WindowInsetsController void setSystemBarsAppearance(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS, android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS, android.view.WindowInsetsController.APPEARANCE_TRANSPARENT_CAPTION_BAR_BACKGROUND, android.view.WindowInsetsController.APPEARANCE_LIGHT_CAPTION_BARS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.WindowInsetsController void setSystemBarsBehavior(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.WindowInsetsController.BEHAVIOR_DEFAULT, android.view.WindowInsetsController.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE}"></val>
        </annotation>
    </item>
    <item name="android.view.WindowManager.LayoutParams void setColorMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.content.pm.ActivityInfo.COLOR_MODE_DEFAULT, android.content.pm.ActivityInfo.COLOR_MODE_WIDE_COLOR_GAMUT, android.content.pm.ActivityInfo.COLOR_MODE_HDR}"></val>
        </annotation>
    </item>
    <item name="android.view.WindowManager.LayoutParams void setFitInsetsSides(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.WindowInsets.Side.LEFT, android.view.WindowInsets.Side.TOP, android.view.WindowInsets.Side.RIGHT, android.view.WindowInsets.Side.BOTTOM}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.accessibility.AccessibilityEvent void setContentChangeTypes(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_SUBTREE, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_TEXT, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_STATE_DESCRIPTION, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_APPEARED, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_DISAPPEARED, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_DRAG_STARTED, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_DRAG_DROPPED, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_DRAG_CANCELLED, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_CONTENT_INVALID, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_ERROR, android.view.accessibility.AccessibilityEvent.CONTENT_CHANGE_TYPE_ENABLED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.accessibility.AccessibilityEvent void setEventType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.accessibility.AccessibilityEvent.TYPE_VIEW_CLICKED, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_LONG_CLICKED, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_SELECTED, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_FOCUSED, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED, android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED, android.view.accessibility.AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_HOVER_ENTER, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_HOVER_EXIT, android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_START, android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_END, android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_SCROLLED, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_TEXT_SELECTION_CHANGED, android.view.accessibility.AccessibilityEvent.TYPE_ANNOUNCEMENT, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY, android.view.accessibility.AccessibilityEvent.TYPE_GESTURE_DETECTION_START, android.view.accessibility.AccessibilityEvent.TYPE_GESTURE_DETECTION_END, android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_INTERACTION_START, android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_INTERACTION_END, android.view.accessibility.AccessibilityEvent.TYPE_WINDOWS_CHANGED, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_CONTEXT_CLICKED, android.view.accessibility.AccessibilityEvent.TYPE_ASSIST_READING_CONTEXT, android.view.accessibility.AccessibilityEvent.TYPE_SPEECH_STATE_CHANGE, android.view.accessibility.AccessibilityEvent.TYPE_VIEW_TARGETED_BY_SCROLL}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.accessibility.AccessibilityEvent void setSpeechStateChangeTypes(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.accessibility.AccessibilityEvent.SPEECH_STATE_SPEAKING_START, android.view.accessibility.AccessibilityEvent.SPEECH_STATE_SPEAKING_END, android.view.accessibility.AccessibilityEvent.SPEECH_STATE_LISTENING_START, android.view.accessibility.AccessibilityEvent.SPEECH_STATE_LISTENING_END}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.accessibility.AccessibilityManager int getRecommendedTimeoutMillis(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.accessibility.AccessibilityManager.FLAG_CONTENT_ICONS, android.view.accessibility.AccessibilityManager.FLAG_CONTENT_TEXT, android.view.accessibility.AccessibilityManager.FLAG_CONTENT_CONTROLS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.accessibility.AccessibilityNodeInfo android.view.accessibility.AccessibilityNodeInfo getChild(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_ANCESTORS, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_SIBLINGS, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_HYBRID, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_UNINTERRUPTIBLE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.accessibility.AccessibilityNodeInfo android.view.accessibility.AccessibilityNodeInfo getParent(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_ANCESTORS, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_SIBLINGS, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_HYBRID, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_UNINTERRUPTIBLE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.accessibility.AccessibilityRecord android.view.accessibility.AccessibilityNodeInfo getSource(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_ANCESTORS, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_SIBLINGS, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_HYBRID, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_UNINTERRUPTIBLE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.accessibility.AccessibilityRequestPreparer AccessibilityRequestPreparer(android.view.View, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.accessibility.AccessibilityRequestPreparer.REQUEST_TYPE_EXTRA_DATA}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.accessibility.AccessibilityWindowInfo android.view.accessibility.AccessibilityNodeInfo getRoot(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_ANCESTORS, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_SIBLINGS, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_HYBRID, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST, android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_UNINTERRUPTIBLE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.autofill.AutofillManager.AutofillCallback void onAutofillEvent(android.view.View, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.autofill.AutofillManager.AutofillCallback.EVENT_INPUT_SHOWN, android.view.autofill.AutofillManager.AutofillCallback.EVENT_INPUT_HIDDEN, android.view.autofill.AutofillManager.AutofillCallback.EVENT_INPUT_UNAVAILABLE}"></val>
        </annotation>
    </item>
    <item name="android.view.autofill.AutofillManager.AutofillCallback void onAutofillEvent(android.view.View, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.autofill.AutofillManager.AutofillCallback.EVENT_INPUT_SHOWN, android.view.autofill.AutofillManager.AutofillCallback.EVENT_INPUT_HIDDEN, android.view.autofill.AutofillManager.AutofillCallback.EVENT_INPUT_UNAVAILABLE}"></val>
        </annotation>
    </item>
    <item name="android.view.contentcapture.ContentCaptureCondition ContentCaptureCondition(android.content.LocusId, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.contentcapture.ContentCaptureCondition.FLAG_IS_REGEX}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.contentcapture.DataRemovalRequest.Builder android.view.contentcapture.DataRemovalRequest.Builder addLocusId(android.content.LocusId, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.contentcapture.DataRemovalRequest.FLAG_IS_PREFIX}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.contentcapture.DataShareWriteAdapter void onError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.contentcapture.ContentCaptureManager.DATA_SHARE_ERROR_UNKNOWN, android.view.contentcapture.ContentCaptureManager.DATA_SHARE_ERROR_CONCURRENT_REQUEST, android.view.contentcapture.ContentCaptureManager.DATA_SHARE_ERROR_TIMEOUT_INTERRUPTED}"></val>
            <val name="flag" val="false"></val>
        </annotation>
    </item>
    <item name="android.view.displayhash.DisplayHashResultCallback void onDisplayHashError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.displayhash.DisplayHashResultCallback.DISPLAY_HASH_ERROR_UNKNOWN, android.view.displayhash.DisplayHashResultCallback.DISPLAY_HASH_ERROR_INVALID_BOUNDS, android.view.displayhash.DisplayHashResultCallback.DISPLAY_HASH_ERROR_MISSING_WINDOW, android.view.displayhash.DisplayHashResultCallback.DISPLAY_HASH_ERROR_NOT_VISIBLE_ON_SCREEN, android.view.displayhash.DisplayHashResultCallback.DISPLAY_HASH_ERROR_INVALID_HASH_ALGORITHM, android.view.displayhash.DisplayHashResultCallback.DISPLAY_HASH_ERROR_TOO_MANY_REQUESTS}"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.ConnectionlessHandwritingCallback void onError(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.ConnectionlessHandwritingCallback.CONNECTIONLESS_HANDWRITING_ERROR_NO_TEXT_RECOGNIZED, android.view.inputmethod.ConnectionlessHandwritingCallback.CONNECTIONLESS_HANDWRITING_ERROR_UNSUPPORTED, android.view.inputmethod.ConnectionlessHandwritingCallback.CONNECTIONLESS_HANDWRITING_ERROR_OTHER}"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.DeleteGesture.Builder android.view.inputmethod.DeleteGesture.Builder setGranularity(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.HandwritingGesture.GRANULARITY_CHARACTER, android.view.inputmethod.HandwritingGesture.GRANULARITY_WORD}"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.DeleteRangeGesture.Builder android.view.inputmethod.DeleteRangeGesture.Builder setGranularity(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.HandwritingGesture.GRANULARITY_CHARACTER, android.view.inputmethod.HandwritingGesture.GRANULARITY_WORD}"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.EditorInfo android.view.inputmethod.SurroundingText getInitialSurroundingText(int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputConnection.GET_TEXT_WITH_STYLES}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.EditorInfo java.lang.CharSequence getInitialSelectedText(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputConnection.GET_TEXT_WITH_STYLES}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.EditorInfo java.lang.CharSequence getInitialTextAfterCursor(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputConnection.GET_TEXT_WITH_STYLES}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.EditorInfo java.lang.CharSequence getInitialTextBeforeCursor(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputConnection.GET_TEXT_WITH_STYLES}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.EditorInfo void setInitialToolType(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.MotionEvent.TOOL_TYPE_UNKNOWN, android.view.MotionEvent.TOOL_TYPE_FINGER, android.view.MotionEvent.TOOL_TYPE_STYLUS, android.view.MotionEvent.TOOL_TYPE_MOUSE, android.view.MotionEvent.TOOL_TYPE_ERASER}"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputConnection android.view.inputmethod.SurroundingText getSurroundingText(int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputConnection.GET_TEXT_WITH_STYLES}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputConnection boolean requestCursorUpdates(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputConnection.CURSOR_UPDATE_IMMEDIATE, android.view.inputmethod.InputConnection.CURSOR_UPDATE_MONITOR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputConnection boolean requestCursorUpdates(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputConnection.CURSOR_UPDATE_FILTER_EDITOR_BOUNDS, android.view.inputmethod.InputConnection.CURSOR_UPDATE_FILTER_CHARACTER_BOUNDS, android.view.inputmethod.InputConnection.CURSOR_UPDATE_FILTER_INSERTION_MARKER, android.view.inputmethod.InputConnection.CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDS, android.view.inputmethod.InputConnection.CURSOR_UPDATE_FILTER_TEXT_APPEARANCE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputConnectionWrapper boolean requestCursorUpdates(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputConnection.CURSOR_UPDATE_IMMEDIATE, android.view.inputmethod.InputConnection.CURSOR_UPDATE_MONITOR}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputConnectionWrapper boolean requestCursorUpdates(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputConnection.CURSOR_UPDATE_FILTER_EDITOR_BOUNDS, android.view.inputmethod.InputConnection.CURSOR_UPDATE_FILTER_CHARACTER_BOUNDS, android.view.inputmethod.InputConnection.CURSOR_UPDATE_FILTER_INSERTION_MARKER, android.view.inputmethod.InputConnection.CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDS, android.view.inputmethod.InputConnection.CURSOR_UPDATE_FILTER_TEXT_APPEARANCE}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethod void showSoftInput(int, android.os.ResultReceiver) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethod.SHOW_EXPLICIT, android.view.inputmethod.InputMethod.SHOW_FORCED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodManager boolean hideSoftInputFromWindow(android.os.IBinder, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.HIDE_IMPLICIT_ONLY, android.view.inputmethod.InputMethodManager.HIDE_NOT_ALWAYS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodManager boolean hideSoftInputFromWindow(android.os.IBinder, int, android.os.ResultReceiver) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.HIDE_IMPLICIT_ONLY, android.view.inputmethod.InputMethodManager.HIDE_NOT_ALWAYS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodManager boolean showSoftInput(android.view.View, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT, android.view.inputmethod.InputMethodManager.SHOW_FORCED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodManager boolean showSoftInput(android.view.View, int, android.os.ResultReceiver) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT, android.view.inputmethod.InputMethodManager.SHOW_FORCED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodManager void acceptStylusHandwritingDelegation(android.view.View, java.lang.String, int, java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Boolean&gt;) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.HANDWRITING_DELEGATE_FLAG_HOME_DELEGATOR_ALLOWED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodManager void hideSoftInputFromInputMethod(android.os.IBinder, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.HIDE_IMPLICIT_ONLY, android.view.inputmethod.InputMethodManager.HIDE_NOT_ALWAYS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodManager void showSoftInputFromInputMethod(android.os.IBinder, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT, android.view.inputmethod.InputMethodManager.SHOW_FORCED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodManager void toggleSoftInput(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT, android.view.inputmethod.InputMethodManager.SHOW_FORCED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodManager void toggleSoftInput(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.HIDE_IMPLICIT_ONLY, android.view.inputmethod.InputMethodManager.HIDE_NOT_ALWAYS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodManager void toggleSoftInputFromWindow(android.os.IBinder, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT, android.view.inputmethod.InputMethodManager.SHOW_FORCED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodManager void toggleSoftInputFromWindow(android.os.IBinder, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.HIDE_IMPLICIT_ONLY, android.view.inputmethod.InputMethodManager.HIDE_NOT_ALWAYS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodSession void toggleSoftInput(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT, android.view.inputmethod.InputMethodManager.SHOW_FORCED}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.InputMethodSession void toggleSoftInput(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.InputMethodManager.HIDE_IMPLICIT_ONLY, android.view.inputmethod.InputMethodManager.HIDE_NOT_ALWAYS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.SelectGesture.Builder android.view.inputmethod.SelectGesture.Builder setGranularity(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.HandwritingGesture.GRANULARITY_CHARACTER, android.view.inputmethod.HandwritingGesture.GRANULARITY_WORD}"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.SelectRangeGesture.Builder android.view.inputmethod.SelectRangeGesture.Builder setGranularity(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.HandwritingGesture.GRANULARITY_CHARACTER, android.view.inputmethod.HandwritingGesture.GRANULARITY_WORD}"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.TextAppearanceInfo.Builder android.view.inputmethod.TextAppearanceInfo.Builder setLineBreakStyle(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_NONE, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_LOOSE, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_NORMAL, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_STRICT, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_UNSPECIFIED, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_NO_BREAK, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_AUTO}"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.TextAppearanceInfo.Builder android.view.inputmethod.TextAppearanceInfo.Builder setLineBreakWordStyle(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreakConfig.LINE_BREAK_WORD_STYLE_NONE, android.graphics.text.LineBreakConfig.LINE_BREAK_WORD_STYLE_PHRASE, android.graphics.text.LineBreakConfig.LINE_BREAK_WORD_STYLE_UNSPECIFIED, android.graphics.text.LineBreakConfig.LINE_BREAK_WORD_STYLE_AUTO}"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.TextAppearanceInfo.Builder android.view.inputmethod.TextAppearanceInfo.Builder setTextStyle(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Typeface.NORMAL, android.graphics.Typeface.BOLD, android.graphics.Typeface.ITALIC, android.graphics.Typeface.BOLD_ITALIC}"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.TextBoundsInfoResult TextBoundsInfoResult(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.TextBoundsInfoResult.CODE_UNSUPPORTED, android.view.inputmethod.TextBoundsInfoResult.CODE_SUCCESS, android.view.inputmethod.TextBoundsInfoResult.CODE_FAILED, android.view.inputmethod.TextBoundsInfoResult.CODE_CANCELLED}"></val>
        </annotation>
    </item>
    <item name="android.view.inputmethod.TextBoundsInfoResult TextBoundsInfoResult(int, android.view.inputmethod.TextBoundsInfo) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.inputmethod.TextBoundsInfoResult.CODE_UNSUPPORTED, android.view.inputmethod.TextBoundsInfoResult.CODE_SUCCESS, android.view.inputmethod.TextBoundsInfoResult.CODE_FAILED, android.view.inputmethod.TextBoundsInfoResult.CODE_CANCELLED}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.ConversationAction.Builder Builder(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.view.textclassifier.ConversationAction.TYPE_VIEW_CALENDAR, android.view.textclassifier.ConversationAction.TYPE_VIEW_MAP, android.view.textclassifier.ConversationAction.TYPE_TRACK_FLIGHT, android.view.textclassifier.ConversationAction.TYPE_OPEN_URL, android.view.textclassifier.ConversationAction.TYPE_SEND_SMS, android.view.textclassifier.ConversationAction.TYPE_CALL_PHONE, android.view.textclassifier.ConversationAction.TYPE_SEND_EMAIL, android.view.textclassifier.ConversationAction.TYPE_TEXT_REPLY, android.view.textclassifier.ConversationAction.TYPE_CREATE_REMINDER, android.view.textclassifier.ConversationAction.TYPE_SHARE_LOCATION}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.ConversationActions.Request.Builder android.view.textclassifier.ConversationActions.Request.Builder setHints(java.util.List&lt;java.lang.String&gt;) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.view.textclassifier.ConversationActions.Request.HINT_FOR_NOTIFICATION, android.view.textclassifier.ConversationActions.Request.HINT_FOR_IN_APP}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.SelectionEvent android.view.textclassifier.SelectionEvent createSelectionActionEvent(int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.textclassifier.SelectionEvent.ACTION_OVERTYPE, android.view.textclassifier.SelectionEvent.ACTION_COPY, android.view.textclassifier.SelectionEvent.ACTION_PASTE, android.view.textclassifier.SelectionEvent.ACTION_CUT, android.view.textclassifier.SelectionEvent.ACTION_SHARE, android.view.textclassifier.SelectionEvent.ACTION_SMART_SHARE, android.view.textclassifier.SelectionEvent.ACTION_DRAG, android.view.textclassifier.SelectionEvent.ACTION_ABANDON, android.view.textclassifier.SelectionEvent.ACTION_OTHER, android.view.textclassifier.SelectionEvent.ACTION_SELECT_ALL, android.view.textclassifier.SelectionEvent.ACTION_RESET}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.SelectionEvent android.view.textclassifier.SelectionEvent createSelectionActionEvent(int, int, int, android.view.textclassifier.TextClassification) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.textclassifier.SelectionEvent.ACTION_OVERTYPE, android.view.textclassifier.SelectionEvent.ACTION_COPY, android.view.textclassifier.SelectionEvent.ACTION_PASTE, android.view.textclassifier.SelectionEvent.ACTION_CUT, android.view.textclassifier.SelectionEvent.ACTION_SHARE, android.view.textclassifier.SelectionEvent.ACTION_SMART_SHARE, android.view.textclassifier.SelectionEvent.ACTION_DRAG, android.view.textclassifier.SelectionEvent.ACTION_ABANDON, android.view.textclassifier.SelectionEvent.ACTION_OTHER, android.view.textclassifier.SelectionEvent.ACTION_SELECT_ALL, android.view.textclassifier.SelectionEvent.ACTION_RESET}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.SelectionEvent android.view.textclassifier.SelectionEvent createSelectionStartedEvent(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.textclassifier.SelectionEvent.INVOCATION_MANUAL, android.view.textclassifier.SelectionEvent.INVOCATION_LINK, android.view.textclassifier.SelectionEvent.INVOCATION_UNKNOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.SelectionEvent boolean isTerminal(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.textclassifier.SelectionEvent.ACTION_OVERTYPE, android.view.textclassifier.SelectionEvent.ACTION_COPY, android.view.textclassifier.SelectionEvent.ACTION_PASTE, android.view.textclassifier.SelectionEvent.ACTION_CUT, android.view.textclassifier.SelectionEvent.ACTION_SHARE, android.view.textclassifier.SelectionEvent.ACTION_SMART_SHARE, android.view.textclassifier.SelectionEvent.ACTION_DRAG, android.view.textclassifier.SelectionEvent.ACTION_ABANDON, android.view.textclassifier.SelectionEvent.ACTION_OTHER, android.view.textclassifier.SelectionEvent.ACTION_SELECT_ALL, android.view.textclassifier.SelectionEvent.ACTION_RESET, android.view.textclassifier.SelectionEvent.EVENT_SELECTION_STARTED, android.view.textclassifier.SelectionEvent.EVENT_SELECTION_MODIFIED, android.view.textclassifier.SelectionEvent.EVENT_SMART_SELECTION_SINGLE, android.view.textclassifier.SelectionEvent.EVENT_SMART_SELECTION_MULTI, android.view.textclassifier.SelectionEvent.EVENT_AUTO_SELECTION}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.TextClassification float getConfidenceScore(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.view.textclassifier.TextClassifier.TYPE_UNKNOWN, android.view.textclassifier.TextClassifier.TYPE_OTHER, android.view.textclassifier.TextClassifier.TYPE_EMAIL, android.view.textclassifier.TextClassifier.TYPE_PHONE, android.view.textclassifier.TextClassifier.TYPE_ADDRESS, android.view.textclassifier.TextClassifier.TYPE_URL, android.view.textclassifier.TextClassifier.TYPE_DATE, android.view.textclassifier.TextClassifier.TYPE_DATE_TIME, android.view.textclassifier.TextClassifier.TYPE_FLIGHT_NUMBER}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.TextClassification.Builder android.view.textclassifier.TextClassification.Builder setEntityType(java.lang.String, float) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.view.textclassifier.TextClassifier.TYPE_UNKNOWN, android.view.textclassifier.TextClassifier.TYPE_OTHER, android.view.textclassifier.TextClassifier.TYPE_EMAIL, android.view.textclassifier.TextClassifier.TYPE_PHONE, android.view.textclassifier.TextClassifier.TYPE_ADDRESS, android.view.textclassifier.TextClassifier.TYPE_URL, android.view.textclassifier.TextClassifier.TYPE_DATE, android.view.textclassifier.TextClassifier.TYPE_DATE_TIME, android.view.textclassifier.TextClassifier.TYPE_FLIGHT_NUMBER}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.TextClassificationContext.Builder Builder(java.lang.String, java.lang.String) 1">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.view.textclassifier.TextClassifier.WIDGET_TYPE_TEXTVIEW, android.view.textclassifier.TextClassifier.WIDGET_TYPE_EDITTEXT, android.view.textclassifier.TextClassifier.WIDGET_TYPE_UNSELECTABLE_TEXTVIEW, android.view.textclassifier.TextClassifier.WIDGET_TYPE_WEBVIEW, android.view.textclassifier.TextClassifier.WIDGET_TYPE_EDIT_WEBVIEW, android.view.textclassifier.TextClassifier.WIDGET_TYPE_CUSTOM_TEXTVIEW, android.view.textclassifier.TextClassifier.WIDGET_TYPE_CUSTOM_EDITTEXT, android.view.textclassifier.TextClassifier.WIDGET_TYPE_CUSTOM_UNSELECTABLE_TEXTVIEW, android.view.textclassifier.TextClassifier.WIDGET_TYPE_NOTIFICATION, android.view.textclassifier.TextClassifier.WIDGET_TYPE_CLIPBOARD, android.view.textclassifier.TextClassifier.WIDGET_TYPE_UNKNOWN}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.TextClassifierEvent.ConversationActionsEvent.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_STARTED, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_MODIFIED, android.view.textclassifier.TextClassifierEvent.TYPE_SMART_SELECTION_SINGLE, android.view.textclassifier.TextClassifierEvent.TYPE_SMART_SELECTION_MULTI, android.view.textclassifier.TextClassifierEvent.TYPE_AUTO_SELECTION, android.view.textclassifier.TextClassifierEvent.TYPE_ACTIONS_SHOWN, android.view.textclassifier.TextClassifierEvent.TYPE_LINK_CLICKED, android.view.textclassifier.TextClassifierEvent.TYPE_OVERTYPE, android.view.textclassifier.TextClassifierEvent.TYPE_COPY_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_PASTE_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_CUT_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SHARE_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SMART_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_DRAG, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_DESTROYED, android.view.textclassifier.TextClassifierEvent.TYPE_OTHER_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SELECT_ALL, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_RESET, android.view.textclassifier.TextClassifierEvent.TYPE_MANUAL_REPLY, android.view.textclassifier.TextClassifierEvent.TYPE_ACTIONS_GENERATED, android.view.textclassifier.TextClassifierEvent.TYPE_LINKS_GENERATED}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.TextClassifierEvent.LanguageDetectionEvent.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_STARTED, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_MODIFIED, android.view.textclassifier.TextClassifierEvent.TYPE_SMART_SELECTION_SINGLE, android.view.textclassifier.TextClassifierEvent.TYPE_SMART_SELECTION_MULTI, android.view.textclassifier.TextClassifierEvent.TYPE_AUTO_SELECTION, android.view.textclassifier.TextClassifierEvent.TYPE_ACTIONS_SHOWN, android.view.textclassifier.TextClassifierEvent.TYPE_LINK_CLICKED, android.view.textclassifier.TextClassifierEvent.TYPE_OVERTYPE, android.view.textclassifier.TextClassifierEvent.TYPE_COPY_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_PASTE_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_CUT_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SHARE_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SMART_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_DRAG, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_DESTROYED, android.view.textclassifier.TextClassifierEvent.TYPE_OTHER_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SELECT_ALL, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_RESET, android.view.textclassifier.TextClassifierEvent.TYPE_MANUAL_REPLY, android.view.textclassifier.TextClassifierEvent.TYPE_ACTIONS_GENERATED, android.view.textclassifier.TextClassifierEvent.TYPE_LINKS_GENERATED}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.TextClassifierEvent.TextLinkifyEvent.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_STARTED, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_MODIFIED, android.view.textclassifier.TextClassifierEvent.TYPE_SMART_SELECTION_SINGLE, android.view.textclassifier.TextClassifierEvent.TYPE_SMART_SELECTION_MULTI, android.view.textclassifier.TextClassifierEvent.TYPE_AUTO_SELECTION, android.view.textclassifier.TextClassifierEvent.TYPE_ACTIONS_SHOWN, android.view.textclassifier.TextClassifierEvent.TYPE_LINK_CLICKED, android.view.textclassifier.TextClassifierEvent.TYPE_OVERTYPE, android.view.textclassifier.TextClassifierEvent.TYPE_COPY_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_PASTE_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_CUT_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SHARE_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SMART_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_DRAG, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_DESTROYED, android.view.textclassifier.TextClassifierEvent.TYPE_OTHER_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SELECT_ALL, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_RESET, android.view.textclassifier.TextClassifierEvent.TYPE_MANUAL_REPLY, android.view.textclassifier.TextClassifierEvent.TYPE_ACTIONS_GENERATED, android.view.textclassifier.TextClassifierEvent.TYPE_LINKS_GENERATED}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_STARTED, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_MODIFIED, android.view.textclassifier.TextClassifierEvent.TYPE_SMART_SELECTION_SINGLE, android.view.textclassifier.TextClassifierEvent.TYPE_SMART_SELECTION_MULTI, android.view.textclassifier.TextClassifierEvent.TYPE_AUTO_SELECTION, android.view.textclassifier.TextClassifierEvent.TYPE_ACTIONS_SHOWN, android.view.textclassifier.TextClassifierEvent.TYPE_LINK_CLICKED, android.view.textclassifier.TextClassifierEvent.TYPE_OVERTYPE, android.view.textclassifier.TextClassifierEvent.TYPE_COPY_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_PASTE_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_CUT_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SHARE_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SMART_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_DRAG, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_DESTROYED, android.view.textclassifier.TextClassifierEvent.TYPE_OTHER_ACTION, android.view.textclassifier.TextClassifierEvent.TYPE_SELECT_ALL, android.view.textclassifier.TextClassifierEvent.TYPE_SELECTION_RESET, android.view.textclassifier.TextClassifierEvent.TYPE_MANUAL_REPLY, android.view.textclassifier.TextClassifierEvent.TYPE_ACTIONS_GENERATED, android.view.textclassifier.TextClassifierEvent.TYPE_LINKS_GENERATED}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.TextLinks int apply(android.text.Spannable, int, java.util.function.Function&lt;android.view.textclassifier.TextLinks.TextLink,android.view.textclassifier.TextLinks.TextLinkSpan&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.textclassifier.TextLinks.APPLY_STRATEGY_IGNORE, android.view.textclassifier.TextLinks.APPLY_STRATEGY_REPLACE}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.TextLinks.TextLink float getConfidenceScore(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.view.textclassifier.TextClassifier.TYPE_UNKNOWN, android.view.textclassifier.TextClassifier.TYPE_OTHER, android.view.textclassifier.TextClassifier.TYPE_EMAIL, android.view.textclassifier.TextClassifier.TYPE_PHONE, android.view.textclassifier.TextClassifier.TYPE_ADDRESS, android.view.textclassifier.TextClassifier.TYPE_URL, android.view.textclassifier.TextClassifier.TYPE_DATE, android.view.textclassifier.TextClassifier.TYPE_DATE_TIME, android.view.textclassifier.TextClassifier.TYPE_FLIGHT_NUMBER}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.TextSelection float getConfidenceScore(java.lang.String) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.view.textclassifier.TextClassifier.TYPE_UNKNOWN, android.view.textclassifier.TextClassifier.TYPE_OTHER, android.view.textclassifier.TextClassifier.TYPE_EMAIL, android.view.textclassifier.TextClassifier.TYPE_PHONE, android.view.textclassifier.TextClassifier.TYPE_ADDRESS, android.view.textclassifier.TextClassifier.TYPE_URL, android.view.textclassifier.TextClassifier.TYPE_DATE, android.view.textclassifier.TextClassifier.TYPE_DATE_TIME, android.view.textclassifier.TextClassifier.TYPE_FLIGHT_NUMBER}"></val>
        </annotation>
    </item>
    <item name="android.view.textclassifier.TextSelection.Builder android.view.textclassifier.TextSelection.Builder setEntityType(java.lang.String, float) 0">
        <annotation name="androidx.annotation.StringDef">
            <val name="value" val="{android.view.textclassifier.TextClassifier.TYPE_UNKNOWN, android.view.textclassifier.TextClassifier.TYPE_OTHER, android.view.textclassifier.TextClassifier.TYPE_EMAIL, android.view.textclassifier.TextClassifier.TYPE_PHONE, android.view.textclassifier.TextClassifier.TYPE_ADDRESS, android.view.textclassifier.TextClassifier.TYPE_URL, android.view.textclassifier.TextClassifier.TYPE_DATE, android.view.textclassifier.TextClassifier.TYPE_DATE_TIME, android.view.textclassifier.TextClassifier.TYPE_FLIGHT_NUMBER}"></val>
        </annotation>
    </item>
    <item name="android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams.Builder android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams.Builder setSupportedAttributes(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.textservice.SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY, android.view.textservice.SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO, android.view.textservice.SuggestionsInfo.RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS, android.view.textservice.SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_GRAMMAR_ERROR, android.view.textservice.SuggestionsInfo.RESULT_ATTR_DONT_SHOW_UI_FOR_SUGGESTIONS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.textservice.SuggestionsInfo SuggestionsInfo(int, java.lang.String[], int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.textservice.SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY, android.view.textservice.SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO, android.view.textservice.SuggestionsInfo.RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS, android.view.textservice.SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_GRAMMAR_ERROR, android.view.textservice.SuggestionsInfo.RESULT_ATTR_DONT_SHOW_UI_FOR_SUGGESTIONS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.translation.TranslationContext.Builder android.view.translation.TranslationContext.Builder setTranslationFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationContext.FLAG_LOW_LATENCY, android.view.translation.TranslationContext.FLAG_TRANSLITERATION, android.view.translation.TranslationContext.FLAG_DEFINITIONS}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.translation.TranslationManager java.util.Set&lt;android.view.translation.TranslationCapability&gt; getOnDeviceTranslationCapabilities(int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationSpec.DATA_FORMAT_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.view.translation.TranslationManager java.util.Set&lt;android.view.translation.TranslationCapability&gt; getOnDeviceTranslationCapabilities(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationSpec.DATA_FORMAT_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.view.translation.TranslationRequest.Builder android.view.translation.TranslationRequest.Builder setFlags(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationRequest.FLAG_TRANSLATION_RESULT, android.view.translation.TranslationRequest.FLAG_DICTIONARY_RESULT, android.view.translation.TranslationRequest.FLAG_TRANSLITERATION_RESULT, android.view.translation.TranslationRequest.FLAG_PARTIAL_RESPONSES}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.view.translation.TranslationResponse.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationResponse.TRANSLATION_STATUS_SUCCESS, android.view.translation.TranslationResponse.TRANSLATION_STATUS_UNKNOWN_ERROR, android.view.translation.TranslationResponse.TRANSLATION_STATUS_CONTEXT_UNSUPPORTED}"></val>
        </annotation>
    </item>
    <item name="android.view.translation.TranslationResponseValue.Builder Builder(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationResponseValue.STATUS_SUCCESS, android.view.translation.TranslationResponseValue.STATUS_ERROR}"></val>
        </annotation>
    </item>
    <item name="android.view.translation.TranslationSpec TranslationSpec(android.icu.util.ULocale, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationSpec.DATA_FORMAT_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.webkit.ServiceWorkerWebSettings void setCacheMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.webkit.WebSettings.LOAD_DEFAULT, android.webkit.WebSettings.LOAD_NORMAL, android.webkit.WebSettings.LOAD_CACHE_ELSE_NETWORK, android.webkit.WebSettings.LOAD_NO_CACHE, android.webkit.WebSettings.LOAD_CACHE_ONLY}"></val>
        </annotation>
    </item>
    <item name="android.webkit.TracingConfig.Builder android.webkit.TracingConfig.Builder addCategories(int...) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.webkit.TracingConfig.CATEGORIES_NONE, android.webkit.TracingConfig.CATEGORIES_ALL, android.webkit.TracingConfig.CATEGORIES_ANDROID_WEBVIEW, android.webkit.TracingConfig.CATEGORIES_WEB_DEVELOPER, android.webkit.TracingConfig.CATEGORIES_INPUT_LATENCY, android.webkit.TracingConfig.CATEGORIES_RENDERING, android.webkit.TracingConfig.CATEGORIES_JAVASCRIPT_AND_RENDERING, android.webkit.TracingConfig.CATEGORIES_FRAME_VIEWER}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.webkit.TracingConfig.Builder android.webkit.TracingConfig.Builder setTracingMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.webkit.TracingConfig.RECORD_UNTIL_FULL, android.webkit.TracingConfig.RECORD_CONTINUOUSLY}"></val>
        </annotation>
    </item>
    <item name="android.webkit.WebSettings void setCacheMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.webkit.WebSettings.LOAD_DEFAULT, android.webkit.WebSettings.LOAD_NORMAL, android.webkit.WebSettings.LOAD_CACHE_ELSE_NETWORK, android.webkit.WebSettings.LOAD_NO_CACHE, android.webkit.WebSettings.LOAD_CACHE_ONLY}"></val>
        </annotation>
    </item>
    <item name="android.webkit.WebSettings void setDisabledActionModeMenuItems(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.webkit.WebSettings.MENU_ITEM_NONE, android.webkit.WebSettings.MENU_ITEM_SHARE, android.webkit.WebSettings.MENU_ITEM_WEB_SEARCH, android.webkit.WebSettings.MENU_ITEM_PROCESS_TEXT}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.webkit.WebSettings void setForceDark(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.webkit.WebSettings.FORCE_DARK_OFF, android.webkit.WebSettings.FORCE_DARK_AUTO, android.webkit.WebSettings.FORCE_DARK_ON}"></val>
        </annotation>
    </item>
    <item name="android.webkit.WebView void dispatchCreateViewTranslationRequest(java.util.Map&lt;android.view.autofill.AutofillId,long[]&gt;, int[], android.view.translation.TranslationCapability, java.util.List&lt;android.view.translation.ViewTranslationRequest&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationSpec.DATA_FORMAT_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.webkit.WebView void onCreateVirtualViewTranslationRequests(long[], int[], java.util.function.Consumer&lt;android.view.translation.ViewTranslationRequest&gt;) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.translation.TranslationSpec.DATA_FORMAT_TEXT}"></val>
        </annotation>
    </item>
    <item name="android.webkit.WebView void setRendererPriorityPolicy(int, boolean) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.webkit.WebView.RENDERER_PRIORITY_WAIVED, android.webkit.WebView.RENDERER_PRIORITY_BOUND, android.webkit.WebView.RENDERER_PRIORITY_IMPORTANT}"></val>
        </annotation>
    </item>
    <item name="android.webkit.WebViewClient void onSafeBrowsingHit(android.webkit.WebView, android.webkit.WebResourceRequest, int, android.webkit.SafeBrowsingResponse) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.webkit.WebViewClient.SAFE_BROWSING_THREAT_UNKNOWN, android.webkit.WebViewClient.SAFE_BROWSING_THREAT_MALWARE, android.webkit.WebViewClient.SAFE_BROWSING_THREAT_PHISHING, android.webkit.WebViewClient.SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE, android.webkit.WebViewClient.SAFE_BROWSING_THREAT_BILLING}"></val>
        </annotation>
    </item>
    <item name="android.widget.AdapterView void setFocusable(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.NOT_FOCUSABLE, android.view.View.FOCUSABLE, android.view.View.FOCUSABLE_AUTO}"></val>
        </annotation>
    </item>
    <item name="android.widget.AutoCompleteTextView void setInputMethodMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.ListPopupWindow.INPUT_METHOD_FROM_FOCUSABLE, android.widget.ListPopupWindow.INPUT_METHOD_NEEDED, android.widget.ListPopupWindow.INPUT_METHOD_NOT_NEEDED}"></val>
        </annotation>
    </item>
    <item name="android.widget.GridLayout void setAlignmentMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.GridLayout.ALIGN_BOUNDS, android.widget.GridLayout.ALIGN_MARGINS}"></val>
        </annotation>
    </item>
    <item name="android.widget.GridLayout void setOrientation(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.GridLayout.HORIZONTAL, android.widget.GridLayout.VERTICAL}"></val>
        </annotation>
    </item>
    <item name="android.widget.GridView void setStretchMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.GridView.NO_STRETCH, android.widget.GridView.STRETCH_SPACING, android.widget.GridView.STRETCH_COLUMN_WIDTH, android.widget.GridView.STRETCH_SPACING_UNIFORM}"></val>
        </annotation>
    </item>
    <item name="android.widget.LinearLayout void onRtlPropertiesChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}"></val>
        </annotation>
    </item>
    <item name="android.widget.LinearLayout void setOrientation(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.LinearLayout.HORIZONTAL, android.widget.LinearLayout.VERTICAL}"></val>
        </annotation>
    </item>
    <item name="android.widget.LinearLayout void setShowDividers(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.LinearLayout.SHOW_DIVIDER_NONE, android.widget.LinearLayout.SHOW_DIVIDER_BEGINNING, android.widget.LinearLayout.SHOW_DIVIDER_MIDDLE, android.widget.LinearLayout.SHOW_DIVIDER_END}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.widget.Magnifier.Builder android.widget.Magnifier.Builder setSourceBounds(int, int, int, int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.Magnifier.SOURCE_BOUND_MAX_IN_SURFACE, android.widget.Magnifier.SOURCE_BOUND_MAX_VISIBLE}"></val>
        </annotation>
    </item>
    <item name="android.widget.Magnifier.Builder android.widget.Magnifier.Builder setSourceBounds(int, int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.Magnifier.SOURCE_BOUND_MAX_IN_SURFACE, android.widget.Magnifier.SOURCE_BOUND_MAX_VISIBLE}"></val>
        </annotation>
    </item>
    <item name="android.widget.Magnifier.Builder android.widget.Magnifier.Builder setSourceBounds(int, int, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.Magnifier.SOURCE_BOUND_MAX_IN_SURFACE, android.widget.Magnifier.SOURCE_BOUND_MAX_VISIBLE}"></val>
        </annotation>
    </item>
    <item name="android.widget.Magnifier.Builder android.widget.Magnifier.Builder setSourceBounds(int, int, int, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.Magnifier.SOURCE_BOUND_MAX_IN_SURFACE, android.widget.Magnifier.SOURCE_BOUND_MAX_VISIBLE}"></val>
        </annotation>
    </item>
    <item name="android.widget.NumberPicker.OnScrollListener void onScrollStateChange(android.widget.NumberPicker, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.NumberPicker.OnScrollListener.SCROLL_STATE_IDLE, android.widget.NumberPicker.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL, android.widget.NumberPicker.OnScrollListener.SCROLL_STATE_FLING}"></val>
        </annotation>
    </item>
    <item name="android.widget.PopupWindow void setSoftInputMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED, android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_UNCHANGED, android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN, android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN, android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE, android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE, android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_UNSPECIFIED, android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE, android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN, android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING, android.view.WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION}"></val>
            <val name="flag" val="true"></val>
        </annotation>
    </item>
    <item name="android.widget.RemoteViews void setFloatDimen(int, java.lang.String, float, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.TypedValue.COMPLEX_UNIT_PX, android.util.TypedValue.COMPLEX_UNIT_DIP, android.util.TypedValue.COMPLEX_UNIT_SP, android.util.TypedValue.COMPLEX_UNIT_PT, android.util.TypedValue.COMPLEX_UNIT_IN, android.util.TypedValue.COMPLEX_UNIT_MM}"></val>
        </annotation>
    </item>
    <item name="android.widget.RemoteViews void setIntDimen(int, java.lang.String, float, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.TypedValue.COMPLEX_UNIT_PX, android.util.TypedValue.COMPLEX_UNIT_DIP, android.util.TypedValue.COMPLEX_UNIT_SP, android.util.TypedValue.COMPLEX_UNIT_PT, android.util.TypedValue.COMPLEX_UNIT_IN, android.util.TypedValue.COMPLEX_UNIT_MM}"></val>
        </annotation>
    </item>
    <item name="android.widget.RemoteViews void setViewLayoutHeight(int, float, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.TypedValue.COMPLEX_UNIT_PX, android.util.TypedValue.COMPLEX_UNIT_DIP, android.util.TypedValue.COMPLEX_UNIT_SP, android.util.TypedValue.COMPLEX_UNIT_PT, android.util.TypedValue.COMPLEX_UNIT_IN, android.util.TypedValue.COMPLEX_UNIT_MM}"></val>
        </annotation>
    </item>
    <item name="android.widget.RemoteViews void setViewLayoutMargin(int, int, float, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.RemoteViews.MARGIN_LEFT, android.widget.RemoteViews.MARGIN_TOP, android.widget.RemoteViews.MARGIN_RIGHT, android.widget.RemoteViews.MARGIN_BOTTOM, android.widget.RemoteViews.MARGIN_START, android.widget.RemoteViews.MARGIN_END}"></val>
        </annotation>
    </item>
    <item name="android.widget.RemoteViews void setViewLayoutMargin(int, int, float, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.TypedValue.COMPLEX_UNIT_PX, android.util.TypedValue.COMPLEX_UNIT_DIP, android.util.TypedValue.COMPLEX_UNIT_SP, android.util.TypedValue.COMPLEX_UNIT_PT, android.util.TypedValue.COMPLEX_UNIT_IN, android.util.TypedValue.COMPLEX_UNIT_MM}"></val>
        </annotation>
    </item>
    <item name="android.widget.RemoteViews void setViewLayoutMarginAttr(int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.RemoteViews.MARGIN_LEFT, android.widget.RemoteViews.MARGIN_TOP, android.widget.RemoteViews.MARGIN_RIGHT, android.widget.RemoteViews.MARGIN_BOTTOM, android.widget.RemoteViews.MARGIN_START, android.widget.RemoteViews.MARGIN_END}"></val>
        </annotation>
    </item>
    <item name="android.widget.RemoteViews void setViewLayoutMarginDimen(int, int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.RemoteViews.MARGIN_LEFT, android.widget.RemoteViews.MARGIN_TOP, android.widget.RemoteViews.MARGIN_RIGHT, android.widget.RemoteViews.MARGIN_BOTTOM, android.widget.RemoteViews.MARGIN_START, android.widget.RemoteViews.MARGIN_END}"></val>
        </annotation>
    </item>
    <item name="android.widget.RemoteViews void setViewLayoutWidth(int, float, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.TypedValue.COMPLEX_UNIT_PX, android.util.TypedValue.COMPLEX_UNIT_DIP, android.util.TypedValue.COMPLEX_UNIT_SP, android.util.TypedValue.COMPLEX_UNIT_PT, android.util.TypedValue.COMPLEX_UNIT_IN, android.util.TypedValue.COMPLEX_UNIT_MM}"></val>
        </annotation>
    </item>
    <item name="android.widget.RemoteViews void setViewOutlinePreferredRadius(int, float, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.TypedValue.COMPLEX_UNIT_PX, android.util.TypedValue.COMPLEX_UNIT_DIP, android.util.TypedValue.COMPLEX_UNIT_SP, android.util.TypedValue.COMPLEX_UNIT_PT, android.util.TypedValue.COMPLEX_UNIT_IN, android.util.TypedValue.COMPLEX_UNIT_MM}"></val>
        </annotation>
    </item>
    <item name="android.widget.RemoteViews void setViewVisibility(int, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}"></val>
        </annotation>
    </item>
    <item name="android.widget.TextView void setAutoSizeTextTypeWithDefaults(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.TextView.AUTO_SIZE_TEXT_TYPE_NONE, android.widget.TextView.AUTO_SIZE_TEXT_TYPE_UNIFORM}"></val>
        </annotation>
    </item>
    <item name="android.widget.TextView void setBreakStrategy(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreaker.BREAK_STRATEGY_SIMPLE, android.graphics.text.LineBreaker.BREAK_STRATEGY_HIGH_QUALITY, android.graphics.text.LineBreaker.BREAK_STRATEGY_BALANCED}"></val>
        </annotation>
    </item>
    <item name="android.widget.TextView void setHyphenationFrequency(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.text.Layout.HYPHENATION_FREQUENCY_NORMAL, android.text.Layout.HYPHENATION_FREQUENCY_NORMAL_FAST, android.text.Layout.HYPHENATION_FREQUENCY_FULL, android.text.Layout.HYPHENATION_FREQUENCY_FULL_FAST, android.text.Layout.HYPHENATION_FREQUENCY_NONE}"></val>
        </annotation>
    </item>
    <item name="android.widget.TextView void setJustificationMode(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreaker.JUSTIFICATION_MODE_NONE, android.graphics.text.LineBreaker.JUSTIFICATION_MODE_INTER_WORD, android.graphics.text.LineBreaker.JUSTIFICATION_MODE_INTER_CHARACTER}"></val>
        </annotation>
    </item>
    <item name="android.widget.TextView void setLineBreakStyle(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_NONE, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_LOOSE, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_NORMAL, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_STRICT, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_UNSPECIFIED, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_NO_BREAK, android.graphics.text.LineBreakConfig.LINE_BREAK_STYLE_AUTO}"></val>
        </annotation>
    </item>
    <item name="android.widget.TextView void setLineBreakWordStyle(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.text.LineBreakConfig.LINE_BREAK_WORD_STYLE_NONE, android.graphics.text.LineBreakConfig.LINE_BREAK_WORD_STYLE_PHRASE, android.graphics.text.LineBreakConfig.LINE_BREAK_WORD_STYLE_UNSPECIFIED, android.graphics.text.LineBreakConfig.LINE_BREAK_WORD_STYLE_AUTO}"></val>
        </annotation>
    </item>
    <item name="android.widget.TextView void setLineHeight(int, float) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.util.TypedValue.COMPLEX_UNIT_PX, android.util.TypedValue.COMPLEX_UNIT_DIP, android.util.TypedValue.COMPLEX_UNIT_SP, android.util.TypedValue.COMPLEX_UNIT_PT, android.util.TypedValue.COMPLEX_UNIT_IN, android.util.TypedValue.COMPLEX_UNIT_MM}"></val>
        </annotation>
    </item>
    <item name="android.widget.TextView void setTypeface(android.graphics.Typeface, int) 1">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.graphics.Typeface.NORMAL, android.graphics.Typeface.BOLD, android.graphics.Typeface.ITALIC, android.graphics.Typeface.BOLD_ITALIC}"></val>
        </annotation>
    </item>
    <item name="android.widget.Toast android.widget.Toast makeText(android.content.Context, int, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.Toast.LENGTH_SHORT, android.widget.Toast.LENGTH_LONG}"></val>
        </annotation>
    </item>
    <item name="android.widget.Toast android.widget.Toast makeText(android.content.Context, java.lang.CharSequence, int) 2">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.Toast.LENGTH_SHORT, android.widget.Toast.LENGTH_LONG}"></val>
        </annotation>
    </item>
    <item name="android.widget.Toast void setDuration(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.widget.Toast.LENGTH_SHORT, android.widget.Toast.LENGTH_LONG}"></val>
        </annotation>
    </item>
    <item name="android.widget.Toolbar void onRtlPropertiesChanged(int) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}"></val>
        </annotation>
    </item>
    <item name="android.window.BackEvent BackEvent(float, float, float, int) 3">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.window.BackEvent.EDGE_LEFT, android.window.BackEvent.EDGE_RIGHT}"></val>
        </annotation>
    </item>
    <item name="android.window.OnBackInvokedDispatcher void registerOnBackInvokedCallback(int, android.window.OnBackInvokedCallback) 0">
        <annotation name="androidx.annotation.IntDef">
            <val name="value" val="{android.window.OnBackInvokedDispatcher.PRIORITY_DEFAULT, android.window.OnBackInvokedDispatcher.PRIORITY_OVERLAY}"></val>
        </annotation>
    </item>
</root>
